
robot_arm_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005a0  00800100  00000a2e  00000ac2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  008006a0  008006a0  00001062  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001062  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001094  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000010d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000136e  00000000  00000000  0000118c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000964  00000000  00000000  000024fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009a2  00000000  00000000  00002e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  00003800  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055e  00000000  00000000  000039b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ac2  00000000  00000000  00003f12  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000049d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	16 e0       	ldi	r17, 0x06	; 6
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e2       	ldi	r30, 0x2E	; 46
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 3a       	cpi	r26, 0xA0	; 160
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	26 e0       	ldi	r18, 0x06	; 6
  8c:	a0 ea       	ldi	r26, 0xA0	; 160
  8e:	b6 e0       	ldi	r27, 0x06	; 6
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 3a       	cpi	r26, 0xA4	; 164
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 cd 02 	call	0x59a	; 0x59a <main>
  9e:	0c 94 15 05 	jmp	0xa2a	; 0xa2a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_init>:
    } else {
        status = TRANSMISSION_ERROR;
    }

    return status;
}
  a6:	e9 eb       	ldi	r30, 0xB9	; 185
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8c 7f       	andi	r24, 0xFC	; 252
  ae:	80 83       	st	Z, r24
  b0:	88 e4       	ldi	r24, 0x48	; 72
  b2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  b6:	08 95       	ret

000000b8 <i2c_tx_start>:
  b8:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__data_end>
  bc:	ec eb       	ldi	r30, 0xBC	; 188
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	84 6a       	ori	r24, 0xA4	; 164
  c4:	80 83       	st	Z, r24
  c6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ca:	88 23       	and	r24, r24
  cc:	e4 f7       	brge	.-8      	; 0xc6 <i2c_tx_start+0xe>
  ce:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  d2:	88 7f       	andi	r24, 0xF8	; 248
  d4:	88 30       	cpi	r24, 0x08	; 8
  d6:	11 f0       	breq	.+4      	; 0xdc <i2c_tx_start+0x24>
  d8:	80 31       	cpi	r24, 0x10	; 16
  da:	11 f4       	brne	.+4      	; 0xe0 <i2c_tx_start+0x28>
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	08 95       	ret
  e0:	8e ef       	ldi	r24, 0xFE	; 254
  e2:	08 95       	ret

000000e4 <i2c_tx_address>:
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	90 91 a0 06 	lds	r25, 0x06A0	; 0x8006a0 <__data_end>
  ee:	89 2b       	or	r24, r25
  f0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  f4:	ec eb       	ldi	r30, 0xBC	; 188
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	8f 7d       	andi	r24, 0xDF	; 223
  fc:	80 83       	st	Z, r24
  fe:	80 81       	ld	r24, Z
 100:	80 68       	ori	r24, 0x80	; 128
 102:	80 83       	st	Z, r24
 104:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 108:	88 23       	and	r24, r24
 10a:	e4 f7       	brge	.-8      	; 0x104 <i2c_tx_address+0x20>
 10c:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <__data_end>
 110:	81 11       	cpse	r24, r1
 112:	07 c0       	rjmp	.+14     	; 0x122 <i2c_tx_address+0x3e>
 114:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 118:	88 7f       	andi	r24, 0xF8	; 248
 11a:	88 31       	cpi	r24, 0x18	; 24
 11c:	59 f4       	brne	.+22     	; 0x134 <i2c_tx_address+0x50>
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	08 95       	ret
 122:	81 30       	cpi	r24, 0x01	; 1
 124:	49 f4       	brne	.+18     	; 0x138 <i2c_tx_address+0x54>
 126:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 12a:	88 7f       	andi	r24, 0xF8	; 248
 12c:	80 34       	cpi	r24, 0x40	; 64
 12e:	31 f4       	brne	.+12     	; 0x13c <i2c_tx_address+0x58>
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	08 95       	ret
 134:	8e ef       	ldi	r24, 0xFE	; 254
 136:	08 95       	ret
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	08 95       	ret
 13c:	8e ef       	ldi	r24, 0xFE	; 254
 13e:	08 95       	ret

00000140 <i2c_tx_byte>:
 140:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 144:	ec eb       	ldi	r30, 0xBC	; 188
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	80 68       	ori	r24, 0x80	; 128
 14c:	80 83       	st	Z, r24
 14e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 152:	88 23       	and	r24, r24
 154:	e4 f7       	brge	.-8      	; 0x14e <i2c_tx_byte+0xe>
 156:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 15a:	88 7f       	andi	r24, 0xF8	; 248
 15c:	88 32       	cpi	r24, 0x28	; 40
 15e:	11 f4       	brne	.+4      	; 0x164 <i2c_tx_byte+0x24>
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	08 95       	ret
 164:	8e ef       	ldi	r24, 0xFE	; 254
 166:	08 95       	ret

00000168 <i2c_tx_stop>:

void i2c_tx_stop(void)
{
    /* clear interrupt flag, issue stop command (cleared automatically) */
    TWCR |= (1 << TWINT) | (1 << TWSTO);
 168:	ec eb       	ldi	r30, 0xBC	; 188
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	80 69       	ori	r24, 0x90	; 144
 170:	80 83       	st	Z, r24

    while (!(TWCR & (1 << TWSTO))); // wait until stop transmitted
 172:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 176:	84 ff       	sbrs	r24, 4
 178:	fc cf       	rjmp	.-8      	; 0x172 <i2c_tx_stop+0xa>
 17a:	08 95       	ret

0000017c <pca9685_init>:
    i2c_tx_byte(0x00); // set value of LEDXX_ON_L
    i2c_tx_byte(0x00); // set value of LEDXX_ON_H
    i2c_tx_byte(offLowCmnd); // set value of LEDXX_OFF_L
    i2c_tx_byte(offHighCmnd); // set value of LEDXX_OFF_H
    i2c_tx_stop();
}
 17c:	ff 92       	push	r15
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	1f 92       	push	r1
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62
 18c:	f8 2e       	mov	r15, r24
 18e:	8b 01       	movw	r16, r22
 190:	70 93 a3 06 	sts	0x06A3, r23	; 0x8006a3 <globalFrequency+0x1>
 194:	60 93 a2 06 	sts	0x06A2, r22	; 0x8006a2 <globalFrequency>
 198:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <globalAddress>
 19c:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_init>
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2c_tx_start>
 1a6:	80 e4       	ldi	r24, 0x40	; 64
 1a8:	8f 0d       	add	r24, r15
 1aa:	0e 94 72 00 	call	0xe4	; 0xe4 <i2c_tx_address>
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
 1b4:	81 e3       	ldi	r24, 0x31	; 49
 1b6:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
 1ba:	0e 94 b4 00 	call	0x168	; 0x168 <i2c_tx_stop>
 1be:	89 ef       	ldi	r24, 0xF9	; 249
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <pca9685_init+0x46>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <pca9685_init+0x4c>
 1c8:	00 00       	nop
 1ca:	b8 01       	movw	r22, r16
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 1a 04 	call	0x834	; 0x834 <__floatunsisf>
 1d4:	20 e0       	ldi	r18, 0x00	; 0
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	40 e8       	ldi	r20, 0x80	; 128
 1da:	55 e4       	ldi	r21, 0x45	; 69
 1dc:	0e 94 a8 04 	call	0x950	; 0x950 <__mulsf3>
 1e0:	2f e1       	ldi	r18, 0x1F	; 31
 1e2:	35 e8       	ldi	r19, 0x85	; 133
 1e4:	4b e6       	ldi	r20, 0x6B	; 107
 1e6:	5f e3       	ldi	r21, 0x3F	; 63
 1e8:	0e 94 a8 04 	call	0x950	; 0x950 <__mulsf3>
 1ec:	9b 01       	movw	r18, r22
 1ee:	ac 01       	movw	r20, r24
 1f0:	60 e2       	ldi	r22, 0x20	; 32
 1f2:	7c eb       	ldi	r23, 0xBC	; 188
 1f4:	8e eb       	ldi	r24, 0xBE	; 190
 1f6:	9b e4       	ldi	r25, 0x4B	; 75
 1f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__divsf3>
 1fc:	20 e0       	ldi	r18, 0x00	; 0
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	40 e8       	ldi	r20, 0x80	; 128
 202:	5f e3       	ldi	r21, 0x3F	; 63
 204:	0e 94 0c 03 	call	0x618	; 0x618 <__subsf3>
 208:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__fixunssfsi>
 20c:	69 83       	std	Y+1, r22	; 0x01
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2c_tx_start>
 214:	80 e4       	ldi	r24, 0x40	; 64
 216:	0e 94 72 00 	call	0xe4	; 0xe4 <i2c_tx_address>
 21a:	8e ef       	ldi	r24, 0xFE	; 254
 21c:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
 220:	89 81       	ldd	r24, Y+1	; 0x01
 222:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
 226:	0e 94 b4 00 	call	0x168	; 0x168 <i2c_tx_stop>
 22a:	89 ef       	ldi	r24, 0xF9	; 249
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <pca9685_init+0xb2>
 232:	00 c0       	rjmp	.+0      	; 0x234 <pca9685_init+0xb8>
 234:	00 00       	nop
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2c_tx_start>
 23c:	80 e4       	ldi	r24, 0x40	; 64
 23e:	0e 94 72 00 	call	0xe4	; 0xe4 <i2c_tx_address>
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
 248:	81 ea       	ldi	r24, 0xA1	; 161
 24a:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
 24e:	0e 94 b4 00 	call	0x168	; 0x168 <i2c_tx_stop>
 252:	89 ef       	ldi	r24, 0xF9	; 249
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <pca9685_init+0xda>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <pca9685_init+0xe0>
 25c:	00 00       	nop
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2c_tx_start>
 264:	80 e4       	ldi	r24, 0x40	; 64
 266:	0e 94 72 00 	call	0xe4	; 0xe4 <i2c_tx_address>
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
 270:	84 e0       	ldi	r24, 0x04	; 4
 272:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
 276:	0e 94 b4 00 	call	0x168	; 0x168 <i2c_tx_stop>
 27a:	0f 90       	pop	r0
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	1f 91       	pop	r17
 282:	0f 91       	pop	r16
 284:	ff 90       	pop	r15
 286:	08 95       	ret

00000288 <pca9685_pwm>:

void pca9685_pwm(uint8_t servoNum, uint16_t usec){
 288:	1f 93       	push	r17
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	c8 2f       	mov	r28, r24
	//else if (usec < 600) usec = 600;
	
	uint16_t pulse_us = usec; //1500 + angle*10;

	uint16_t period_us = 20000; // (float)1000000 / 50Hz;
	uint16_t count = (float)pulse_us/20000 * 4096; //((float)pulse_us / period_us) * 4096;
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 1a 04 	call	0x834	; 0x834 <__floatunsisf>
 298:	20 e0       	ldi	r18, 0x00	; 0
 29a:	30 e4       	ldi	r19, 0x40	; 64
 29c:	4c e9       	ldi	r20, 0x9C	; 156
 29e:	56 e4       	ldi	r21, 0x46	; 70
 2a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__divsf3>
 2a4:	20 e0       	ldi	r18, 0x00	; 0
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	40 e8       	ldi	r20, 0x80	; 128
 2aa:	55 e4       	ldi	r21, 0x45	; 69
 2ac:	0e 94 a8 04 	call	0x950	; 0x950 <__mulsf3>
 2b0:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__fixunssfsi>
 2b4:	16 2f       	mov	r17, r22
 2b6:	d7 2f       	mov	r29, r23

	uint8_t offLowCmnd = count;
	uint8_t offHighCmnd = count >> 8;

	i2c_tx_start(MASTER_TRANSMITTER);
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2c_tx_start>
	i2c_tx_address(0x40 + globalAddress); 
 2be:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <globalAddress>
 2c2:	80 5c       	subi	r24, 0xC0	; 192
 2c4:	0e 94 72 00 	call	0xe4	; 0xe4 <i2c_tx_address>
	i2c_tx_byte(SERVO0 + (4 * servoNum));
 2c8:	8c 2f       	mov	r24, r28
 2ca:	88 0f       	add	r24, r24
 2cc:	88 0f       	add	r24, r24
 2ce:	8a 5f       	subi	r24, 0xFA	; 250
 2d0:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
	i2c_tx_byte(0x00); 
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
	i2c_tx_byte(0x00); 
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
	i2c_tx_byte(offLowCmnd); 
 2e0:	81 2f       	mov	r24, r17
 2e2:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
	i2c_tx_byte(offHighCmnd); 
 2e6:	8d 2f       	mov	r24, r29
 2e8:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
	i2c_tx_stop();
 2ec:	0e 94 b4 00 	call	0x168	; 0x168 <i2c_tx_stop>
}
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	1f 91       	pop	r17
 2f6:	08 95       	ret

000002f8 <INIT_SERVO>:
		
	}
	return 0;
}

void INIT_SERVO(){     
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29

	pca9685_init(0x00, 50); // start PCA9685 device 0x00 at 50 Hz output
 2fc:	62 e3       	ldi	r22, 0x32	; 50
 2fe:	70 e0       	ldi	r23, 0x00	; 0
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	0e 94 be 00 	call	0x17c	; 0x17c <pca9685_init>
	int i;

	for (i = 1; i <= 4; i++){
 306:	c1 e0       	ldi	r28, 0x01	; 1
 308:	d0 e0       	ldi	r29, 0x00	; 0
 30a:	2f c0       	rjmp	.+94     	; 0x36a <INIT_SERVO+0x72>
		if(i == 3) {
 30c:	c3 30       	cpi	r28, 0x03	; 3
 30e:	d1 05       	cpc	r29, r1
 310:	b1 f4       	brne	.+44     	; 0x33e <INIT_SERVO+0x46>
			pca9685_pwm(SERVO_A(i), ANGLE(110));
 312:	64 ea       	ldi	r22, 0xA4	; 164
 314:	76 e0       	ldi	r23, 0x06	; 6
 316:	8c 2f       	mov	r24, r28
 318:	81 50       	subi	r24, 0x01	; 1
 31a:	0e 94 44 01 	call	0x288	; 0x288 <pca9685_pwm>
			pca9685_pwm(SERVO_B(i), ANGLE(120));
 31e:	68 e0       	ldi	r22, 0x08	; 8
 320:	77 e0       	ldi	r23, 0x07	; 7
 322:	8c 2f       	mov	r24, r28
 324:	89 5f       	subi	r24, 0xF9	; 249
 326:	0e 94 44 01 	call	0x288	; 0x288 <pca9685_pwm>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 32a:	2f ef       	ldi	r18, 0xFF	; 255
 32c:	89 ef       	ldi	r24, 0xF9	; 249
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	21 50       	subi	r18, 0x01	; 1
 332:	80 40       	sbci	r24, 0x00	; 0
 334:	90 40       	sbci	r25, 0x00	; 0
 336:	e1 f7       	brne	.-8      	; 0x330 <INIT_SERVO+0x38>
 338:	00 c0       	rjmp	.+0      	; 0x33a <INIT_SERVO+0x42>
 33a:	00 00       	nop
 33c:	15 c0       	rjmp	.+42     	; 0x368 <INIT_SERVO+0x70>
			_delay_ms(20);
		}
		else {
			pca9685_pwm(SERVO_A(i), ANGLE(90));
 33e:	6c ed       	ldi	r22, 0xDC	; 220
 340:	75 e0       	ldi	r23, 0x05	; 5
 342:	8c 2f       	mov	r24, r28
 344:	81 50       	subi	r24, 0x01	; 1
 346:	0e 94 44 01 	call	0x288	; 0x288 <pca9685_pwm>
			pca9685_pwm(SERVO_B(i), ANGLE(90));
 34a:	6c ed       	ldi	r22, 0xDC	; 220
 34c:	75 e0       	ldi	r23, 0x05	; 5
 34e:	8c 2f       	mov	r24, r28
 350:	89 5f       	subi	r24, 0xF9	; 249
 352:	0e 94 44 01 	call	0x288	; 0x288 <pca9685_pwm>
 356:	2f ef       	ldi	r18, 0xFF	; 255
 358:	89 ef       	ldi	r24, 0xF9	; 249
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	21 50       	subi	r18, 0x01	; 1
 35e:	80 40       	sbci	r24, 0x00	; 0
 360:	90 40       	sbci	r25, 0x00	; 0
 362:	e1 f7       	brne	.-8      	; 0x35c <INIT_SERVO+0x64>
 364:	00 c0       	rjmp	.+0      	; 0x366 <INIT_SERVO+0x6e>
 366:	00 00       	nop
void INIT_SERVO(){     

	pca9685_init(0x00, 50); // start PCA9685 device 0x00 at 50 Hz output
	int i;

	for (i = 1; i <= 4; i++){
 368:	21 96       	adiw	r28, 0x01	; 1
 36a:	c5 30       	cpi	r28, 0x05	; 5
 36c:	d1 05       	cpc	r29, r1
 36e:	74 f2       	brlt	.-100    	; 0x30c <INIT_SERVO+0x14>
			pca9685_pwm(SERVO_B(i), ANGLE(90));
			_delay_ms(20);
		}
	}

	pca9685_pwm(SERVO_A(5), ANGLE(45));
 370:	6a e1       	ldi	r22, 0x1A	; 26
 372:	74 e0       	ldi	r23, 0x04	; 4
 374:	84 e0       	ldi	r24, 0x04	; 4
 376:	0e 94 44 01 	call	0x288	; 0x288 <pca9685_pwm>
	pca9685_pwm(SERVO_B(5), ANGLE(120));
 37a:	68 e0       	ldi	r22, 0x08	; 8
 37c:	77 e0       	ldi	r23, 0x07	; 7
 37e:	8c e0       	ldi	r24, 0x0C	; 12
 380:	0e 94 44 01 	call	0x288	; 0x288 <pca9685_pwm>
 384:	2f ef       	ldi	r18, 0xFF	; 255
 386:	83 ec       	ldi	r24, 0xC3	; 195
 388:	99 e0       	ldi	r25, 0x09	; 9
 38a:	21 50       	subi	r18, 0x01	; 1
 38c:	80 40       	sbci	r24, 0x00	; 0
 38e:	90 40       	sbci	r25, 0x00	; 0
 390:	e1 f7       	brne	.-8      	; 0x38a <INIT_SERVO+0x92>
 392:	00 c0       	rjmp	.+0      	; 0x394 <INIT_SERVO+0x9c>
 394:	00 00       	nop
	_delay_ms(200);

}
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	08 95       	ret

0000039c <MoveServo>:

void MoveServo(uint8_t servo, uint16_t start_angle, uint16_t end_angle) {
 39c:	ff 92       	push	r15
 39e:	0f 93       	push	r16
 3a0:	1f 93       	push	r17
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	f8 2e       	mov	r15, r24
 3a8:	8a 01       	movw	r16, r20
	int angle;

	if (start_angle <= end_angle) {
 3aa:	46 17       	cp	r20, r22
 3ac:	57 07       	cpc	r21, r23
 3ae:	e0 f0       	brcs	.+56     	; 0x3e8 <MoveServo+0x4c>
		for (angle = start_angle; angle <= end_angle; ) {
 3b0:	eb 01       	movw	r28, r22
 3b2:	14 c0       	rjmp	.+40     	; 0x3dc <MoveServo+0x40>
			if (PINB & (1 << switch1)) {
 3b4:	1a 9b       	sbis	0x03, 2	; 3
 3b6:	0e c0       	rjmp	.+28     	; 0x3d4 <MoveServo+0x38>
				PORTB &= ~0x02;
 3b8:	85 b1       	in	r24, 0x05	; 5
 3ba:	8d 7f       	andi	r24, 0xFD	; 253
 3bc:	85 b9       	out	0x05, r24	; 5
				pca9685_pwm(servo, angle);
 3be:	8f 2d       	mov	r24, r15
 3c0:	0e 94 44 01 	call	0x288	; 0x288 <pca9685_pwm>
				//angle += 10;
				angle++;
 3c4:	21 96       	adiw	r28, 0x01	; 1
 3c6:	8f e9       	ldi	r24, 0x9F	; 159
 3c8:	9f e0       	ldi	r25, 0x0F	; 15
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <MoveServo+0x2e>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <MoveServo+0x34>
 3d0:	00 00       	nop
 3d2:	04 c0       	rjmp	.+8      	; 0x3dc <MoveServo+0x40>
			}
			else {
				PORTB |= 0x02;
 3d4:	85 b1       	in	r24, 0x05	; 5
 3d6:	82 60       	ori	r24, 0x02	; 2
 3d8:	85 b9       	out	0x05, r24	; 5
				break;
 3da:	21 c0       	rjmp	.+66     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>

void MoveServo(uint8_t servo, uint16_t start_angle, uint16_t end_angle) {
	int angle;

	if (start_angle <= end_angle) {
		for (angle = start_angle; angle <= end_angle; ) {
 3dc:	6c 2f       	mov	r22, r28
 3de:	7d 2f       	mov	r23, r29
 3e0:	0c 17       	cp	r16, r28
 3e2:	1d 07       	cpc	r17, r29
 3e4:	38 f7       	brcc	.-50     	; 0x3b4 <MoveServo+0x18>
 3e6:	1b c0       	rjmp	.+54     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
			_delay_ms(1);
		}
	}
	
	else {
		for (angle = start_angle; angle >= end_angle; ) {
 3e8:	eb 01       	movw	r28, r22
 3ea:	14 c0       	rjmp	.+40     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
			if (PINB & (1 << switch1)) {
 3ec:	1a 9b       	sbis	0x03, 2	; 3
 3ee:	0e c0       	rjmp	.+28     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
				PORTB &= ~0x02;
 3f0:	85 b1       	in	r24, 0x05	; 5
 3f2:	8d 7f       	andi	r24, 0xFD	; 253
 3f4:	85 b9       	out	0x05, r24	; 5
				pca9685_pwm(servo, angle);
 3f6:	8f 2d       	mov	r24, r15
 3f8:	0e 94 44 01 	call	0x288	; 0x288 <pca9685_pwm>
				//angle -= 10;
				angle--;
 3fc:	21 97       	sbiw	r28, 0x01	; 1
 3fe:	8f e9       	ldi	r24, 0x9F	; 159
 400:	9f e0       	ldi	r25, 0x0F	; 15
 402:	01 97       	sbiw	r24, 0x01	; 1
 404:	f1 f7       	brne	.-4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 406:	00 c0       	rjmp	.+0      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 408:	00 00       	nop
 40a:	04 c0       	rjmp	.+8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
			}
			else {
				PORTB |= 0x02;
 40c:	85 b1       	in	r24, 0x05	; 5
 40e:	82 60       	ori	r24, 0x02	; 2
 410:	85 b9       	out	0x05, r24	; 5
				break;
 412:	05 c0       	rjmp	.+10     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
			_delay_ms(1);
		}
	}
	
	else {
		for (angle = start_angle; angle >= end_angle; ) {
 414:	6c 2f       	mov	r22, r28
 416:	7d 2f       	mov	r23, r29
 418:	c0 17       	cp	r28, r16
 41a:	d1 07       	cpc	r29, r17
 41c:	38 f7       	brcc	.-50     	; 0x3ec <MoveServo+0x50>
 41e:	9f ef       	ldi	r25, 0xFF	; 255
 420:	21 ee       	ldi	r18, 0xE1	; 225
 422:	84 e0       	ldi	r24, 0x04	; 4
 424:	91 50       	subi	r25, 0x01	; 1
 426:	20 40       	sbci	r18, 0x00	; 0
 428:	80 40       	sbci	r24, 0x00	; 0
 42a:	e1 f7       	brne	.-8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42e:	00 00       	nop
			_delay_ms(1);
		}
	}

	_delay_ms(100);
}
 430:	df 91       	pop	r29
 432:	cf 91       	pop	r28
 434:	1f 91       	pop	r17
 436:	0f 91       	pop	r16
 438:	ff 90       	pop	r15
 43a:	08 95       	ret

0000043c <MoveRobotArm>:

void MoveRobotArm(uint8_t servo, uint8_t count) {
 43c:	1f 93       	push	r17
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
 442:	16 2f       	mov	r17, r22
	
	int i;
	
	switch (servo){
 444:	81 30       	cpi	r24, 0x01	; 1
 446:	b1 f1       	breq	.+108    	; 0x4b4 <MoveRobotArm+0x78>
 448:	82 30       	cpi	r24, 0x02	; 2
 44a:	09 f4       	brne	.+2      	; 0x44e <MoveRobotArm+0x12>
 44c:	66 c0       	rjmp	.+204    	; 0x51a <MoveRobotArm+0xde>
 44e:	a1 c0       	rjmp	.+322    	; 0x592 <MoveRobotArm+0x156>
		case 1:
		for(i = 0; i < servo_max_A; i++){
			
			MoveServo(SERVO_A(move_Aarm_coord[count][i][0]), ANGLE(move_Aarm_coord[count][i][1]), ANGLE(move_Aarm_coord[count][i][2]));
 450:	fe 01       	movw	r30, r28
 452:	ee 0f       	add	r30, r30
 454:	ff 1f       	adc	r31, r31
 456:	ec 0f       	add	r30, r28
 458:	fd 1f       	adc	r31, r29
 45a:	ee 0f       	add	r30, r30
 45c:	ff 1f       	adc	r31, r31
 45e:	8c e6       	ldi	r24, 0x6C	; 108
 460:	18 9f       	mul	r17, r24
 462:	e0 0d       	add	r30, r0
 464:	f1 1d       	adc	r31, r1
 466:	11 24       	eor	r1, r1
 468:	ec 52       	subi	r30, 0x2C	; 44
 46a:	fd 4f       	sbci	r31, 0xFD	; 253
 46c:	84 81       	ldd	r24, Z+4	; 0x04
 46e:	95 81       	ldd	r25, Z+5	; 0x05
 470:	ac 01       	movw	r20, r24
 472:	44 0f       	add	r20, r20
 474:	55 1f       	adc	r21, r21
 476:	88 0f       	add	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	88 0f       	add	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	88 0f       	add	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	48 0f       	add	r20, r24
 484:	59 1f       	adc	r21, r25
 486:	48 5a       	subi	r20, 0xA8	; 168
 488:	5d 4f       	sbci	r21, 0xFD	; 253
 48a:	82 81       	ldd	r24, Z+2	; 0x02
 48c:	93 81       	ldd	r25, Z+3	; 0x03
 48e:	bc 01       	movw	r22, r24
 490:	66 0f       	add	r22, r22
 492:	77 1f       	adc	r23, r23
 494:	88 0f       	add	r24, r24
 496:	99 1f       	adc	r25, r25
 498:	88 0f       	add	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	88 0f       	add	r24, r24
 49e:	99 1f       	adc	r25, r25
 4a0:	68 0f       	add	r22, r24
 4a2:	79 1f       	adc	r23, r25
 4a4:	68 5a       	subi	r22, 0xA8	; 168
 4a6:	7d 4f       	sbci	r23, 0xFD	; 253
 4a8:	80 81       	ld	r24, Z
 4aa:	81 50       	subi	r24, 0x01	; 1
 4ac:	0e 94 ce 01 	call	0x39c	; 0x39c <MoveServo>
	
	int i;
	
	switch (servo){
		case 1:
		for(i = 0; i < servo_max_A; i++){
 4b0:	21 96       	adiw	r28, 0x01	; 1
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <MoveRobotArm+0x7c>

void MoveRobotArm(uint8_t servo, uint8_t count) {
	
	int i;
	
	switch (servo){
 4b4:	c0 e0       	ldi	r28, 0x00	; 0
 4b6:	d0 e0       	ldi	r29, 0x00	; 0
		case 1:
		for(i = 0; i < servo_max_A; i++){
 4b8:	c2 31       	cpi	r28, 0x12	; 18
 4ba:	d1 05       	cpc	r29, r1
 4bc:	4c f2       	brlt	.-110    	; 0x450 <MoveRobotArm+0x14>
 4be:	69 c0       	rjmp	.+210    	; 0x592 <MoveRobotArm+0x156>
			MoveServo(SERVO_A(move_Aarm_coord[count][i][0]), ANGLE(move_Aarm_coord[count][i][1]), ANGLE(move_Aarm_coord[count][i][2]));
		}
		break;
		case 2:
		for(i = 0; i < servo_max_Bfst; i++){
			MoveServo(SERVO_B(move_Barm_fst[i][0]), ANGLE(move_Barm_fst[i][1]), ANGLE(move_Barm_fst[i][2]));
 4c0:	fe 01       	movw	r30, r28
 4c2:	ee 0f       	add	r30, r30
 4c4:	ff 1f       	adc	r31, r31
 4c6:	ec 0f       	add	r30, r28
 4c8:	fd 1f       	adc	r31, r29
 4ca:	ee 0f       	add	r30, r30
 4cc:	ff 1f       	adc	r31, r31
 4ce:	e6 58       	subi	r30, 0x86	; 134
 4d0:	fd 4f       	sbci	r31, 0xFD	; 253
 4d2:	84 81       	ldd	r24, Z+4	; 0x04
 4d4:	95 81       	ldd	r25, Z+5	; 0x05
 4d6:	ac 01       	movw	r20, r24
 4d8:	44 0f       	add	r20, r20
 4da:	55 1f       	adc	r21, r21
 4dc:	88 0f       	add	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	88 0f       	add	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	88 0f       	add	r24, r24
 4e6:	99 1f       	adc	r25, r25
 4e8:	48 0f       	add	r20, r24
 4ea:	59 1f       	adc	r21, r25
 4ec:	48 5a       	subi	r20, 0xA8	; 168
 4ee:	5d 4f       	sbci	r21, 0xFD	; 253
 4f0:	82 81       	ldd	r24, Z+2	; 0x02
 4f2:	93 81       	ldd	r25, Z+3	; 0x03
 4f4:	bc 01       	movw	r22, r24
 4f6:	66 0f       	add	r22, r22
 4f8:	77 1f       	adc	r23, r23
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	88 0f       	add	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	88 0f       	add	r24, r24
 504:	99 1f       	adc	r25, r25
 506:	68 0f       	add	r22, r24
 508:	79 1f       	adc	r23, r25
 50a:	68 5a       	subi	r22, 0xA8	; 168
 50c:	7d 4f       	sbci	r23, 0xFD	; 253
 50e:	80 81       	ld	r24, Z
 510:	89 5f       	subi	r24, 0xF9	; 249
 512:	0e 94 ce 01 	call	0x39c	; 0x39c <MoveServo>
			
			MoveServo(SERVO_A(move_Aarm_coord[count][i][0]), ANGLE(move_Aarm_coord[count][i][1]), ANGLE(move_Aarm_coord[count][i][2]));
		}
		break;
		case 2:
		for(i = 0; i < servo_max_Bfst; i++){
 516:	21 96       	adiw	r28, 0x01	; 1
 518:	02 c0       	rjmp	.+4      	; 0x51e <MoveRobotArm+0xe2>

void MoveRobotArm(uint8_t servo, uint8_t count) {
	
	int i;
	
	switch (servo){
 51a:	c0 e0       	ldi	r28, 0x00	; 0
 51c:	d0 e0       	ldi	r29, 0x00	; 0
			
			MoveServo(SERVO_A(move_Aarm_coord[count][i][0]), ANGLE(move_Aarm_coord[count][i][1]), ANGLE(move_Aarm_coord[count][i][2]));
		}
		break;
		case 2:
		for(i = 0; i < servo_max_Bfst; i++){
 51e:	cf 30       	cpi	r28, 0x0F	; 15
 520:	d1 05       	cpc	r29, r1
 522:	74 f2       	brlt	.-100    	; 0x4c0 <MoveRobotArm+0x84>
 524:	c0 e0       	ldi	r28, 0x00	; 0
 526:	d0 e0       	ldi	r29, 0x00	; 0
 528:	31 c0       	rjmp	.+98     	; 0x58c <MoveRobotArm+0x150>
			MoveServo(SERVO_B(move_Barm_fst[i][0]), ANGLE(move_Barm_fst[i][1]), ANGLE(move_Barm_fst[i][2]));
		}
		for(i = 0; i < servo_max_B; i++){
			MoveServo(SERVO_B(move_Barm_coord[count][i][0]), ANGLE(move_Barm_coord[count][i][1]), ANGLE(move_Barm_coord[count][i][2]));
 52a:	fe 01       	movw	r30, r28
 52c:	ee 0f       	add	r30, r30
 52e:	ff 1f       	adc	r31, r31
 530:	ec 0f       	add	r30, r28
 532:	fd 1f       	adc	r31, r29
 534:	ee 0f       	add	r30, r30
 536:	ff 1f       	adc	r31, r31
 538:	8a e2       	ldi	r24, 0x2A	; 42
 53a:	18 9f       	mul	r17, r24
 53c:	e0 0d       	add	r30, r0
 53e:	f1 1d       	adc	r31, r1
 540:	11 24       	eor	r1, r1
 542:	e0 50       	subi	r30, 0x00	; 0
 544:	ff 4f       	sbci	r31, 0xFF	; 255
 546:	84 81       	ldd	r24, Z+4	; 0x04
 548:	95 81       	ldd	r25, Z+5	; 0x05
 54a:	ac 01       	movw	r20, r24
 54c:	44 0f       	add	r20, r20
 54e:	55 1f       	adc	r21, r21
 550:	88 0f       	add	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	88 0f       	add	r24, r24
 55a:	99 1f       	adc	r25, r25
 55c:	48 0f       	add	r20, r24
 55e:	59 1f       	adc	r21, r25
 560:	48 5a       	subi	r20, 0xA8	; 168
 562:	5d 4f       	sbci	r21, 0xFD	; 253
 564:	82 81       	ldd	r24, Z+2	; 0x02
 566:	93 81       	ldd	r25, Z+3	; 0x03
 568:	bc 01       	movw	r22, r24
 56a:	66 0f       	add	r22, r22
 56c:	77 1f       	adc	r23, r23
 56e:	88 0f       	add	r24, r24
 570:	99 1f       	adc	r25, r25
 572:	88 0f       	add	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	88 0f       	add	r24, r24
 578:	99 1f       	adc	r25, r25
 57a:	68 0f       	add	r22, r24
 57c:	79 1f       	adc	r23, r25
 57e:	68 5a       	subi	r22, 0xA8	; 168
 580:	7d 4f       	sbci	r23, 0xFD	; 253
 582:	80 81       	ld	r24, Z
 584:	89 5f       	subi	r24, 0xF9	; 249
 586:	0e 94 ce 01 	call	0x39c	; 0x39c <MoveServo>
		break;
		case 2:
		for(i = 0; i < servo_max_Bfst; i++){
			MoveServo(SERVO_B(move_Barm_fst[i][0]), ANGLE(move_Barm_fst[i][1]), ANGLE(move_Barm_fst[i][2]));
		}
		for(i = 0; i < servo_max_B; i++){
 58a:	21 96       	adiw	r28, 0x01	; 1
 58c:	c7 30       	cpi	r28, 0x07	; 7
 58e:	d1 05       	cpc	r29, r1
 590:	64 f2       	brlt	.-104    	; 0x52a <MoveRobotArm+0xee>
			MoveServo(SERVO_B(move_Barm_coord[count][i][0]), ANGLE(move_Barm_coord[count][i][1]), ANGLE(move_Barm_coord[count][i][2]));
		}
		break;
	}
	
 592:	df 91       	pop	r29
 594:	cf 91       	pop	r28
 596:	1f 91       	pop	r17
 598:	08 95       	ret

0000059a <main>:
// 로봇암 쉽게 움직이기
void MoveRobotArm(uint8_t, uint8_t);

int main(void)
{
	LED_DDR |= (1 << LED1);
 59a:	84 b1       	in	r24, 0x04	; 4
 59c:	81 60       	ori	r24, 0x01	; 1
 59e:	84 b9       	out	0x04, r24	; 4
	
	int servotime = 200;
	pca9685_init(0x00, 50); // start PCA9685 device 0x00 at 50 Hz output
 5a0:	62 e3       	ldi	r22, 0x32	; 50
 5a2:	70 e0       	ldi	r23, 0x00	; 0
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	0e 94 be 00 	call	0x17c	; 0x17c <pca9685_init>
 5aa:	2f ef       	ldi	r18, 0xFF	; 255
 5ac:	83 ed       	ldi	r24, 0xD3	; 211
 5ae:	90 e3       	ldi	r25, 0x30	; 48
 5b0:	21 50       	subi	r18, 0x01	; 1
 5b2:	80 40       	sbci	r24, 0x00	; 0
 5b4:	90 40       	sbci	r25, 0x00	; 0
 5b6:	e1 f7       	brne	.-8      	; 0x5b0 <main+0x16>
 5b8:	00 c0       	rjmp	.+0      	; 0x5ba <main+0x20>
 5ba:	00 00       	nop
	
	//uint16_t angle = 0;
	_delay_ms(1000);

	while (1) {
		LED_PORT |= (1 << LED1);
 5bc:	85 b1       	in	r24, 0x05	; 5
 5be:	81 60       	ori	r24, 0x01	; 1
 5c0:	85 b9       	out	0x05, r24	; 5
		
		INIT_SERVO();
 5c2:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <INIT_SERVO>
 5c6:	2f ef       	ldi	r18, 0xFF	; 255
 5c8:	83 ed       	ldi	r24, 0xD3	; 211
 5ca:	90 e3       	ldi	r25, 0x30	; 48
 5cc:	21 50       	subi	r18, 0x01	; 1
 5ce:	80 40       	sbci	r24, 0x00	; 0
 5d0:	90 40       	sbci	r25, 0x00	; 0
 5d2:	e1 f7       	brne	.-8      	; 0x5cc <main+0x32>
 5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <main+0x3c>
 5d6:	00 00       	nop
		//MoveRobotArm(1, 0);
		//LED_PORT &= ~(1 << LED2);
		//_delay_ms(5000);
		
		int i;
		for ( i = 0; i < 9; i++ ) {
 5d8:	c0 e0       	ldi	r28, 0x00	; 0
 5da:	d0 e0       	ldi	r29, 0x00	; 0
 5dc:	16 c0       	rjmp	.+44     	; 0x60a <main+0x70>
			LED_DDR |= (1 << LED2);
 5de:	84 b1       	in	r24, 0x04	; 4
 5e0:	82 60       	ori	r24, 0x02	; 2
 5e2:	84 b9       	out	0x04, r24	; 4
			MoveRobotArm(1, i);
 5e4:	6c 2f       	mov	r22, r28
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	0e 94 1e 02 	call	0x43c	; 0x43c <MoveRobotArm>
			
			LED_PORT &= ~(1 << LED2);
 5ec:	85 b1       	in	r24, 0x05	; 5
 5ee:	8d 7f       	andi	r24, 0xFD	; 253
 5f0:	85 b9       	out	0x05, r24	; 5
 5f2:	2f ef       	ldi	r18, 0xFF	; 255
 5f4:	83 e2       	ldi	r24, 0x23	; 35
 5f6:	94 ef       	ldi	r25, 0xF4	; 244
 5f8:	21 50       	subi	r18, 0x01	; 1
 5fa:	80 40       	sbci	r24, 0x00	; 0
 5fc:	90 40       	sbci	r25, 0x00	; 0
 5fe:	e1 f7       	brne	.-8      	; 0x5f8 <main+0x5e>
 600:	00 c0       	rjmp	.+0      	; 0x602 <main+0x68>
 602:	00 00       	nop
			_delay_ms(5000);
			
			
			INIT_SERVO();
 604:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <INIT_SERVO>
		//MoveRobotArm(1, 0);
		//LED_PORT &= ~(1 << LED2);
		//_delay_ms(5000);
		
		int i;
		for ( i = 0; i < 9; i++ ) {
 608:	21 96       	adiw	r28, 0x01	; 1
 60a:	c9 30       	cpi	r28, 0x09	; 9
 60c:	d1 05       	cpc	r29, r1
 60e:	3c f3       	brlt	.-50     	; 0x5de <main+0x44>
		//pca9685_pwm(SERVO_A(2), ANGLE(40));
		//pca9685_pwm(SERVO_A(3), ANGLE(20));
		//pca9685_pwm(SERVO_A(4), ANGLE(130));
		//pca9685_pwm(SERVO_A(5), ANGLE(45));
		
		LED_PORT &= ~(1 << LED1);
 610:	85 b1       	in	r24, 0x05	; 5
 612:	8e 7f       	andi	r24, 0xFE	; 254
 614:	85 b9       	out	0x05, r24	; 5
		
	}
 616:	d2 cf       	rjmp	.-92     	; 0x5bc <main+0x22>

00000618 <__subsf3>:
 618:	50 58       	subi	r21, 0x80	; 128

0000061a <__addsf3>:
 61a:	bb 27       	eor	r27, r27
 61c:	aa 27       	eor	r26, r26
 61e:	0e 94 24 03 	call	0x648	; 0x648 <__addsf3x>
 622:	0c 94 6e 04 	jmp	0x8dc	; 0x8dc <__fp_round>
 626:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__fp_pscA>
 62a:	38 f0       	brcs	.+14     	; 0x63a <__addsf3+0x20>
 62c:	0e 94 67 04 	call	0x8ce	; 0x8ce <__fp_pscB>
 630:	20 f0       	brcs	.+8      	; 0x63a <__addsf3+0x20>
 632:	39 f4       	brne	.+14     	; 0x642 <__addsf3+0x28>
 634:	9f 3f       	cpi	r25, 0xFF	; 255
 636:	19 f4       	brne	.+6      	; 0x63e <__addsf3+0x24>
 638:	26 f4       	brtc	.+8      	; 0x642 <__addsf3+0x28>
 63a:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__fp_nan>
 63e:	0e f4       	brtc	.+2      	; 0x642 <__addsf3+0x28>
 640:	e0 95       	com	r30
 642:	e7 fb       	bst	r30, 7
 644:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <__fp_inf>

00000648 <__addsf3x>:
 648:	e9 2f       	mov	r30, r25
 64a:	0e 94 7f 04 	call	0x8fe	; 0x8fe <__fp_split3>
 64e:	58 f3       	brcs	.-42     	; 0x626 <__addsf3+0xc>
 650:	ba 17       	cp	r27, r26
 652:	62 07       	cpc	r22, r18
 654:	73 07       	cpc	r23, r19
 656:	84 07       	cpc	r24, r20
 658:	95 07       	cpc	r25, r21
 65a:	20 f0       	brcs	.+8      	; 0x664 <__addsf3x+0x1c>
 65c:	79 f4       	brne	.+30     	; 0x67c <__addsf3x+0x34>
 65e:	a6 f5       	brtc	.+104    	; 0x6c8 <__addsf3x+0x80>
 660:	0c 94 a1 04 	jmp	0x942	; 0x942 <__fp_zero>
 664:	0e f4       	brtc	.+2      	; 0x668 <__addsf3x+0x20>
 666:	e0 95       	com	r30
 668:	0b 2e       	mov	r0, r27
 66a:	ba 2f       	mov	r27, r26
 66c:	a0 2d       	mov	r26, r0
 66e:	0b 01       	movw	r0, r22
 670:	b9 01       	movw	r22, r18
 672:	90 01       	movw	r18, r0
 674:	0c 01       	movw	r0, r24
 676:	ca 01       	movw	r24, r20
 678:	a0 01       	movw	r20, r0
 67a:	11 24       	eor	r1, r1
 67c:	ff 27       	eor	r31, r31
 67e:	59 1b       	sub	r21, r25
 680:	99 f0       	breq	.+38     	; 0x6a8 <__addsf3x+0x60>
 682:	59 3f       	cpi	r21, 0xF9	; 249
 684:	50 f4       	brcc	.+20     	; 0x69a <__addsf3x+0x52>
 686:	50 3e       	cpi	r21, 0xE0	; 224
 688:	68 f1       	brcs	.+90     	; 0x6e4 <__addsf3x+0x9c>
 68a:	1a 16       	cp	r1, r26
 68c:	f0 40       	sbci	r31, 0x00	; 0
 68e:	a2 2f       	mov	r26, r18
 690:	23 2f       	mov	r18, r19
 692:	34 2f       	mov	r19, r20
 694:	44 27       	eor	r20, r20
 696:	58 5f       	subi	r21, 0xF8	; 248
 698:	f3 cf       	rjmp	.-26     	; 0x680 <__addsf3x+0x38>
 69a:	46 95       	lsr	r20
 69c:	37 95       	ror	r19
 69e:	27 95       	ror	r18
 6a0:	a7 95       	ror	r26
 6a2:	f0 40       	sbci	r31, 0x00	; 0
 6a4:	53 95       	inc	r21
 6a6:	c9 f7       	brne	.-14     	; 0x69a <__addsf3x+0x52>
 6a8:	7e f4       	brtc	.+30     	; 0x6c8 <__addsf3x+0x80>
 6aa:	1f 16       	cp	r1, r31
 6ac:	ba 0b       	sbc	r27, r26
 6ae:	62 0b       	sbc	r22, r18
 6b0:	73 0b       	sbc	r23, r19
 6b2:	84 0b       	sbc	r24, r20
 6b4:	ba f0       	brmi	.+46     	; 0x6e4 <__addsf3x+0x9c>
 6b6:	91 50       	subi	r25, 0x01	; 1
 6b8:	a1 f0       	breq	.+40     	; 0x6e2 <__addsf3x+0x9a>
 6ba:	ff 0f       	add	r31, r31
 6bc:	bb 1f       	adc	r27, r27
 6be:	66 1f       	adc	r22, r22
 6c0:	77 1f       	adc	r23, r23
 6c2:	88 1f       	adc	r24, r24
 6c4:	c2 f7       	brpl	.-16     	; 0x6b6 <__addsf3x+0x6e>
 6c6:	0e c0       	rjmp	.+28     	; 0x6e4 <__addsf3x+0x9c>
 6c8:	ba 0f       	add	r27, r26
 6ca:	62 1f       	adc	r22, r18
 6cc:	73 1f       	adc	r23, r19
 6ce:	84 1f       	adc	r24, r20
 6d0:	48 f4       	brcc	.+18     	; 0x6e4 <__addsf3x+0x9c>
 6d2:	87 95       	ror	r24
 6d4:	77 95       	ror	r23
 6d6:	67 95       	ror	r22
 6d8:	b7 95       	ror	r27
 6da:	f7 95       	ror	r31
 6dc:	9e 3f       	cpi	r25, 0xFE	; 254
 6de:	08 f0       	brcs	.+2      	; 0x6e2 <__addsf3x+0x9a>
 6e0:	b0 cf       	rjmp	.-160    	; 0x642 <__addsf3+0x28>
 6e2:	93 95       	inc	r25
 6e4:	88 0f       	add	r24, r24
 6e6:	08 f0       	brcs	.+2      	; 0x6ea <__addsf3x+0xa2>
 6e8:	99 27       	eor	r25, r25
 6ea:	ee 0f       	add	r30, r30
 6ec:	97 95       	ror	r25
 6ee:	87 95       	ror	r24
 6f0:	08 95       	ret

000006f2 <__divsf3>:
 6f2:	0e 94 8d 03 	call	0x71a	; 0x71a <__divsf3x>
 6f6:	0c 94 6e 04 	jmp	0x8dc	; 0x8dc <__fp_round>
 6fa:	0e 94 67 04 	call	0x8ce	; 0x8ce <__fp_pscB>
 6fe:	58 f0       	brcs	.+22     	; 0x716 <__divsf3+0x24>
 700:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__fp_pscA>
 704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0x24>
 706:	29 f4       	brne	.+10     	; 0x712 <__divsf3+0x20>
 708:	5f 3f       	cpi	r21, 0xFF	; 255
 70a:	29 f0       	breq	.+10     	; 0x716 <__divsf3+0x24>
 70c:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <__fp_inf>
 710:	51 11       	cpse	r21, r1
 712:	0c 94 a2 04 	jmp	0x944	; 0x944 <__fp_szero>
 716:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__fp_nan>

0000071a <__divsf3x>:
 71a:	0e 94 7f 04 	call	0x8fe	; 0x8fe <__fp_split3>
 71e:	68 f3       	brcs	.-38     	; 0x6fa <__divsf3+0x8>

00000720 <__divsf3_pse>:
 720:	99 23       	and	r25, r25
 722:	b1 f3       	breq	.-20     	; 0x710 <__divsf3+0x1e>
 724:	55 23       	and	r21, r21
 726:	91 f3       	breq	.-28     	; 0x70c <__divsf3+0x1a>
 728:	95 1b       	sub	r25, r21
 72a:	55 0b       	sbc	r21, r21
 72c:	bb 27       	eor	r27, r27
 72e:	aa 27       	eor	r26, r26
 730:	62 17       	cp	r22, r18
 732:	73 07       	cpc	r23, r19
 734:	84 07       	cpc	r24, r20
 736:	38 f0       	brcs	.+14     	; 0x746 <__divsf3_pse+0x26>
 738:	9f 5f       	subi	r25, 0xFF	; 255
 73a:	5f 4f       	sbci	r21, 0xFF	; 255
 73c:	22 0f       	add	r18, r18
 73e:	33 1f       	adc	r19, r19
 740:	44 1f       	adc	r20, r20
 742:	aa 1f       	adc	r26, r26
 744:	a9 f3       	breq	.-22     	; 0x730 <__divsf3_pse+0x10>
 746:	35 d0       	rcall	.+106    	; 0x7b2 <__divsf3_pse+0x92>
 748:	0e 2e       	mov	r0, r30
 74a:	3a f0       	brmi	.+14     	; 0x75a <__divsf3_pse+0x3a>
 74c:	e0 e8       	ldi	r30, 0x80	; 128
 74e:	32 d0       	rcall	.+100    	; 0x7b4 <__divsf3_pse+0x94>
 750:	91 50       	subi	r25, 0x01	; 1
 752:	50 40       	sbci	r21, 0x00	; 0
 754:	e6 95       	lsr	r30
 756:	00 1c       	adc	r0, r0
 758:	ca f7       	brpl	.-14     	; 0x74c <__divsf3_pse+0x2c>
 75a:	2b d0       	rcall	.+86     	; 0x7b2 <__divsf3_pse+0x92>
 75c:	fe 2f       	mov	r31, r30
 75e:	29 d0       	rcall	.+82     	; 0x7b2 <__divsf3_pse+0x92>
 760:	66 0f       	add	r22, r22
 762:	77 1f       	adc	r23, r23
 764:	88 1f       	adc	r24, r24
 766:	bb 1f       	adc	r27, r27
 768:	26 17       	cp	r18, r22
 76a:	37 07       	cpc	r19, r23
 76c:	48 07       	cpc	r20, r24
 76e:	ab 07       	cpc	r26, r27
 770:	b0 e8       	ldi	r27, 0x80	; 128
 772:	09 f0       	breq	.+2      	; 0x776 <__divsf3_pse+0x56>
 774:	bb 0b       	sbc	r27, r27
 776:	80 2d       	mov	r24, r0
 778:	bf 01       	movw	r22, r30
 77a:	ff 27       	eor	r31, r31
 77c:	93 58       	subi	r25, 0x83	; 131
 77e:	5f 4f       	sbci	r21, 0xFF	; 255
 780:	3a f0       	brmi	.+14     	; 0x790 <__divsf3_pse+0x70>
 782:	9e 3f       	cpi	r25, 0xFE	; 254
 784:	51 05       	cpc	r21, r1
 786:	78 f0       	brcs	.+30     	; 0x7a6 <__divsf3_pse+0x86>
 788:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <__fp_inf>
 78c:	0c 94 a2 04 	jmp	0x944	; 0x944 <__fp_szero>
 790:	5f 3f       	cpi	r21, 0xFF	; 255
 792:	e4 f3       	brlt	.-8      	; 0x78c <__divsf3_pse+0x6c>
 794:	98 3e       	cpi	r25, 0xE8	; 232
 796:	d4 f3       	brlt	.-12     	; 0x78c <__divsf3_pse+0x6c>
 798:	86 95       	lsr	r24
 79a:	77 95       	ror	r23
 79c:	67 95       	ror	r22
 79e:	b7 95       	ror	r27
 7a0:	f7 95       	ror	r31
 7a2:	9f 5f       	subi	r25, 0xFF	; 255
 7a4:	c9 f7       	brne	.-14     	; 0x798 <__divsf3_pse+0x78>
 7a6:	88 0f       	add	r24, r24
 7a8:	91 1d       	adc	r25, r1
 7aa:	96 95       	lsr	r25
 7ac:	87 95       	ror	r24
 7ae:	97 f9       	bld	r25, 7
 7b0:	08 95       	ret
 7b2:	e1 e0       	ldi	r30, 0x01	; 1
 7b4:	66 0f       	add	r22, r22
 7b6:	77 1f       	adc	r23, r23
 7b8:	88 1f       	adc	r24, r24
 7ba:	bb 1f       	adc	r27, r27
 7bc:	62 17       	cp	r22, r18
 7be:	73 07       	cpc	r23, r19
 7c0:	84 07       	cpc	r24, r20
 7c2:	ba 07       	cpc	r27, r26
 7c4:	20 f0       	brcs	.+8      	; 0x7ce <__divsf3_pse+0xae>
 7c6:	62 1b       	sub	r22, r18
 7c8:	73 0b       	sbc	r23, r19
 7ca:	84 0b       	sbc	r24, r20
 7cc:	ba 0b       	sbc	r27, r26
 7ce:	ee 1f       	adc	r30, r30
 7d0:	88 f7       	brcc	.-30     	; 0x7b4 <__divsf3_pse+0x94>
 7d2:	e0 95       	com	r30
 7d4:	08 95       	ret

000007d6 <__fixunssfsi>:
 7d6:	0e 94 87 04 	call	0x90e	; 0x90e <__fp_splitA>
 7da:	88 f0       	brcs	.+34     	; 0x7fe <__fixunssfsi+0x28>
 7dc:	9f 57       	subi	r25, 0x7F	; 127
 7de:	98 f0       	brcs	.+38     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7e0:	b9 2f       	mov	r27, r25
 7e2:	99 27       	eor	r25, r25
 7e4:	b7 51       	subi	r27, 0x17	; 23
 7e6:	b0 f0       	brcs	.+44     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 7e8:	e1 f0       	breq	.+56     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 7ea:	66 0f       	add	r22, r22
 7ec:	77 1f       	adc	r23, r23
 7ee:	88 1f       	adc	r24, r24
 7f0:	99 1f       	adc	r25, r25
 7f2:	1a f0       	brmi	.+6      	; 0x7fa <__fixunssfsi+0x24>
 7f4:	ba 95       	dec	r27
 7f6:	c9 f7       	brne	.-14     	; 0x7ea <__fixunssfsi+0x14>
 7f8:	14 c0       	rjmp	.+40     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 7fa:	b1 30       	cpi	r27, 0x01	; 1
 7fc:	91 f0       	breq	.+36     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 7fe:	0e 94 a1 04 	call	0x942	; 0x942 <__fp_zero>
 802:	b1 e0       	ldi	r27, 0x01	; 1
 804:	08 95       	ret
 806:	0c 94 a1 04 	jmp	0x942	; 0x942 <__fp_zero>
 80a:	67 2f       	mov	r22, r23
 80c:	78 2f       	mov	r23, r24
 80e:	88 27       	eor	r24, r24
 810:	b8 5f       	subi	r27, 0xF8	; 248
 812:	39 f0       	breq	.+14     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 814:	b9 3f       	cpi	r27, 0xF9	; 249
 816:	cc f3       	brlt	.-14     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 818:	86 95       	lsr	r24
 81a:	77 95       	ror	r23
 81c:	67 95       	ror	r22
 81e:	b3 95       	inc	r27
 820:	d9 f7       	brne	.-10     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 822:	3e f4       	brtc	.+14     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 824:	90 95       	com	r25
 826:	80 95       	com	r24
 828:	70 95       	com	r23
 82a:	61 95       	neg	r22
 82c:	7f 4f       	sbci	r23, 0xFF	; 255
 82e:	8f 4f       	sbci	r24, 0xFF	; 255
 830:	9f 4f       	sbci	r25, 0xFF	; 255
 832:	08 95       	ret

00000834 <__floatunsisf>:
 834:	e8 94       	clt
 836:	09 c0       	rjmp	.+18     	; 0x84a <__floatsisf+0x12>

00000838 <__floatsisf>:
 838:	97 fb       	bst	r25, 7
 83a:	3e f4       	brtc	.+14     	; 0x84a <__floatsisf+0x12>
 83c:	90 95       	com	r25
 83e:	80 95       	com	r24
 840:	70 95       	com	r23
 842:	61 95       	neg	r22
 844:	7f 4f       	sbci	r23, 0xFF	; 255
 846:	8f 4f       	sbci	r24, 0xFF	; 255
 848:	9f 4f       	sbci	r25, 0xFF	; 255
 84a:	99 23       	and	r25, r25
 84c:	a9 f0       	breq	.+42     	; 0x878 <__floatsisf+0x40>
 84e:	f9 2f       	mov	r31, r25
 850:	96 e9       	ldi	r25, 0x96	; 150
 852:	bb 27       	eor	r27, r27
 854:	93 95       	inc	r25
 856:	f6 95       	lsr	r31
 858:	87 95       	ror	r24
 85a:	77 95       	ror	r23
 85c:	67 95       	ror	r22
 85e:	b7 95       	ror	r27
 860:	f1 11       	cpse	r31, r1
 862:	f8 cf       	rjmp	.-16     	; 0x854 <__floatsisf+0x1c>
 864:	fa f4       	brpl	.+62     	; 0x8a4 <__floatsisf+0x6c>
 866:	bb 0f       	add	r27, r27
 868:	11 f4       	brne	.+4      	; 0x86e <__floatsisf+0x36>
 86a:	60 ff       	sbrs	r22, 0
 86c:	1b c0       	rjmp	.+54     	; 0x8a4 <__floatsisf+0x6c>
 86e:	6f 5f       	subi	r22, 0xFF	; 255
 870:	7f 4f       	sbci	r23, 0xFF	; 255
 872:	8f 4f       	sbci	r24, 0xFF	; 255
 874:	9f 4f       	sbci	r25, 0xFF	; 255
 876:	16 c0       	rjmp	.+44     	; 0x8a4 <__floatsisf+0x6c>
 878:	88 23       	and	r24, r24
 87a:	11 f0       	breq	.+4      	; 0x880 <__floatsisf+0x48>
 87c:	96 e9       	ldi	r25, 0x96	; 150
 87e:	11 c0       	rjmp	.+34     	; 0x8a2 <__floatsisf+0x6a>
 880:	77 23       	and	r23, r23
 882:	21 f0       	breq	.+8      	; 0x88c <__floatsisf+0x54>
 884:	9e e8       	ldi	r25, 0x8E	; 142
 886:	87 2f       	mov	r24, r23
 888:	76 2f       	mov	r23, r22
 88a:	05 c0       	rjmp	.+10     	; 0x896 <__floatsisf+0x5e>
 88c:	66 23       	and	r22, r22
 88e:	71 f0       	breq	.+28     	; 0x8ac <__floatsisf+0x74>
 890:	96 e8       	ldi	r25, 0x86	; 134
 892:	86 2f       	mov	r24, r22
 894:	70 e0       	ldi	r23, 0x00	; 0
 896:	60 e0       	ldi	r22, 0x00	; 0
 898:	2a f0       	brmi	.+10     	; 0x8a4 <__floatsisf+0x6c>
 89a:	9a 95       	dec	r25
 89c:	66 0f       	add	r22, r22
 89e:	77 1f       	adc	r23, r23
 8a0:	88 1f       	adc	r24, r24
 8a2:	da f7       	brpl	.-10     	; 0x89a <__floatsisf+0x62>
 8a4:	88 0f       	add	r24, r24
 8a6:	96 95       	lsr	r25
 8a8:	87 95       	ror	r24
 8aa:	97 f9       	bld	r25, 7
 8ac:	08 95       	ret

000008ae <__fp_inf>:
 8ae:	97 f9       	bld	r25, 7
 8b0:	9f 67       	ori	r25, 0x7F	; 127
 8b2:	80 e8       	ldi	r24, 0x80	; 128
 8b4:	70 e0       	ldi	r23, 0x00	; 0
 8b6:	60 e0       	ldi	r22, 0x00	; 0
 8b8:	08 95       	ret

000008ba <__fp_nan>:
 8ba:	9f ef       	ldi	r25, 0xFF	; 255
 8bc:	80 ec       	ldi	r24, 0xC0	; 192
 8be:	08 95       	ret

000008c0 <__fp_pscA>:
 8c0:	00 24       	eor	r0, r0
 8c2:	0a 94       	dec	r0
 8c4:	16 16       	cp	r1, r22
 8c6:	17 06       	cpc	r1, r23
 8c8:	18 06       	cpc	r1, r24
 8ca:	09 06       	cpc	r0, r25
 8cc:	08 95       	ret

000008ce <__fp_pscB>:
 8ce:	00 24       	eor	r0, r0
 8d0:	0a 94       	dec	r0
 8d2:	12 16       	cp	r1, r18
 8d4:	13 06       	cpc	r1, r19
 8d6:	14 06       	cpc	r1, r20
 8d8:	05 06       	cpc	r0, r21
 8da:	08 95       	ret

000008dc <__fp_round>:
 8dc:	09 2e       	mov	r0, r25
 8de:	03 94       	inc	r0
 8e0:	00 0c       	add	r0, r0
 8e2:	11 f4       	brne	.+4      	; 0x8e8 <__fp_round+0xc>
 8e4:	88 23       	and	r24, r24
 8e6:	52 f0       	brmi	.+20     	; 0x8fc <__fp_round+0x20>
 8e8:	bb 0f       	add	r27, r27
 8ea:	40 f4       	brcc	.+16     	; 0x8fc <__fp_round+0x20>
 8ec:	bf 2b       	or	r27, r31
 8ee:	11 f4       	brne	.+4      	; 0x8f4 <__fp_round+0x18>
 8f0:	60 ff       	sbrs	r22, 0
 8f2:	04 c0       	rjmp	.+8      	; 0x8fc <__fp_round+0x20>
 8f4:	6f 5f       	subi	r22, 0xFF	; 255
 8f6:	7f 4f       	sbci	r23, 0xFF	; 255
 8f8:	8f 4f       	sbci	r24, 0xFF	; 255
 8fa:	9f 4f       	sbci	r25, 0xFF	; 255
 8fc:	08 95       	ret

000008fe <__fp_split3>:
 8fe:	57 fd       	sbrc	r21, 7
 900:	90 58       	subi	r25, 0x80	; 128
 902:	44 0f       	add	r20, r20
 904:	55 1f       	adc	r21, r21
 906:	59 f0       	breq	.+22     	; 0x91e <__fp_splitA+0x10>
 908:	5f 3f       	cpi	r21, 0xFF	; 255
 90a:	71 f0       	breq	.+28     	; 0x928 <__fp_splitA+0x1a>
 90c:	47 95       	ror	r20

0000090e <__fp_splitA>:
 90e:	88 0f       	add	r24, r24
 910:	97 fb       	bst	r25, 7
 912:	99 1f       	adc	r25, r25
 914:	61 f0       	breq	.+24     	; 0x92e <__fp_splitA+0x20>
 916:	9f 3f       	cpi	r25, 0xFF	; 255
 918:	79 f0       	breq	.+30     	; 0x938 <__fp_splitA+0x2a>
 91a:	87 95       	ror	r24
 91c:	08 95       	ret
 91e:	12 16       	cp	r1, r18
 920:	13 06       	cpc	r1, r19
 922:	14 06       	cpc	r1, r20
 924:	55 1f       	adc	r21, r21
 926:	f2 cf       	rjmp	.-28     	; 0x90c <__stack+0xd>
 928:	46 95       	lsr	r20
 92a:	f1 df       	rcall	.-30     	; 0x90e <__fp_splitA>
 92c:	08 c0       	rjmp	.+16     	; 0x93e <__fp_splitA+0x30>
 92e:	16 16       	cp	r1, r22
 930:	17 06       	cpc	r1, r23
 932:	18 06       	cpc	r1, r24
 934:	99 1f       	adc	r25, r25
 936:	f1 cf       	rjmp	.-30     	; 0x91a <__fp_splitA+0xc>
 938:	86 95       	lsr	r24
 93a:	71 05       	cpc	r23, r1
 93c:	61 05       	cpc	r22, r1
 93e:	08 94       	sec
 940:	08 95       	ret

00000942 <__fp_zero>:
 942:	e8 94       	clt

00000944 <__fp_szero>:
 944:	bb 27       	eor	r27, r27
 946:	66 27       	eor	r22, r22
 948:	77 27       	eor	r23, r23
 94a:	cb 01       	movw	r24, r22
 94c:	97 f9       	bld	r25, 7
 94e:	08 95       	ret

00000950 <__mulsf3>:
 950:	0e 94 bb 04 	call	0x976	; 0x976 <__mulsf3x>
 954:	0c 94 6e 04 	jmp	0x8dc	; 0x8dc <__fp_round>
 958:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__fp_pscA>
 95c:	38 f0       	brcs	.+14     	; 0x96c <__mulsf3+0x1c>
 95e:	0e 94 67 04 	call	0x8ce	; 0x8ce <__fp_pscB>
 962:	20 f0       	brcs	.+8      	; 0x96c <__mulsf3+0x1c>
 964:	95 23       	and	r25, r21
 966:	11 f0       	breq	.+4      	; 0x96c <__mulsf3+0x1c>
 968:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <__fp_inf>
 96c:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__fp_nan>
 970:	11 24       	eor	r1, r1
 972:	0c 94 a2 04 	jmp	0x944	; 0x944 <__fp_szero>

00000976 <__mulsf3x>:
 976:	0e 94 7f 04 	call	0x8fe	; 0x8fe <__fp_split3>
 97a:	70 f3       	brcs	.-36     	; 0x958 <__mulsf3+0x8>

0000097c <__mulsf3_pse>:
 97c:	95 9f       	mul	r25, r21
 97e:	c1 f3       	breq	.-16     	; 0x970 <__mulsf3+0x20>
 980:	95 0f       	add	r25, r21
 982:	50 e0       	ldi	r21, 0x00	; 0
 984:	55 1f       	adc	r21, r21
 986:	62 9f       	mul	r22, r18
 988:	f0 01       	movw	r30, r0
 98a:	72 9f       	mul	r23, r18
 98c:	bb 27       	eor	r27, r27
 98e:	f0 0d       	add	r31, r0
 990:	b1 1d       	adc	r27, r1
 992:	63 9f       	mul	r22, r19
 994:	aa 27       	eor	r26, r26
 996:	f0 0d       	add	r31, r0
 998:	b1 1d       	adc	r27, r1
 99a:	aa 1f       	adc	r26, r26
 99c:	64 9f       	mul	r22, r20
 99e:	66 27       	eor	r22, r22
 9a0:	b0 0d       	add	r27, r0
 9a2:	a1 1d       	adc	r26, r1
 9a4:	66 1f       	adc	r22, r22
 9a6:	82 9f       	mul	r24, r18
 9a8:	22 27       	eor	r18, r18
 9aa:	b0 0d       	add	r27, r0
 9ac:	a1 1d       	adc	r26, r1
 9ae:	62 1f       	adc	r22, r18
 9b0:	73 9f       	mul	r23, r19
 9b2:	b0 0d       	add	r27, r0
 9b4:	a1 1d       	adc	r26, r1
 9b6:	62 1f       	adc	r22, r18
 9b8:	83 9f       	mul	r24, r19
 9ba:	a0 0d       	add	r26, r0
 9bc:	61 1d       	adc	r22, r1
 9be:	22 1f       	adc	r18, r18
 9c0:	74 9f       	mul	r23, r20
 9c2:	33 27       	eor	r19, r19
 9c4:	a0 0d       	add	r26, r0
 9c6:	61 1d       	adc	r22, r1
 9c8:	23 1f       	adc	r18, r19
 9ca:	84 9f       	mul	r24, r20
 9cc:	60 0d       	add	r22, r0
 9ce:	21 1d       	adc	r18, r1
 9d0:	82 2f       	mov	r24, r18
 9d2:	76 2f       	mov	r23, r22
 9d4:	6a 2f       	mov	r22, r26
 9d6:	11 24       	eor	r1, r1
 9d8:	9f 57       	subi	r25, 0x7F	; 127
 9da:	50 40       	sbci	r21, 0x00	; 0
 9dc:	9a f0       	brmi	.+38     	; 0xa04 <__mulsf3_pse+0x88>
 9de:	f1 f0       	breq	.+60     	; 0xa1c <__mulsf3_pse+0xa0>
 9e0:	88 23       	and	r24, r24
 9e2:	4a f0       	brmi	.+18     	; 0x9f6 <__mulsf3_pse+0x7a>
 9e4:	ee 0f       	add	r30, r30
 9e6:	ff 1f       	adc	r31, r31
 9e8:	bb 1f       	adc	r27, r27
 9ea:	66 1f       	adc	r22, r22
 9ec:	77 1f       	adc	r23, r23
 9ee:	88 1f       	adc	r24, r24
 9f0:	91 50       	subi	r25, 0x01	; 1
 9f2:	50 40       	sbci	r21, 0x00	; 0
 9f4:	a9 f7       	brne	.-22     	; 0x9e0 <__mulsf3_pse+0x64>
 9f6:	9e 3f       	cpi	r25, 0xFE	; 254
 9f8:	51 05       	cpc	r21, r1
 9fa:	80 f0       	brcs	.+32     	; 0xa1c <__mulsf3_pse+0xa0>
 9fc:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <__fp_inf>
 a00:	0c 94 a2 04 	jmp	0x944	; 0x944 <__fp_szero>
 a04:	5f 3f       	cpi	r21, 0xFF	; 255
 a06:	e4 f3       	brlt	.-8      	; 0xa00 <__mulsf3_pse+0x84>
 a08:	98 3e       	cpi	r25, 0xE8	; 232
 a0a:	d4 f3       	brlt	.-12     	; 0xa00 <__mulsf3_pse+0x84>
 a0c:	86 95       	lsr	r24
 a0e:	77 95       	ror	r23
 a10:	67 95       	ror	r22
 a12:	b7 95       	ror	r27
 a14:	f7 95       	ror	r31
 a16:	e7 95       	ror	r30
 a18:	9f 5f       	subi	r25, 0xFF	; 255
 a1a:	c1 f7       	brne	.-16     	; 0xa0c <__mulsf3_pse+0x90>
 a1c:	fe 2b       	or	r31, r30
 a1e:	88 0f       	add	r24, r24
 a20:	91 1d       	adc	r25, r1
 a22:	96 95       	lsr	r25
 a24:	87 95       	ror	r24
 a26:	97 f9       	bld	r25, 7
 a28:	08 95       	ret

00000a2a <_exit>:
 a2a:	f8 94       	cli

00000a2c <__stop_program>:
 a2c:	ff cf       	rjmp	.-2      	; 0xa2c <__stop_program>
