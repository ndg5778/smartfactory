
robot_arm_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000190  00000204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000190  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a52  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007cc  00000000  00000000  00000d3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000518  00000000  00000000  00001506  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  00001a20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000415  00000000  00000000  00001b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000446  00000000  00000000  00001f55  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000239b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e9       	ldi	r30, 0x90	; 144
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 c6 00 	jmp	0x18c	; 0x18c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

#define LED_PIN1 PB0
#define LED_PIN2 PB1

int main(int argc, char *argv[])
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	64 97       	sbiw	r28, 0x14	; 20
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
	int index = 0;
	char buffer[20] = "";
  ba:	1a 82       	std	Y+2, r1	; 0x02
  bc:	19 82       	std	Y+1, r1	; 0x01
  be:	fe 01       	movw	r30, r28
  c0:	33 96       	adiw	r30, 0x03	; 3
  c2:	82 e1       	ldi	r24, 0x12	; 18
  c4:	df 01       	movw	r26, r30
  c6:	1d 92       	st	X+, r1
  c8:	8a 95       	dec	r24
  ca:	e9 f7       	brne	.-6      	; 0xc6 <main+0x20>
	
	unsigned char data;
	UART_INIT(); // UART 통신 초기화
  cc:	0e 94 97 00 	call	0x12e	; 0x12e <UART_INIT>
	
	DDRB |= (1 << LED_PIN1) | (1 << LED_PIN2); // set PB0, PB1 as output
  d0:	84 b1       	in	r24, 0x04	; 4
  d2:	83 60       	ori	r24, 0x03	; 3
  d4:	84 b9       	out	0x04, r24	; 4
	
	while (1) {
		PORTB |= (1 << LED_PIN1);		// 신호 확인용. PB0 high
  d6:	85 b1       	in	r24, 0x05	; 5
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	85 b9       	out	0x05, r24	; 5
		data = UART_receive(); // 데이터 수신
  dc:	0e 94 af 00 	call	0x15e	; 0x15e <UART_receive>
  e0:	18 2f       	mov	r17, r24
		buffer[index] = data;
  e2:	89 83       	std	Y+1, r24	; 0x01
		
		if(strcmp(buffer, "h") == 0) {
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	71 e0       	ldi	r23, 0x01	; 1
  e8:	ce 01       	movw	r24, r28
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	0e 94 bd 00 	call	0x17a	; 0x17a <strcmp>
  f0:	89 2b       	or	r24, r25
  f2:	39 f4       	brne	.+14     	; 0x102 <main+0x5c>
			PORTB |= (1 << LED_PIN2);	// PB1 high
  f4:	85 b1       	in	r24, 0x05	; 5
  f6:	82 60       	ori	r24, 0x02	; 2
  f8:	85 b9       	out	0x05, r24	; 5
			UART_transmit(data);	// 수신된 문자를 에코 백
  fa:	81 2f       	mov	r24, r17
  fc:	0e 94 b6 00 	call	0x16c	; 0x16c <UART_transmit>
 100:	12 c0       	rjmp	.+36     	; 0x126 <main+0x80>
			index = 0;
		}
		
		else if(strcmp(buffer, "l") == 0) {
 102:	62 e0       	ldi	r22, 0x02	; 2
 104:	71 e0       	ldi	r23, 0x01	; 1
 106:	ce 01       	movw	r24, r28
 108:	01 96       	adiw	r24, 0x01	; 1
 10a:	0e 94 bd 00 	call	0x17a	; 0x17a <strcmp>
 10e:	89 2b       	or	r24, r25
 110:	39 f4       	brne	.+14     	; 0x120 <main+0x7a>
			PORTB &= ~(1 << LED_PIN2);;	// PB2 low
 112:	85 b1       	in	r24, 0x05	; 5
 114:	8d 7f       	andi	r24, 0xFD	; 253
 116:	85 b9       	out	0x05, r24	; 5
			UART_transmit(data);
 118:	81 2f       	mov	r24, r17
 11a:	0e 94 b6 00 	call	0x16c	; 0x16c <UART_transmit>
 11e:	03 c0       	rjmp	.+6      	; 0x126 <main+0x80>
			index = 0;
		}
		
		else {
			UART_transmit(data);
 120:	81 2f       	mov	r24, r17
 122:	0e 94 b6 00 	call	0x16c	; 0x16c <UART_transmit>
			index = 0;
		}
		PORTB &= ~0x01;
 126:	85 b1       	in	r24, 0x05	; 5
 128:	8e 7f       	andi	r24, 0xFE	; 254
 12a:	85 b9       	out	0x05, r24	; 5
	}
 12c:	d4 cf       	rjmp	.-88     	; 0xd6 <main+0x30>

0000012e <UART_INIT>:
﻿#include "UART.h"

void UART_INIT(void) {
	UCSR0A |= _BV(U2X0);		// 2배속 모드
 12e:	e0 ec       	ldi	r30, 0xC0	; 192
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	82 60       	ori	r24, 0x02	; 2
 136:	80 83       	st	Z, r24

	UBRR0H = 0x00;				// 통신 속도(보율) 설정
 138:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = 207;
 13c:	8f ec       	ldi	r24, 0xCF	; 207
 13e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// 비동기, 8비트 데이터, 패리티 없음, 1비트 정지 비트 모드
	UCSR0C |= 0x06;
 142:	e2 ec       	ldi	r30, 0xC2	; 194
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	86 60       	ori	r24, 0x06	; 6
 14a:	80 83       	st	Z, r24
	
	// 송수신 가능
	UCSR0B |= _BV(RXEN0);
 14c:	e1 ec       	ldi	r30, 0xC1	; 193
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	80 61       	ori	r24, 0x10	; 16
 154:	80 83       	st	Z, r24
	UCSR0B |= _BV(TXEN0);
 156:	80 81       	ld	r24, Z
 158:	88 60       	ori	r24, 0x08	; 8
 15a:	80 83       	st	Z, r24
 15c:	08 95       	ret

0000015e <UART_receive>:
}

unsigned char UART_receive(void)		// 1바이트 수신
{
	while( !(UCSR0A & (1<<RXC0)) );		// 데이터 수신 대기
 15e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 162:	88 23       	and	r24, r24
 164:	e4 f7       	brge	.-8      	; 0x15e <UART_receive>
	return UDR0;
 166:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 16a:	08 95       	ret

0000016c <UART_transmit>:

void UART_transmit(unsigned char data)
{
	while( !(UCSR0A & (1<<UDRE0)) );	// 송신 가능 대기
 16c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 170:	95 ff       	sbrs	r25, 5
 172:	fc cf       	rjmp	.-8      	; 0x16c <UART_transmit>
	UDR0 = data;						// 데이터 전송
 174:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 178:	08 95       	ret

0000017a <strcmp>:
 17a:	fb 01       	movw	r30, r22
 17c:	dc 01       	movw	r26, r24
 17e:	8d 91       	ld	r24, X+
 180:	01 90       	ld	r0, Z+
 182:	80 19       	sub	r24, r0
 184:	01 10       	cpse	r0, r1
 186:	d9 f3       	breq	.-10     	; 0x17e <strcmp+0x4>
 188:	99 0b       	sbc	r25, r25
 18a:	08 95       	ret

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
