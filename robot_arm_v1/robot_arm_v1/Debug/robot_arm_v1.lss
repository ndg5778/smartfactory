
robot_arm_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002d0  00800100  00000dd6  00000e6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dd6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000031  008003d0  008003d0  0000113a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000113a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000116c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  000011ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d1c  00000000  00000000  000012e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b8d  00000000  00000000  00003000  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f1d  00000000  00000000  00003b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000032c  00000000  00000000  00004aac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c4  00000000  00000000  00004dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001052  00000000  00000000  0000549c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  000064ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	13 e0       	ldi	r17, 0x03	; 3
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ed       	ldi	r30, 0xD6	; 214
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 3d       	cpi	r26, 0xD0	; 208
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	24 e0       	ldi	r18, 0x04	; 4
  8c:	a0 ed       	ldi	r26, 0xD0	; 208
  8e:	b3 e0       	ldi	r27, 0x03	; 3
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 30       	cpi	r26, 0x01	; 1
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <main>
  9e:	0c 94 e9 06 	jmp	0xdd2	; 0xdd2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_init>:
    } else {
        status = TRANSMISSION_ERROR;
    }

    return status;
}
  a6:	e9 eb       	ldi	r30, 0xB9	; 185
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8c 7f       	andi	r24, 0xFC	; 252
  ae:	80 83       	st	Z, r24
  b0:	88 e4       	ldi	r24, 0x48	; 72
  b2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  b6:	08 95       	ret

000000b8 <i2c_tx_start>:
  b8:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <__data_end>
  bc:	ec eb       	ldi	r30, 0xBC	; 188
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	84 6a       	ori	r24, 0xA4	; 164
  c4:	80 83       	st	Z, r24
  c6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ca:	88 23       	and	r24, r24
  cc:	e4 f7       	brge	.-8      	; 0xc6 <i2c_tx_start+0xe>
  ce:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  d2:	88 7f       	andi	r24, 0xF8	; 248
  d4:	88 30       	cpi	r24, 0x08	; 8
  d6:	11 f0       	breq	.+4      	; 0xdc <i2c_tx_start+0x24>
  d8:	80 31       	cpi	r24, 0x10	; 16
  da:	11 f4       	brne	.+4      	; 0xe0 <i2c_tx_start+0x28>
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	08 95       	ret
  e0:	8e ef       	ldi	r24, 0xFE	; 254
  e2:	08 95       	ret

000000e4 <i2c_tx_address>:
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	90 91 d0 03 	lds	r25, 0x03D0	; 0x8003d0 <__data_end>
  ee:	89 2b       	or	r24, r25
  f0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  f4:	ec eb       	ldi	r30, 0xBC	; 188
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	8f 7d       	andi	r24, 0xDF	; 223
  fc:	80 83       	st	Z, r24
  fe:	80 81       	ld	r24, Z
 100:	80 68       	ori	r24, 0x80	; 128
 102:	80 83       	st	Z, r24
 104:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 108:	88 23       	and	r24, r24
 10a:	e4 f7       	brge	.-8      	; 0x104 <i2c_tx_address+0x20>
 10c:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <__data_end>
 110:	81 11       	cpse	r24, r1
 112:	07 c0       	rjmp	.+14     	; 0x122 <i2c_tx_address+0x3e>
 114:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 118:	88 7f       	andi	r24, 0xF8	; 248
 11a:	88 31       	cpi	r24, 0x18	; 24
 11c:	59 f4       	brne	.+22     	; 0x134 <i2c_tx_address+0x50>
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	08 95       	ret
 122:	81 30       	cpi	r24, 0x01	; 1
 124:	49 f4       	brne	.+18     	; 0x138 <i2c_tx_address+0x54>
 126:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 12a:	88 7f       	andi	r24, 0xF8	; 248
 12c:	80 34       	cpi	r24, 0x40	; 64
 12e:	31 f4       	brne	.+12     	; 0x13c <i2c_tx_address+0x58>
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	08 95       	ret
 134:	8e ef       	ldi	r24, 0xFE	; 254
 136:	08 95       	ret
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	08 95       	ret
 13c:	8e ef       	ldi	r24, 0xFE	; 254
 13e:	08 95       	ret

00000140 <i2c_tx_byte>:
 140:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 144:	ec eb       	ldi	r30, 0xBC	; 188
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	80 68       	ori	r24, 0x80	; 128
 14c:	80 83       	st	Z, r24
 14e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 152:	88 23       	and	r24, r24
 154:	e4 f7       	brge	.-8      	; 0x14e <i2c_tx_byte+0xe>
 156:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 15a:	88 7f       	andi	r24, 0xF8	; 248
 15c:	88 32       	cpi	r24, 0x28	; 40
 15e:	11 f4       	brne	.+4      	; 0x164 <i2c_tx_byte+0x24>
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	08 95       	ret
 164:	8e ef       	ldi	r24, 0xFE	; 254
 166:	08 95       	ret

00000168 <i2c_tx_stop>:

void i2c_tx_stop(void)
{
    /* clear interrupt flag, issue stop command (cleared automatically) */
    TWCR |= (1 << TWINT) | (1 << TWSTO);
 168:	ec eb       	ldi	r30, 0xBC	; 188
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	80 69       	ori	r24, 0x90	; 144
 170:	80 83       	st	Z, r24

    while (!(TWCR & (1 << TWSTO))); // wait until stop transmitted
 172:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 176:	84 ff       	sbrs	r24, 4
 178:	fc cf       	rjmp	.-8      	; 0x172 <i2c_tx_stop+0xa>
 17a:	08 95       	ret

0000017c <uart_RasToAt>:

	return 0;
}

void uart_RasToAt() {
	data = UART_receive();	// 데이터 수신
 17c:	0e 94 ac 04 	call	0x958	; 0x958 <UART_receive>
 180:	80 93 e9 03 	sts	0x03E9, r24	; 0x8003e9 <data>
	if (data != ""){
 184:	28 2f       	mov	r18, r24
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	29 58       	subi	r18, 0x89	; 137
 18a:	33 40       	sbci	r19, 0x03	; 3
 18c:	11 f1       	breq	.+68     	; 0x1d2 <uart_RasToAt+0x56>
		if(data == TERMINATOR) {	// 종료 문자를 수신한 경우
 18e:	84 32       	cpi	r24, 0x24	; 36
 190:	91 f4       	brne	.+36     	; 0x1b6 <uart_RasToAt+0x3a>
			buffer[uart_index] = '\0';
 192:	e0 91 e7 03 	lds	r30, 0x03E7	; 0x8003e7 <uart_index>
 196:	f0 91 e8 03 	lds	r31, 0x03E8	; 0x8003e8 <uart_index+0x1>
 19a:	ef 52       	subi	r30, 0x2F	; 47
 19c:	fc 4f       	sbci	r31, 0xFC	; 252
 19e:	10 82       	st	Z, r1
			process_data = 1;		// 수신 문자열 처리 지시
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	90 93 e6 03 	sts	0x03E6, r25	; 0x8003e6 <process_data+0x1>
 1a8:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <process_data>
			uart_index = 0;
 1ac:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <uart_index+0x1>
 1b0:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <uart_index>
 1b4:	08 95       	ret
		}
		else {
			buffer[uart_index] = data;	// 수신 버퍼에 저장
 1b6:	20 91 e7 03 	lds	r18, 0x03E7	; 0x8003e7 <uart_index>
 1ba:	30 91 e8 03 	lds	r19, 0x03E8	; 0x8003e8 <uart_index+0x1>
 1be:	f9 01       	movw	r30, r18
 1c0:	ef 52       	subi	r30, 0x2F	; 47
 1c2:	fc 4f       	sbci	r31, 0xFC	; 252
 1c4:	80 83       	st	Z, r24
			uart_index++;
 1c6:	2f 5f       	subi	r18, 0xFF	; 255
 1c8:	3f 4f       	sbci	r19, 0xFF	; 255
 1ca:	30 93 e8 03 	sts	0x03E8, r19	; 0x8003e8 <uart_index+0x1>
 1ce:	20 93 e7 03 	sts	0x03E7, r18	; 0x8003e7 <uart_index>
 1d2:	08 95       	ret

000001d4 <INIT_SERVO>:
		}
	}
}

void INIT_SERVO(){
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29

	pca9685_init(0x00, 50); // start PCA9685 device 0x00 at 50 Hz output
 1d8:	62 e3       	ldi	r22, 0x32	; 50
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	0e 94 d6 03 	call	0x7ac	; 0x7ac <pca9685_init>
	int i;

	for (i = 1; i <= 4; i++){
 1e2:	c1 e0       	ldi	r28, 0x01	; 1
 1e4:	d0 e0       	ldi	r29, 0x00	; 0
 1e6:	10 c0       	rjmp	.+32     	; 0x208 <INIT_SERVO+0x34>
		pca9685_pwm(SERVO_A(i), ANGLE(90));
 1e8:	6c ed       	ldi	r22, 0xDC	; 220
 1ea:	75 e0       	ldi	r23, 0x05	; 5
 1ec:	8c 2f       	mov	r24, r28
 1ee:	81 50       	subi	r24, 0x01	; 1
 1f0:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <pca9685_pwm>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f4:	2f ef       	ldi	r18, 0xFF	; 255
 1f6:	89 ef       	ldi	r24, 0xF9	; 249
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	21 50       	subi	r18, 0x01	; 1
 1fc:	80 40       	sbci	r24, 0x00	; 0
 1fe:	90 40       	sbci	r25, 0x00	; 0
 200:	e1 f7       	brne	.-8      	; 0x1fa <INIT_SERVO+0x26>
 202:	00 c0       	rjmp	.+0      	; 0x204 <INIT_SERVO+0x30>
 204:	00 00       	nop
void INIT_SERVO(){

	pca9685_init(0x00, 50); // start PCA9685 device 0x00 at 50 Hz output
	int i;

	for (i = 1; i <= 4; i++){
 206:	21 96       	adiw	r28, 0x01	; 1
 208:	c5 30       	cpi	r28, 0x05	; 5
 20a:	d1 05       	cpc	r29, r1
 20c:	6c f3       	brlt	.-38     	; 0x1e8 <INIT_SERVO+0x14>
		pca9685_pwm(SERVO_A(i), ANGLE(90));
		_delay_ms(20);
	}

	pca9685_pwm(SERVO_A(5), ANGLE(45));
 20e:	6a e1       	ldi	r22, 0x1A	; 26
 210:	74 e0       	ldi	r23, 0x04	; 4
 212:	84 e0       	ldi	r24, 0x04	; 4
 214:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <pca9685_pwm>
 218:	2f ef       	ldi	r18, 0xFF	; 255
 21a:	83 ec       	ldi	r24, 0xC3	; 195
 21c:	99 e0       	ldi	r25, 0x09	; 9
 21e:	21 50       	subi	r18, 0x01	; 1
 220:	80 40       	sbci	r24, 0x00	; 0
 222:	90 40       	sbci	r25, 0x00	; 0
 224:	e1 f7       	brne	.-8      	; 0x21e <INIT_SERVO+0x4a>
 226:	00 c0       	rjmp	.+0      	; 0x228 <INIT_SERVO+0x54>
 228:	00 00       	nop
	_delay_ms(200);
}
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <WhichCanMove>:



int WhichCanMove() {
 230:	0f 93       	push	r16
 232:	1f 93       	push	r17
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
	
	int pass = 0;
 238:	00 e0       	ldi	r16, 0x00	; 0
 23a:	10 e0       	ldi	r17, 0x00	; 0
	//char temp[20];
	
	while (pass == 0){
 23c:	d8 c0       	rjmp	.+432    	; 0x3ee <WhichCanMove+0x1be>
		//// 로봇팔 움직일 수 있는지 확인
		//UART_printString("====Fisrt Robot Arm====");
		//UART_printString("\n");
		
		uart_RasToAt();
 23e:	0e 94 be 00 	call	0x17c	; 0x17c <uart_RasToAt>
		
		if(process_data == 1){
 242:	c0 91 e5 03 	lds	r28, 0x03E5	; 0x8003e5 <process_data>
 246:	d0 91 e6 03 	lds	r29, 0x03E6	; 0x8003e6 <process_data+0x1>
 24a:	c1 30       	cpi	r28, 0x01	; 1
 24c:	d1 05       	cpc	r29, r1
 24e:	09 f0       	breq	.+2      	; 0x252 <WhichCanMove+0x22>
 250:	ce c0       	rjmp	.+412    	; 0x3ee <WhichCanMove+0x1be>
			strcpy(buffer_data, buffer);
 252:	61 ed       	ldi	r22, 0xD1	; 209
 254:	73 e0       	ldi	r23, 0x03	; 3
 256:	8a ee       	ldi	r24, 0xEA	; 234
 258:	93 e0       	ldi	r25, 0x03	; 3
 25a:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <strcpy>
			
			// 0 ~ 8의 값이 들어오면
			if ((strcmp(buffer_data, "0") == 0) || (strcmp(buffer_data, "1") == 0) || (strcmp(buffer_data, "2") == 0) || (strcmp(buffer_data, "3") == 0) || (strcmp(buffer_data, "4") == 0) || (strcmp(buffer_data, "5") == 0) || (strcmp(buffer_data, "6") == 0) || (strcmp(buffer_data, "7") == 0) || (strcmp(buffer_data, "8") == 0)){
 25e:	6c e1       	ldi	r22, 0x1C	; 28
 260:	73 e0       	ldi	r23, 0x03	; 3
 262:	8a ee       	ldi	r24, 0xEA	; 234
 264:	93 e0       	ldi	r25, 0x03	; 3
 266:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <strcmp>
 26a:	89 2b       	or	r24, r25
 26c:	09 f4       	brne	.+2      	; 0x270 <WhichCanMove+0x40>
 26e:	41 c0       	rjmp	.+130    	; 0x2f2 <WhichCanMove+0xc2>
 270:	6e e1       	ldi	r22, 0x1E	; 30
 272:	73 e0       	ldi	r23, 0x03	; 3
 274:	8a ee       	ldi	r24, 0xEA	; 234
 276:	93 e0       	ldi	r25, 0x03	; 3
 278:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <strcmp>
 27c:	89 2b       	or	r24, r25
 27e:	c9 f1       	breq	.+114    	; 0x2f2 <WhichCanMove+0xc2>
 280:	60 e2       	ldi	r22, 0x20	; 32
 282:	73 e0       	ldi	r23, 0x03	; 3
 284:	8a ee       	ldi	r24, 0xEA	; 234
 286:	93 e0       	ldi	r25, 0x03	; 3
 288:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <strcmp>
 28c:	89 2b       	or	r24, r25
 28e:	89 f1       	breq	.+98     	; 0x2f2 <WhichCanMove+0xc2>
 290:	62 e2       	ldi	r22, 0x22	; 34
 292:	73 e0       	ldi	r23, 0x03	; 3
 294:	8a ee       	ldi	r24, 0xEA	; 234
 296:	93 e0       	ldi	r25, 0x03	; 3
 298:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <strcmp>
 29c:	89 2b       	or	r24, r25
 29e:	49 f1       	breq	.+82     	; 0x2f2 <WhichCanMove+0xc2>
 2a0:	64 e2       	ldi	r22, 0x24	; 36
 2a2:	73 e0       	ldi	r23, 0x03	; 3
 2a4:	8a ee       	ldi	r24, 0xEA	; 234
 2a6:	93 e0       	ldi	r25, 0x03	; 3
 2a8:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <strcmp>
 2ac:	89 2b       	or	r24, r25
 2ae:	09 f1       	breq	.+66     	; 0x2f2 <WhichCanMove+0xc2>
 2b0:	66 e2       	ldi	r22, 0x26	; 38
 2b2:	73 e0       	ldi	r23, 0x03	; 3
 2b4:	8a ee       	ldi	r24, 0xEA	; 234
 2b6:	93 e0       	ldi	r25, 0x03	; 3
 2b8:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <strcmp>
 2bc:	89 2b       	or	r24, r25
 2be:	c9 f0       	breq	.+50     	; 0x2f2 <WhichCanMove+0xc2>
 2c0:	68 e2       	ldi	r22, 0x28	; 40
 2c2:	73 e0       	ldi	r23, 0x03	; 3
 2c4:	8a ee       	ldi	r24, 0xEA	; 234
 2c6:	93 e0       	ldi	r25, 0x03	; 3
 2c8:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <strcmp>
 2cc:	89 2b       	or	r24, r25
 2ce:	89 f0       	breq	.+34     	; 0x2f2 <WhichCanMove+0xc2>
 2d0:	6a e2       	ldi	r22, 0x2A	; 42
 2d2:	73 e0       	ldi	r23, 0x03	; 3
 2d4:	8a ee       	ldi	r24, 0xEA	; 234
 2d6:	93 e0       	ldi	r25, 0x03	; 3
 2d8:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <strcmp>
 2dc:	89 2b       	or	r24, r25
 2de:	49 f0       	breq	.+18     	; 0x2f2 <WhichCanMove+0xc2>
 2e0:	6c e2       	ldi	r22, 0x2C	; 44
 2e2:	73 e0       	ldi	r23, 0x03	; 3
 2e4:	8a ee       	ldi	r24, 0xEA	; 234
 2e6:	93 e0       	ldi	r25, 0x03	; 3
 2e8:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <strcmp>
 2ec:	89 2b       	or	r24, r25
 2ee:	09 f0       	breq	.+2      	; 0x2f2 <WhichCanMove+0xc2>
 2f0:	60 c0       	rjmp	.+192    	; 0x3b2 <WhichCanMove+0x182>
				UART_printString("pass");
 2f2:	8e e2       	ldi	r24, 0x2E	; 46
 2f4:	93 e0       	ldi	r25, 0x03	; 3
 2f6:	0e 94 ba 04 	call	0x974	; 0x974 <UART_printString>
				UART_printString(buffer_data);
 2fa:	8a ee       	ldi	r24, 0xEA	; 234
 2fc:	93 e0       	ldi	r25, 0x03	; 3
 2fe:	0e 94 ba 04 	call	0x974	; 0x974 <UART_printString>
				UART_printString("\n");
 302:	88 e8       	ldi	r24, 0x88	; 136
 304:	93 e0       	ldi	r25, 0x03	; 3
 306:	0e 94 ba 04 	call	0x974	; 0x974 <UART_printString>
				pass = 1;
				
				if ((strcmp(buffer_data, "0") == 0)) return 0;
 30a:	6c e1       	ldi	r22, 0x1C	; 28
 30c:	73 e0       	ldi	r23, 0x03	; 3
 30e:	8a ee       	ldi	r24, 0xEA	; 234
 310:	93 e0       	ldi	r25, 0x03	; 3
 312:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <strcmp>
 316:	9c 01       	movw	r18, r24
 318:	89 2b       	or	r24, r25
 31a:	09 f4       	brne	.+2      	; 0x31e <WhichCanMove+0xee>
 31c:	83 c0       	rjmp	.+262    	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
				else if ((strcmp(buffer_data, "1") == 0)) return 1;
 31e:	6e e1       	ldi	r22, 0x1E	; 30
 320:	73 e0       	ldi	r23, 0x03	; 3
 322:	8a ee       	ldi	r24, 0xEA	; 234
 324:	93 e0       	ldi	r25, 0x03	; 3
 326:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <strcmp>
 32a:	89 2b       	or	r24, r25
 32c:	09 f4       	brne	.+2      	; 0x330 <WhichCanMove+0x100>
 32e:	64 c0       	rjmp	.+200    	; 0x3f8 <WhichCanMove+0x1c8>
				else if ((strcmp(buffer_data, "2") == 0)) return 2;
 330:	60 e2       	ldi	r22, 0x20	; 32
 332:	73 e0       	ldi	r23, 0x03	; 3
 334:	8a ee       	ldi	r24, 0xEA	; 234
 336:	93 e0       	ldi	r25, 0x03	; 3
 338:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <strcmp>
 33c:	89 2b       	or	r24, r25
 33e:	09 f4       	brne	.+2      	; 0x342 <WhichCanMove+0x112>
 340:	5d c0       	rjmp	.+186    	; 0x3fc <WhichCanMove+0x1cc>
				else if ((strcmp(buffer_data, "3") == 0)) return 3;
 342:	62 e2       	ldi	r22, 0x22	; 34
 344:	73 e0       	ldi	r23, 0x03	; 3
 346:	8a ee       	ldi	r24, 0xEA	; 234
 348:	93 e0       	ldi	r25, 0x03	; 3
 34a:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <strcmp>
 34e:	89 2b       	or	r24, r25
 350:	09 f4       	brne	.+2      	; 0x354 <WhichCanMove+0x124>
 352:	57 c0       	rjmp	.+174    	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
				else if ((strcmp(buffer_data, "4") == 0)) return 4;
 354:	64 e2       	ldi	r22, 0x24	; 36
 356:	73 e0       	ldi	r23, 0x03	; 3
 358:	8a ee       	ldi	r24, 0xEA	; 234
 35a:	93 e0       	ldi	r25, 0x03	; 3
 35c:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <strcmp>
 360:	89 2b       	or	r24, r25
 362:	09 f4       	brne	.+2      	; 0x366 <WhichCanMove+0x136>
 364:	51 c0       	rjmp	.+162    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
				else if ((strcmp(buffer_data, "5") == 0)) return 5;
 366:	66 e2       	ldi	r22, 0x26	; 38
 368:	73 e0       	ldi	r23, 0x03	; 3
 36a:	8a ee       	ldi	r24, 0xEA	; 234
 36c:	93 e0       	ldi	r25, 0x03	; 3
 36e:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <strcmp>
 372:	89 2b       	or	r24, r25
 374:	09 f4       	brne	.+2      	; 0x378 <WhichCanMove+0x148>
 376:	4b c0       	rjmp	.+150    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
				else if ((strcmp(buffer_data, "6") == 0)) return 6;
 378:	68 e2       	ldi	r22, 0x28	; 40
 37a:	73 e0       	ldi	r23, 0x03	; 3
 37c:	8a ee       	ldi	r24, 0xEA	; 234
 37e:	93 e0       	ldi	r25, 0x03	; 3
 380:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <strcmp>
 384:	89 2b       	or	r24, r25
 386:	09 f4       	brne	.+2      	; 0x38a <WhichCanMove+0x15a>
 388:	45 c0       	rjmp	.+138    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
				else if ((strcmp(buffer_data, "7") == 0)) return 7;
 38a:	6a e2       	ldi	r22, 0x2A	; 42
 38c:	73 e0       	ldi	r23, 0x03	; 3
 38e:	8a ee       	ldi	r24, 0xEA	; 234
 390:	93 e0       	ldi	r25, 0x03	; 3
 392:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <strcmp>
 396:	89 2b       	or	r24, r25
 398:	09 f4       	brne	.+2      	; 0x39c <WhichCanMove+0x16c>
 39a:	3f c0       	rjmp	.+126    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
				else if ((strcmp(buffer_data, "8") == 0)) return 8;
 39c:	6c e2       	ldi	r22, 0x2C	; 44
 39e:	73 e0       	ldi	r23, 0x03	; 3
 3a0:	8a ee       	ldi	r24, 0xEA	; 234
 3a2:	93 e0       	ldi	r25, 0x03	; 3
 3a4:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <strcmp>
 3a8:	89 2b       	or	r24, r25
 3aa:	d1 f1       	breq	.+116    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
			// 0 ~ 8의 값이 들어오면
			if ((strcmp(buffer_data, "0") == 0) || (strcmp(buffer_data, "1") == 0) || (strcmp(buffer_data, "2") == 0) || (strcmp(buffer_data, "3") == 0) || (strcmp(buffer_data, "4") == 0) || (strcmp(buffer_data, "5") == 0) || (strcmp(buffer_data, "6") == 0) || (strcmp(buffer_data, "7") == 0) || (strcmp(buffer_data, "8") == 0)){
				UART_printString("pass");
				UART_printString(buffer_data);
				UART_printString("\n");
				pass = 1;
 3ac:	01 e0       	ldi	r16, 0x01	; 1
 3ae:	10 e0       	ldi	r17, 0x00	; 0
 3b0:	1e c0       	rjmp	.+60     	; 0x3ee <WhichCanMove+0x1be>
				else if ((strcmp(buffer_data, "6") == 0)) return 6;
				else if ((strcmp(buffer_data, "7") == 0)) return 7;
				else if ((strcmp(buffer_data, "8") == 0)) return 8;
			}
			// 9의 값일 들어오면 (배열이 꽉 찼음)
			else if (strcmp(buffer_data, "9") == 0) {
 3b2:	63 e3       	ldi	r22, 0x33	; 51
 3b4:	73 e0       	ldi	r23, 0x03	; 3
 3b6:	8a ee       	ldi	r24, 0xEA	; 234
 3b8:	93 e0       	ldi	r25, 0x03	; 3
 3ba:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <strcmp>
 3be:	89 2b       	or	r24, r25
 3c0:	51 f4       	brne	.+20     	; 0x3d6 <WhichCanMove+0x1a6>
				UART_printString("end");
 3c2:	85 e3       	ldi	r24, 0x35	; 53
 3c4:	93 e0       	ldi	r25, 0x03	; 3
 3c6:	0e 94 ba 04 	call	0x974	; 0x974 <UART_printString>
				PORTB &= ~(1 << LED1);
 3ca:	85 b1       	in	r24, 0x05	; 5
 3cc:	8e 7f       	andi	r24, 0xFE	; 254
 3ce:	85 b9       	out	0x05, r24	; 5
				//strcpy(temp, "fisrt_robot_stop");
				return 9;
 3d0:	29 e0       	ldi	r18, 0x09	; 9
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	27 c0       	rjmp	.+78     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
			}
			// 다른 값이 들어온다면...
			else {
				UART_printString("not a 0 to 9. : ");
 3d6:	89 e3       	ldi	r24, 0x39	; 57
 3d8:	93 e0       	ldi	r25, 0x03	; 3
 3da:	0e 94 ba 04 	call	0x974	; 0x974 <UART_printString>
				
				UART_transmit(buffer_data);
 3de:	8a ee       	ldi	r24, 0xEA	; 234
 3e0:	93 e0       	ldi	r25, 0x03	; 3
 3e2:	0e 94 b3 04 	call	0x966	; 0x966 <UART_transmit>
				UART_printString("\n");
 3e6:	88 e8       	ldi	r24, 0x88	; 136
 3e8:	93 e0       	ldi	r25, 0x03	; 3
 3ea:	0e 94 ba 04 	call	0x974	; 0x974 <UART_printString>
int WhichCanMove() {
	
	int pass = 0;
	//char temp[20];
	
	while (pass == 0){
 3ee:	01 15       	cp	r16, r1
 3f0:	11 05       	cpc	r17, r1
 3f2:	09 f4       	brne	.+2      	; 0x3f6 <WhichCanMove+0x1c6>
 3f4:	24 cf       	rjmp	.-440    	; 0x23e <WhichCanMove+0xe>
		}
	}
	
	
	//return buffer_data;
}
 3f6:	18 c0       	rjmp	.+48     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
				UART_printString(buffer_data);
				UART_printString("\n");
				pass = 1;
				
				if ((strcmp(buffer_data, "0") == 0)) return 0;
				else if ((strcmp(buffer_data, "1") == 0)) return 1;
 3f8:	9e 01       	movw	r18, r28
 3fa:	14 c0       	rjmp	.+40     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
				else if ((strcmp(buffer_data, "2") == 0)) return 2;
 3fc:	22 e0       	ldi	r18, 0x02	; 2
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	11 c0       	rjmp	.+34     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
				else if ((strcmp(buffer_data, "3") == 0)) return 3;
 402:	23 e0       	ldi	r18, 0x03	; 3
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	0e c0       	rjmp	.+28     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
				else if ((strcmp(buffer_data, "4") == 0)) return 4;
 408:	24 e0       	ldi	r18, 0x04	; 4
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	0b c0       	rjmp	.+22     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
				else if ((strcmp(buffer_data, "5") == 0)) return 5;
 40e:	25 e0       	ldi	r18, 0x05	; 5
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	08 c0       	rjmp	.+16     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
				else if ((strcmp(buffer_data, "6") == 0)) return 6;
 414:	26 e0       	ldi	r18, 0x06	; 6
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	05 c0       	rjmp	.+10     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
				else if ((strcmp(buffer_data, "7") == 0)) return 7;
 41a:	27 e0       	ldi	r18, 0x07	; 7
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	02 c0       	rjmp	.+4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
				else if ((strcmp(buffer_data, "8") == 0)) return 8;
 420:	28 e0       	ldi	r18, 0x08	; 8
 422:	30 e0       	ldi	r19, 0x00	; 0
 424:	82 2f       	mov	r24, r18
 426:	93 2f       	mov	r25, r19
		}
	}
	
	
	//return buffer_data;
}
 428:	df 91       	pop	r29
 42a:	cf 91       	pop	r28
 42c:	1f 91       	pop	r17
 42e:	0f 91       	pop	r16
 430:	08 95       	ret

00000432 <ReceiveInfrared>:

int ReceiveInfrared (void) {
 432:	cf 93       	push	r28
 434:	df 93       	push	r29
	
	int pass = 1;
	//char temp[20];
	
	while (pass != 0){
 436:	2e c0       	rjmp	.+92     	; 0x494 <ReceiveInfrared+0x62>
		
		uart_RasToAt();
		
		if(process_data == 1){
			strcpy(buffer_data, buffer);
 438:	61 ed       	ldi	r22, 0xD1	; 209
 43a:	73 e0       	ldi	r23, 0x03	; 3
 43c:	8a ee       	ldi	r24, 0xEA	; 234
 43e:	93 e0       	ldi	r25, 0x03	; 3
 440:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <strcpy>
			
			// go 값이 들어오면
			if (strcmp(buffer_data, "go") == 0) {
 444:	6a e4       	ldi	r22, 0x4A	; 74
 446:	73 e0       	ldi	r23, 0x03	; 3
 448:	8a ee       	ldi	r24, 0xEA	; 234
 44a:	93 e0       	ldi	r25, 0x03	; 3
 44c:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <strcmp>
 450:	89 2b       	or	r24, r25
 452:	21 f4       	brne	.+8      	; 0x45c <ReceiveInfrared+0x2a>
				//UART_printString("conveyor belt move\n");
				PORTB |= ~(1 << LED2);
 454:	85 b1       	in	r24, 0x05	; 5
 456:	8d 6f       	ori	r24, 0xFD	; 253
 458:	85 b9       	out	0x05, r24	; 5
				return 1;
 45a:	26 c0       	rjmp	.+76     	; 0x4a8 <ReceiveInfrared+0x76>
			}
			
			else if (strcmp(buffer_data, "stp") == 0) {
 45c:	6d e4       	ldi	r22, 0x4D	; 77
 45e:	73 e0       	ldi	r23, 0x03	; 3
 460:	8a ee       	ldi	r24, 0xEA	; 234
 462:	93 e0       	ldi	r25, 0x03	; 3
 464:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <strcmp>
 468:	ec 01       	movw	r28, r24
 46a:	89 2b       	or	r24, r25
 46c:	21 f4       	brne	.+8      	; 0x476 <ReceiveInfrared+0x44>
				//UART_printString("conveyor belt stop\n");
				PORTB &= ~(1 << LED2);
 46e:	85 b1       	in	r24, 0x05	; 5
 470:	8d 7f       	andi	r24, 0xFD	; 253
 472:	85 b9       	out	0x05, r24	; 5
				//strcpy(temp, "conveyor_stp");
				return 0;
 474:	19 c0       	rjmp	.+50     	; 0x4a8 <ReceiveInfrared+0x76>
			}
			// 다른 값이 들어온다면...
			else {
				UART_printString("test : ");
 476:	81 e5       	ldi	r24, 0x51	; 81
 478:	93 e0       	ldi	r25, 0x03	; 3
 47a:	0e 94 ba 04 	call	0x974	; 0x974 <UART_printString>
				UART_transmit(buffer_data);
 47e:	8a ee       	ldi	r24, 0xEA	; 234
 480:	93 e0       	ldi	r25, 0x03	; 3
 482:	0e 94 b3 04 	call	0x966	; 0x966 <UART_transmit>
				UART_printString("\n");
 486:	88 e8       	ldi	r24, 0x88	; 136
 488:	93 e0       	ldi	r25, 0x03	; 3
 48a:	0e 94 ba 04 	call	0x974	; 0x974 <UART_printString>
				return 2;
 48e:	c2 e0       	ldi	r28, 0x02	; 2
 490:	d0 e0       	ldi	r29, 0x00	; 0
 492:	0a c0       	rjmp	.+20     	; 0x4a8 <ReceiveInfrared+0x76>
	int pass = 1;
	//char temp[20];
	
	while (pass != 0){
		
		uart_RasToAt();
 494:	0e 94 be 00 	call	0x17c	; 0x17c <uart_RasToAt>
		
		if(process_data == 1){
 498:	c0 91 e5 03 	lds	r28, 0x03E5	; 0x8003e5 <process_data>
 49c:	d0 91 e6 03 	lds	r29, 0x03E6	; 0x8003e6 <process_data+0x1>
 4a0:	c1 30       	cpi	r28, 0x01	; 1
 4a2:	d1 05       	cpc	r29, r1
 4a4:	b9 f7       	brne	.-18     	; 0x494 <ReceiveInfrared+0x62>
 4a6:	c8 cf       	rjmp	.-112    	; 0x438 <ReceiveInfrared+0x6>
			}
		}
	}
	
	return 0;
}
 4a8:	ce 01       	movw	r24, r28
 4aa:	df 91       	pop	r29
 4ac:	cf 91       	pop	r28
 4ae:	08 95       	ret

000004b0 <MoveServo>:
		//process_data = 0;
		//}
	}
}

void MoveServo(uint8_t servo, uint16_t start_angle, uint16_t end_angle) {
 4b0:	ff 92       	push	r15
 4b2:	0f 93       	push	r16
 4b4:	1f 93       	push	r17
 4b6:	cf 93       	push	r28
 4b8:	df 93       	push	r29
 4ba:	f8 2e       	mov	r15, r24
 4bc:	8a 01       	movw	r16, r20
	int angle;

	if (start_angle <= end_angle) {
 4be:	46 17       	cp	r20, r22
 4c0:	57 07       	cpc	r21, r23
 4c2:	e0 f0       	brcs	.+56     	; 0x4fc <MoveServo+0x4c>
		for (angle = start_angle; angle <= end_angle; ) {
 4c4:	eb 01       	movw	r28, r22
 4c6:	14 c0       	rjmp	.+40     	; 0x4f0 <MoveServo+0x40>
			if (PINB & (1 << switch1)) {
 4c8:	1a 9b       	sbis	0x03, 2	; 3
 4ca:	0e c0       	rjmp	.+28     	; 0x4e8 <MoveServo+0x38>
				PORTB &= ~0x02;
 4cc:	85 b1       	in	r24, 0x05	; 5
 4ce:	8d 7f       	andi	r24, 0xFD	; 253
 4d0:	85 b9       	out	0x05, r24	; 5
				pca9685_pwm(servo, angle);
 4d2:	8f 2d       	mov	r24, r15
 4d4:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <pca9685_pwm>
				angle += 10;
 4d8:	2a 96       	adiw	r28, 0x0a	; 10
 4da:	8f e5       	ldi	r24, 0x5F	; 95
 4dc:	9a ee       	ldi	r25, 0xEA	; 234
 4de:	01 97       	sbiw	r24, 0x01	; 1
 4e0:	f1 f7       	brne	.-4      	; 0x4de <MoveServo+0x2e>
 4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <MoveServo+0x34>
 4e4:	00 00       	nop
 4e6:	04 c0       	rjmp	.+8      	; 0x4f0 <MoveServo+0x40>
			}
			else {
				PORTB |= 0x02;
 4e8:	85 b1       	in	r24, 0x05	; 5
 4ea:	82 60       	ori	r24, 0x02	; 2
 4ec:	85 b9       	out	0x05, r24	; 5
				break;
 4ee:	21 c0       	rjmp	.+66     	; 0x532 <MoveServo+0x82>

void MoveServo(uint8_t servo, uint16_t start_angle, uint16_t end_angle) {
	int angle;

	if (start_angle <= end_angle) {
		for (angle = start_angle; angle <= end_angle; ) {
 4f0:	6c 2f       	mov	r22, r28
 4f2:	7d 2f       	mov	r23, r29
 4f4:	0c 17       	cp	r16, r28
 4f6:	1d 07       	cpc	r17, r29
 4f8:	38 f7       	brcc	.-50     	; 0x4c8 <MoveServo+0x18>
 4fa:	1b c0       	rjmp	.+54     	; 0x532 <MoveServo+0x82>
			_delay_ms(15);
		}
	}
	
	else {
		for (angle = start_angle; angle >= end_angle; ) {
 4fc:	eb 01       	movw	r28, r22
 4fe:	14 c0       	rjmp	.+40     	; 0x528 <MoveServo+0x78>
			if (PINB & (1 << switch1)) {
 500:	1a 9b       	sbis	0x03, 2	; 3
 502:	0e c0       	rjmp	.+28     	; 0x520 <MoveServo+0x70>
				PORTB &= ~0x02;
 504:	85 b1       	in	r24, 0x05	; 5
 506:	8d 7f       	andi	r24, 0xFD	; 253
 508:	85 b9       	out	0x05, r24	; 5
				pca9685_pwm(servo, angle);
 50a:	8f 2d       	mov	r24, r15
 50c:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <pca9685_pwm>
				angle -= 10;
 510:	2a 97       	sbiw	r28, 0x0a	; 10
 512:	8f e5       	ldi	r24, 0x5F	; 95
 514:	9a ee       	ldi	r25, 0xEA	; 234
 516:	01 97       	sbiw	r24, 0x01	; 1
 518:	f1 f7       	brne	.-4      	; 0x516 <MoveServo+0x66>
 51a:	00 c0       	rjmp	.+0      	; 0x51c <MoveServo+0x6c>
 51c:	00 00       	nop
 51e:	04 c0       	rjmp	.+8      	; 0x528 <MoveServo+0x78>
			}
			else {
				PORTB |= 0x02;
 520:	85 b1       	in	r24, 0x05	; 5
 522:	82 60       	ori	r24, 0x02	; 2
 524:	85 b9       	out	0x05, r24	; 5
				break;
 526:	05 c0       	rjmp	.+10     	; 0x532 <MoveServo+0x82>
			_delay_ms(15);
		}
	}
	
	else {
		for (angle = start_angle; angle >= end_angle; ) {
 528:	6c 2f       	mov	r22, r28
 52a:	7d 2f       	mov	r23, r29
 52c:	c0 17       	cp	r28, r16
 52e:	d1 07       	cpc	r29, r17
 530:	38 f7       	brcc	.-50     	; 0x500 <MoveServo+0x50>
				break;
			}
			_delay_ms(15);
		}
	}
}
 532:	df 91       	pop	r29
 534:	cf 91       	pop	r28
 536:	1f 91       	pop	r17
 538:	0f 91       	pop	r16
 53a:	ff 90       	pop	r15
 53c:	08 95       	ret

0000053e <MoveRobotArm>:

void MoveRobotArm(uint8_t servo, uint8_t count){
 53e:	1f 93       	push	r17
 540:	cf 93       	push	r28
 542:	df 93       	push	r29
	
	int i;
	
	switch (servo){
 544:	81 30       	cpi	r24, 0x01	; 1
 546:	d9 f5       	brne	.+118    	; 0x5be <MoveRobotArm+0x80>
 548:	16 2f       	mov	r17, r22
		case 1:
		PORTB |= (1 << LED2);
 54a:	85 b1       	in	r24, 0x05	; 5
 54c:	82 60       	ori	r24, 0x02	; 2
 54e:	85 b9       	out	0x05, r24	; 5
		for(i = 0; i < servo_max; i++){
 550:	c0 e0       	ldi	r28, 0x00	; 0
 552:	d0 e0       	ldi	r29, 0x00	; 0
 554:	31 c0       	rjmp	.+98     	; 0x5b8 <MoveRobotArm+0x7a>
			MoveServo(SERVO_A(move_Aarm_coord[count][i][0]), ANGLE(move_Aarm_coord[count][i][1]), ANGLE(move_Aarm_coord[count][i][2]));
 556:	fe 01       	movw	r30, r28
 558:	ee 0f       	add	r30, r30
 55a:	ff 1f       	adc	r31, r31
 55c:	ec 0f       	add	r30, r28
 55e:	fd 1f       	adc	r31, r29
 560:	ee 0f       	add	r30, r30
 562:	ff 1f       	adc	r31, r31
 564:	8c e3       	ldi	r24, 0x3C	; 60
 566:	18 9f       	mul	r17, r24
 568:	e0 0d       	add	r30, r0
 56a:	f1 1d       	adc	r31, r1
 56c:	11 24       	eor	r1, r1
 56e:	e0 50       	subi	r30, 0x00	; 0
 570:	ff 4f       	sbci	r31, 0xFF	; 255
 572:	84 81       	ldd	r24, Z+4	; 0x04
 574:	95 81       	ldd	r25, Z+5	; 0x05
 576:	ac 01       	movw	r20, r24
 578:	44 0f       	add	r20, r20
 57a:	55 1f       	adc	r21, r21
 57c:	88 0f       	add	r24, r24
 57e:	99 1f       	adc	r25, r25
 580:	88 0f       	add	r24, r24
 582:	99 1f       	adc	r25, r25
 584:	88 0f       	add	r24, r24
 586:	99 1f       	adc	r25, r25
 588:	48 0f       	add	r20, r24
 58a:	59 1f       	adc	r21, r25
 58c:	48 5a       	subi	r20, 0xA8	; 168
 58e:	5d 4f       	sbci	r21, 0xFD	; 253
 590:	82 81       	ldd	r24, Z+2	; 0x02
 592:	93 81       	ldd	r25, Z+3	; 0x03
 594:	bc 01       	movw	r22, r24
 596:	66 0f       	add	r22, r22
 598:	77 1f       	adc	r23, r23
 59a:	88 0f       	add	r24, r24
 59c:	99 1f       	adc	r25, r25
 59e:	88 0f       	add	r24, r24
 5a0:	99 1f       	adc	r25, r25
 5a2:	88 0f       	add	r24, r24
 5a4:	99 1f       	adc	r25, r25
 5a6:	68 0f       	add	r22, r24
 5a8:	79 1f       	adc	r23, r25
 5aa:	68 5a       	subi	r22, 0xA8	; 168
 5ac:	7d 4f       	sbci	r23, 0xFD	; 253
 5ae:	80 81       	ld	r24, Z
 5b0:	81 50       	subi	r24, 0x01	; 1
 5b2:	0e 94 58 02 	call	0x4b0	; 0x4b0 <MoveServo>
	int i;
	
	switch (servo){
		case 1:
		PORTB |= (1 << LED2);
		for(i = 0; i < servo_max; i++){
 5b6:	21 96       	adiw	r28, 0x01	; 1
 5b8:	ca 30       	cpi	r28, 0x0A	; 10
 5ba:	d1 05       	cpc	r29, r1
 5bc:	64 f2       	brlt	.-104    	; 0x556 <MoveRobotArm+0x18>
		//MoveServo(SERVO_B(move_Barm_coord[count][i][0]), ANGLE(move_Barm_coord[count][i][1]), ANGLE(move_Barm_coord[count][i][2]));
		//break;
		//}
	}
	
}
 5be:	df 91       	pop	r29
 5c0:	cf 91       	pop	r28
 5c2:	1f 91       	pop	r17
 5c4:	08 95       	ret

000005c6 <INIT_STEPPER>:

void INIT_STEPPER()
{
	// 타이머/카운터 2번을 고속 PWM 모드로 설정
	TCCR2A |= (1 << WGM21) | (1 << WGM20);
 5c6:	e0 eb       	ldi	r30, 0xB0	; 176
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	80 81       	ld	r24, Z
 5cc:	83 60       	ori	r24, 0x03	; 3
 5ce:	80 83       	st	Z, r24
	TCCR2A |= (1 << COM2A1);		// 비반전 모드
 5d0:	80 81       	ld	r24, Z
 5d2:	80 68       	ori	r24, 0x80	; 128
 5d4:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS22);			// 분주비 64
 5d6:	e1 eb       	ldi	r30, 0xB1	; 177
 5d8:	f0 e0       	ldi	r31, 0x00	; 0
 5da:	80 81       	ld	r24, Z
 5dc:	84 60       	ori	r24, 0x04	; 4
 5de:	80 83       	st	Z, r24
	
	
	// stepping motor
	STEPPING_A_DDR |= (1 << STEPPING_A_IN1) | (1 << STEPPING_A_IN2 ) | (1 << STEPPING_A_IN3) | (1 << STEPPING_A_IN4);
 5e0:	8a b1       	in	r24, 0x0a	; 10
 5e2:	8c 63       	ori	r24, 0x3C	; 60
 5e4:	8a b9       	out	0x0a, r24	; 10
	STEPPING_B_DDR |= (1 << STEPPING_B_IN1) | (1 << STEPPING_B_IN2 ) | (1 << STEPPING_B_IN3) | (1 << STEPPING_B_IN4);
 5e6:	87 b1       	in	r24, 0x07	; 7
 5e8:	8f 60       	ori	r24, 0x0F	; 15
 5ea:	87 b9       	out	0x07, r24	; 7
	
	// led
	LED_DDR |= (1 << LED1) | (1 << LED2);	// led 상태등 표시 PB0
 5ec:	84 b1       	in	r24, 0x04	; 4
 5ee:	83 60       	ori	r24, 0x03	; 3
 5f0:	84 b9       	out	0x04, r24	; 4
 5f2:	08 95       	ret

000005f4 <loop_stepper>:
}

void loop_stepper()
{
	STEPPING_A &= ~((1 << STEPPING_A_IN1) | (1 << STEPPING_A_IN4));		// low
 5f4:	8b b1       	in	r24, 0x0b	; 11
 5f6:	8b 7d       	andi	r24, 0xDB	; 219
 5f8:	8b b9       	out	0x0b, r24	; 11
	STEPPING_A |= (1 << STEPPING_A_IN2) | (1 << STEPPING_A_IN3);		// high
 5fa:	8b b1       	in	r24, 0x0b	; 11
 5fc:	88 61       	ori	r24, 0x18	; 24
 5fe:	8b b9       	out	0x0b, r24	; 11
	STEPPING_B &= ~((1 << STEPPING_B_IN1) | (1 << STEPPING_B_IN4));
 600:	88 b1       	in	r24, 0x08	; 8
 602:	86 7f       	andi	r24, 0xF6	; 246
 604:	88 b9       	out	0x08, r24	; 8
	STEPPING_B |= (1 << STEPPING_B_IN2) | (1 << STEPPING_B_IN3);
 606:	88 b1       	in	r24, 0x08	; 8
 608:	86 60       	ori	r24, 0x06	; 6
 60a:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 60c:	2f ef       	ldi	r18, 0xFF	; 255
 60e:	89 ef       	ldi	r24, 0xF9	; 249
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	21 50       	subi	r18, 0x01	; 1
 614:	80 40       	sbci	r24, 0x00	; 0
 616:	90 40       	sbci	r25, 0x00	; 0
 618:	e1 f7       	brne	.-8      	; 0x612 <loop_stepper+0x1e>
 61a:	00 c0       	rjmp	.+0      	; 0x61c <loop_stepper+0x28>
 61c:	00 00       	nop
	_delay_us(motor_time);
	

	STEPPING_A &= ~((1 << STEPPING_A_IN1) | (1 << STEPPING_A_IN3));
 61e:	8b b1       	in	r24, 0x0b	; 11
 620:	8b 7e       	andi	r24, 0xEB	; 235
 622:	8b b9       	out	0x0b, r24	; 11
	STEPPING_A |= (1 << STEPPING_A_IN2) | (1 << STEPPING_A_IN4);
 624:	8b b1       	in	r24, 0x0b	; 11
 626:	88 62       	ori	r24, 0x28	; 40
 628:	8b b9       	out	0x0b, r24	; 11
	STEPPING_B &= ~((1 << STEPPING_B_IN1) | (1 << STEPPING_B_IN3));
 62a:	88 b1       	in	r24, 0x08	; 8
 62c:	8a 7f       	andi	r24, 0xFA	; 250
 62e:	88 b9       	out	0x08, r24	; 8
	STEPPING_B |= (1 << STEPPING_B_IN2) | (1 << STEPPING_B_IN4);
 630:	88 b1       	in	r24, 0x08	; 8
 632:	8a 60       	ori	r24, 0x0A	; 10
 634:	88 b9       	out	0x08, r24	; 8
 636:	2f ef       	ldi	r18, 0xFF	; 255
 638:	89 ef       	ldi	r24, 0xF9	; 249
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	21 50       	subi	r18, 0x01	; 1
 63e:	80 40       	sbci	r24, 0x00	; 0
 640:	90 40       	sbci	r25, 0x00	; 0
 642:	e1 f7       	brne	.-8      	; 0x63c <loop_stepper+0x48>
 644:	00 c0       	rjmp	.+0      	; 0x646 <loop_stepper+0x52>
 646:	00 00       	nop
	_delay_us(motor_time);
	
	STEPPING_A &= ~((1 << STEPPING_A_IN2) | (1 << STEPPING_A_IN3));
 648:	8b b1       	in	r24, 0x0b	; 11
 64a:	87 7e       	andi	r24, 0xE7	; 231
 64c:	8b b9       	out	0x0b, r24	; 11
	STEPPING_A |= (1 << STEPPING_A_IN1) | (1 << STEPPING_A_IN4);
 64e:	8b b1       	in	r24, 0x0b	; 11
 650:	84 62       	ori	r24, 0x24	; 36
 652:	8b b9       	out	0x0b, r24	; 11
	STEPPING_B &= ~((1 << STEPPING_B_IN2) | (1 << STEPPING_B_IN3));
 654:	88 b1       	in	r24, 0x08	; 8
 656:	89 7f       	andi	r24, 0xF9	; 249
 658:	88 b9       	out	0x08, r24	; 8
	STEPPING_B |= (1 << STEPPING_B_IN1) | (1 << STEPPING_B_IN4);
 65a:	88 b1       	in	r24, 0x08	; 8
 65c:	89 60       	ori	r24, 0x09	; 9
 65e:	88 b9       	out	0x08, r24	; 8
 660:	2f ef       	ldi	r18, 0xFF	; 255
 662:	89 ef       	ldi	r24, 0xF9	; 249
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	21 50       	subi	r18, 0x01	; 1
 668:	80 40       	sbci	r24, 0x00	; 0
 66a:	90 40       	sbci	r25, 0x00	; 0
 66c:	e1 f7       	brne	.-8      	; 0x666 <loop_stepper+0x72>
 66e:	00 c0       	rjmp	.+0      	; 0x670 <loop_stepper+0x7c>
 670:	00 00       	nop
	_delay_us(motor_time);

	STEPPING_A &= ~((1 << STEPPING_A_IN2) | (1 << STEPPING_A_IN4));
 672:	8b b1       	in	r24, 0x0b	; 11
 674:	87 7d       	andi	r24, 0xD7	; 215
 676:	8b b9       	out	0x0b, r24	; 11
	STEPPING_A |= (1 << STEPPING_A_IN1) | (1 << STEPPING_A_IN3);
 678:	8b b1       	in	r24, 0x0b	; 11
 67a:	84 61       	ori	r24, 0x14	; 20
 67c:	8b b9       	out	0x0b, r24	; 11
	STEPPING_B &= ~((1 << STEPPING_B_IN2) | (1 << STEPPING_B_IN4));
 67e:	88 b1       	in	r24, 0x08	; 8
 680:	85 7f       	andi	r24, 0xF5	; 245
 682:	88 b9       	out	0x08, r24	; 8
	STEPPING_B |= (1 << STEPPING_B_IN1) | (1 << STEPPING_B_IN3);
 684:	88 b1       	in	r24, 0x08	; 8
 686:	85 60       	ori	r24, 0x05	; 5
 688:	88 b9       	out	0x08, r24	; 8
 68a:	2f ef       	ldi	r18, 0xFF	; 255
 68c:	89 ef       	ldi	r24, 0xF9	; 249
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	21 50       	subi	r18, 0x01	; 1
 692:	80 40       	sbci	r24, 0x00	; 0
 694:	90 40       	sbci	r25, 0x00	; 0
 696:	e1 f7       	brne	.-8      	; 0x690 <loop_stepper+0x9c>
 698:	00 c0       	rjmp	.+0      	; 0x69a <loop_stepper+0xa6>
 69a:	00 00       	nop
 69c:	08 95       	ret

0000069e <ConveyorBeltStop>:

int ConveyorBeltStop (void) {
	
	int pass = 1;
	
	while (pass != 0) {
 69e:	05 c0       	rjmp	.+10     	; 0x6aa <ConveyorBeltStop+0xc>
		
		int temp;
		temp = ReceiveInfrared();
		
		if (temp != 0)	loop_stepper();
 6a0:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <loop_stepper>
 6a4:	02 c0       	rjmp	.+4      	; 0x6aa <ConveyorBeltStop+0xc>
		else if (temp == 0) return 0;
 6a6:	89 2b       	or	r24, r25
 6a8:	29 f0       	breq	.+10     	; 0x6b4 <ConveyorBeltStop+0x16>
	int pass = 1;
	
	while (pass != 0) {
		
		int temp;
		temp = ReceiveInfrared();
 6aa:	0e 94 19 02 	call	0x432	; 0x432 <ReceiveInfrared>
		
		if (temp != 0)	loop_stepper();
 6ae:	00 97       	sbiw	r24, 0x00	; 0
 6b0:	d1 f3       	breq	.-12     	; 0x6a6 <ConveyorBeltStop+0x8>
 6b2:	f6 cf       	rjmp	.-20     	; 0x6a0 <ConveyorBeltStop+0x2>
		//}
		//uart_index = 0;
		//process_data = 0;
		//}
	}
}
 6b4:	80 e0       	ldi	r24, 0x00	; 0
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	08 95       	ret

000006ba <main>:
char buffer_data[20];
char data;					// 수신 데이터


int main(void)
{
 6ba:	cf 93       	push	r28
 6bc:	df 93       	push	r29
	LED_DDR |= (1 << LED1) | (1 << LED2);
 6be:	84 b1       	in	r24, 0x04	; 4
 6c0:	83 60       	ori	r24, 0x03	; 3
 6c2:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << switch1);
 6c4:	84 b1       	in	r24, 0x04	; 4
 6c6:	8b 7f       	andi	r24, 0xFB	; 251
 6c8:	84 b9       	out	0x04, r24	; 4
	
	//char* temp;
	int move_num;
	
	// servo motor, stepping motor 초기화
	INIT_SERVO();
 6ca:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <INIT_SERVO>
	INIT_STEPPER();
 6ce:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <INIT_STEPPER>
	UART_INIT();
 6d2:	0e 94 94 04 	call	0x928	; 0x928 <UART_INIT>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6d6:	2f ef       	ldi	r18, 0xFF	; 255
 6d8:	83 ed       	ldi	r24, 0xD3	; 211
 6da:	90 e3       	ldi	r25, 0x30	; 48
 6dc:	21 50       	subi	r18, 0x01	; 1
 6de:	80 40       	sbci	r24, 0x00	; 0
 6e0:	90 40       	sbci	r25, 0x00	; 0
 6e2:	e1 f7       	brne	.-8      	; 0x6dc <main+0x22>
 6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <main+0x2c>
 6e6:	00 00       	nop
	
	//MoveRobotArm(1, 0);
	
	while (1){
		// LED ON
		PORTB |= (1 << LED1);
 6e8:	85 b1       	in	r24, 0x05	; 5
 6ea:	81 60       	ori	r24, 0x01	; 1
 6ec:	85 b9       	out	0x05, r24	; 5
		
		INIT_SERVO();
 6ee:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <INIT_SERVO>
 6f2:	2f ef       	ldi	r18, 0xFF	; 255
 6f4:	83 ed       	ldi	r24, 0xD3	; 211
 6f6:	90 e3       	ldi	r25, 0x30	; 48
 6f8:	21 50       	subi	r18, 0x01	; 1
 6fa:	80 40       	sbci	r24, 0x00	; 0
 6fc:	90 40       	sbci	r25, 0x00	; 0
 6fe:	e1 f7       	brne	.-8      	; 0x6f8 <main+0x3e>
 700:	00 c0       	rjmp	.+0      	; 0x702 <main+0x48>
 702:	00 00       	nop
		_delay_ms(1000);

		int pass = 0;
		int part = 1;
 704:	c1 e0       	ldi	r28, 0x01	; 1
 706:	d0 e0       	ldi	r29, 0x00	; 0
		int uart_right = 0;
		
		while (pass == 0) {
 708:	45 c0       	rjmp	.+138    	; 0x794 <main+0xda>
				/* PART1. 첫 번째 로봇팔 움직임 */
				
				// 로봇팔 움직일 수 있는지 확인
				uart_right = 0;
					
				UART_printString("====First Robot Arm====\n");
 70a:	89 e5       	ldi	r24, 0x59	; 89
 70c:	93 e0       	ldi	r25, 0x03	; 3
 70e:	0e 94 ba 04 	call	0x974	; 0x974 <UART_printString>
				move_num = WhichCanMove();
 712:	0e 94 18 01 	call	0x230	; 0x230 <WhichCanMove>
				
				// return으로 stop을 받으면 실행을 종료한다.
				if (move_num == 9){
 716:	89 30       	cpi	r24, 0x09	; 9
 718:	91 05       	cpc	r25, r1
 71a:	09 f4       	brne	.+2      	; 0x71e <main+0x64>
 71c:	3f c0       	rjmp	.+126    	; 0x79c <main+0xe2>
					PORTB |= (1 << LED2);
					return 0;
				}
				else if (0 <= move_num && move_num < 9) {
 71e:	89 30       	cpi	r24, 0x09	; 9
 720:	91 05       	cpc	r25, r1
 722:	30 f4       	brcc	.+12     	; 0x730 <main+0x76>
					//UART_printString("YES!!!!!!!!!!\n");
					MoveRobotArm(1, move_num);
 724:	68 2f       	mov	r22, r24
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	0e 94 9f 02 	call	0x53e	; 0x53e <MoveRobotArm>
					part = 2;
 72c:	c2 e0       	ldi	r28, 0x02	; 2
 72e:	d0 e0       	ldi	r29, 0x00	; 0
				}
			}
			
			if (part == 2) {
 730:	c2 30       	cpi	r28, 0x02	; 2
 732:	d1 05       	cpc	r29, r1
 734:	d9 f4       	brne	.+54     	; 0x76c <main+0xb2>
				
				/* PART2. 첫 번째 로봇팔 움직임이 종료된 후 적외선 센서 값 받아오기 */
				
				// 적외선센서 값 받아오기
				UART_printString("====First Infrared====\n");
 736:	82 e7       	ldi	r24, 0x72	; 114
 738:	93 e0       	ldi	r25, 0x03	; 3
 73a:	0e 94 ba 04 	call	0x974	; 0x974 <UART_printString>
				int inf_value;
				inf_value = ReceiveInfrared();
 73e:	0e 94 19 02 	call	0x432	; 0x432 <ReceiveInfrared>
				
				// 적외선 센서값을 받아오지 않으면 (컨베이어 벨트 위에 상자가 놓여있지 않으면) part1으로 이동
				if (inf_value == 1) {
 742:	81 30       	cpi	r24, 0x01	; 1
 744:	91 05       	cpc	r25, r1
 746:	39 f4       	brne	.+14     	; 0x756 <main+0x9c>
					UART_printString("GO_CONV\n");
 748:	8a e8       	ldi	r24, 0x8A	; 138
 74a:	93 e0       	ldi	r25, 0x03	; 3
 74c:	0e 94 ba 04 	call	0x974	; 0x974 <UART_printString>
					part = 3;
 750:	c3 e0       	ldi	r28, 0x03	; 3
 752:	d0 e0       	ldi	r29, 0x00	; 0
 754:	0b c0       	rjmp	.+22     	; 0x76c <main+0xb2>
				}
				else if (inf_value == 0) {
 756:	89 2b       	or	r24, r25
 758:	49 f4       	brne	.+18     	; 0x76c <main+0xb2>
					PORTB |= (1 << LED2);
 75a:	85 b1       	in	r24, 0x05	; 5
 75c:	82 60       	ori	r24, 0x02	; 2
 75e:	85 b9       	out	0x05, r24	; 5
					UART_printString("STOP_CONV\n");
 760:	83 e9       	ldi	r24, 0x93	; 147
 762:	93 e0       	ldi	r25, 0x03	; 3
 764:	0e 94 ba 04 	call	0x974	; 0x974 <UART_printString>
					part = 1;
 768:	c1 e0       	ldi	r28, 0x01	; 1
 76a:	d0 e0       	ldi	r29, 0x00	; 0
				}
			}
			
			if (part == 3) {
 76c:	c3 30       	cpi	r28, 0x03	; 3
 76e:	d1 05       	cpc	r29, r1
 770:	51 f4       	brne	.+20     	; 0x786 <main+0xcc>
				/* PART3. 컨베이어 벨트 */
				UART_printString("====stepping motor====\n");
 772:	8e e9       	ldi	r24, 0x9E	; 158
 774:	93 e0       	ldi	r25, 0x03	; 3
 776:	0e 94 ba 04 	call	0x974	; 0x974 <UART_printString>

				int conv_move;
				conv_move = ConveyorBeltStop();
 77a:	0e 94 4f 03 	call	0x69e	; 0x69e <ConveyorBeltStop>
				
				if (conv_move == 0)	part = 4;
 77e:	89 2b       	or	r24, r25
 780:	11 f4       	brne	.+4      	; 0x786 <main+0xcc>
 782:	c4 e0       	ldi	r28, 0x04	; 4
 784:	d0 e0       	ldi	r29, 0x00	; 0
			}
			
			if (part == 4) {
 786:	c4 30       	cpi	r28, 0x04	; 4
 788:	d1 05       	cpc	r29, r1
 78a:	21 f4       	brne	.+8      	; 0x794 <main+0xda>
				/* PART4. 두 번째 로봇팔 움직이기 */
				UART_printString("====Second Robot Arm====\n");
 78c:	86 eb       	ldi	r24, 0xB6	; 182
 78e:	93 e0       	ldi	r25, 0x03	; 3
 790:	0e 94 ba 04 	call	0x974	; 0x974 <UART_printString>
		int part = 1;
		int uart_right = 0;
		
		while (pass == 0) {
			
			if (part == 1){
 794:	c1 30       	cpi	r28, 0x01	; 1
 796:	d1 05       	cpc	r29, r1
 798:	59 f6       	brne	.-106    	; 0x730 <main+0x76>
 79a:	b7 cf       	rjmp	.-146    	; 0x70a <main+0x50>
				UART_printString("====First Robot Arm====\n");
				move_num = WhichCanMove();
				
				// return으로 stop을 받으면 실행을 종료한다.
				if (move_num == 9){
					PORTB |= (1 << LED2);
 79c:	85 b1       	in	r24, 0x05	; 5
 79e:	82 60       	ori	r24, 0x02	; 2
 7a0:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1 << LED1);
	}
	

	return 0;
}
 7a2:	80 e0       	ldi	r24, 0x00	; 0
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	df 91       	pop	r29
 7a8:	cf 91       	pop	r28
 7aa:	08 95       	ret

000007ac <pca9685_init>:
    i2c_tx_byte(0x00); // set value of LEDXX_ON_L
    i2c_tx_byte(0x00); // set value of LEDXX_ON_H
    i2c_tx_byte(offLowCmnd); // set value of LEDXX_OFF_L
    i2c_tx_byte(offHighCmnd); // set value of LEDXX_OFF_H
    i2c_tx_stop();
}
 7ac:	ff 92       	push	r15
 7ae:	0f 93       	push	r16
 7b0:	1f 93       	push	r17
 7b2:	cf 93       	push	r28
 7b4:	df 93       	push	r29
 7b6:	1f 92       	push	r1
 7b8:	cd b7       	in	r28, 0x3d	; 61
 7ba:	de b7       	in	r29, 0x3e	; 62
 7bc:	f8 2e       	mov	r15, r24
 7be:	8b 01       	movw	r16, r22
 7c0:	70 93 00 04 	sts	0x0400, r23	; 0x800400 <globalFrequency+0x1>
 7c4:	60 93 ff 03 	sts	0x03FF, r22	; 0x8003ff <globalFrequency>
 7c8:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <globalAddress>
 7cc:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_init>
 7d0:	80 e0       	ldi	r24, 0x00	; 0
 7d2:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2c_tx_start>
 7d6:	80 e4       	ldi	r24, 0x40	; 64
 7d8:	8f 0d       	add	r24, r15
 7da:	0e 94 72 00 	call	0xe4	; 0xe4 <i2c_tx_address>
 7de:	80 e0       	ldi	r24, 0x00	; 0
 7e0:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
 7e4:	81 e3       	ldi	r24, 0x31	; 49
 7e6:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
 7ea:	0e 94 b4 00 	call	0x168	; 0x168 <i2c_tx_stop>
 7ee:	89 ef       	ldi	r24, 0xF9	; 249
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	01 97       	sbiw	r24, 0x01	; 1
 7f4:	f1 f7       	brne	.-4      	; 0x7f2 <pca9685_init+0x46>
 7f6:	00 c0       	rjmp	.+0      	; 0x7f8 <pca9685_init+0x4c>
 7f8:	00 00       	nop
 7fa:	b8 01       	movw	r22, r16
 7fc:	80 e0       	ldi	r24, 0x00	; 0
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	0e 94 de 05 	call	0xbbc	; 0xbbc <__floatunsisf>
 804:	20 e0       	ldi	r18, 0x00	; 0
 806:	30 e0       	ldi	r19, 0x00	; 0
 808:	40 e8       	ldi	r20, 0x80	; 128
 80a:	55 e4       	ldi	r21, 0x45	; 69
 80c:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__mulsf3>
 810:	2f e1       	ldi	r18, 0x1F	; 31
 812:	35 e8       	ldi	r19, 0x85	; 133
 814:	4b e6       	ldi	r20, 0x6B	; 107
 816:	5f e3       	ldi	r21, 0x3F	; 63
 818:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__mulsf3>
 81c:	9b 01       	movw	r18, r22
 81e:	ac 01       	movw	r20, r24
 820:	60 e2       	ldi	r22, 0x20	; 32
 822:	7c eb       	ldi	r23, 0xBC	; 188
 824:	8e eb       	ldi	r24, 0xBE	; 190
 826:	9b e4       	ldi	r25, 0x4B	; 75
 828:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__divsf3>
 82c:	20 e0       	ldi	r18, 0x00	; 0
 82e:	30 e0       	ldi	r19, 0x00	; 0
 830:	40 e8       	ldi	r20, 0x80	; 128
 832:	5f e3       	ldi	r21, 0x3F	; 63
 834:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__subsf3>
 838:	0e 94 af 05 	call	0xb5e	; 0xb5e <__fixunssfsi>
 83c:	69 83       	std	Y+1, r22	; 0x01
 83e:	80 e0       	ldi	r24, 0x00	; 0
 840:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2c_tx_start>
 844:	80 e4       	ldi	r24, 0x40	; 64
 846:	0e 94 72 00 	call	0xe4	; 0xe4 <i2c_tx_address>
 84a:	8e ef       	ldi	r24, 0xFE	; 254
 84c:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
 850:	89 81       	ldd	r24, Y+1	; 0x01
 852:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
 856:	0e 94 b4 00 	call	0x168	; 0x168 <i2c_tx_stop>
 85a:	89 ef       	ldi	r24, 0xF9	; 249
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	01 97       	sbiw	r24, 0x01	; 1
 860:	f1 f7       	brne	.-4      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 862:	00 c0       	rjmp	.+0      	; 0x864 <__DATA_REGION_LENGTH__+0x64>
 864:	00 00       	nop
 866:	80 e0       	ldi	r24, 0x00	; 0
 868:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2c_tx_start>
 86c:	80 e4       	ldi	r24, 0x40	; 64
 86e:	0e 94 72 00 	call	0xe4	; 0xe4 <i2c_tx_address>
 872:	80 e0       	ldi	r24, 0x00	; 0
 874:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
 878:	81 ea       	ldi	r24, 0xA1	; 161
 87a:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
 87e:	0e 94 b4 00 	call	0x168	; 0x168 <i2c_tx_stop>
 882:	89 ef       	ldi	r24, 0xF9	; 249
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	01 97       	sbiw	r24, 0x01	; 1
 888:	f1 f7       	brne	.-4      	; 0x886 <__DATA_REGION_LENGTH__+0x86>
 88a:	00 c0       	rjmp	.+0      	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
 88c:	00 00       	nop
 88e:	80 e0       	ldi	r24, 0x00	; 0
 890:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2c_tx_start>
 894:	80 e4       	ldi	r24, 0x40	; 64
 896:	0e 94 72 00 	call	0xe4	; 0xe4 <i2c_tx_address>
 89a:	81 e0       	ldi	r24, 0x01	; 1
 89c:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
 8a0:	84 e0       	ldi	r24, 0x04	; 4
 8a2:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
 8a6:	0e 94 b4 00 	call	0x168	; 0x168 <i2c_tx_stop>
 8aa:	0f 90       	pop	r0
 8ac:	df 91       	pop	r29
 8ae:	cf 91       	pop	r28
 8b0:	1f 91       	pop	r17
 8b2:	0f 91       	pop	r16
 8b4:	ff 90       	pop	r15
 8b6:	08 95       	ret

000008b8 <pca9685_pwm>:

void pca9685_pwm(uint8_t servoNum, uint16_t usec){
 8b8:	1f 93       	push	r17
 8ba:	cf 93       	push	r28
 8bc:	df 93       	push	r29
 8be:	c8 2f       	mov	r28, r24
	//else if (usec < 600) usec = 600;
	
	uint16_t pulse_us = usec; //1500 + angle*10;

	uint16_t period_us = 20000; // (float)1000000 / 50Hz;
	uint16_t count = (float)pulse_us/20000 * 4096; //((float)pulse_us / period_us) * 4096;
 8c0:	80 e0       	ldi	r24, 0x00	; 0
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	0e 94 de 05 	call	0xbbc	; 0xbbc <__floatunsisf>
 8c8:	20 e0       	ldi	r18, 0x00	; 0
 8ca:	30 e4       	ldi	r19, 0x40	; 64
 8cc:	4c e9       	ldi	r20, 0x9C	; 156
 8ce:	56 e4       	ldi	r21, 0x46	; 70
 8d0:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__divsf3>
 8d4:	20 e0       	ldi	r18, 0x00	; 0
 8d6:	30 e0       	ldi	r19, 0x00	; 0
 8d8:	40 e8       	ldi	r20, 0x80	; 128
 8da:	55 e4       	ldi	r21, 0x45	; 69
 8dc:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__mulsf3>
 8e0:	0e 94 af 05 	call	0xb5e	; 0xb5e <__fixunssfsi>
 8e4:	16 2f       	mov	r17, r22
 8e6:	d7 2f       	mov	r29, r23

	uint8_t offLowCmnd = count;
	uint8_t offHighCmnd = count >> 8;

	i2c_tx_start(MASTER_TRANSMITTER);
 8e8:	80 e0       	ldi	r24, 0x00	; 0
 8ea:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2c_tx_start>
	i2c_tx_address(0x40 + globalAddress); 
 8ee:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <globalAddress>
 8f2:	80 5c       	subi	r24, 0xC0	; 192
 8f4:	0e 94 72 00 	call	0xe4	; 0xe4 <i2c_tx_address>
	i2c_tx_byte(SERVO0 + (4 * servoNum));
 8f8:	8c 2f       	mov	r24, r28
 8fa:	88 0f       	add	r24, r24
 8fc:	88 0f       	add	r24, r24
 8fe:	8a 5f       	subi	r24, 0xFA	; 250
 900:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
	i2c_tx_byte(0x00); 
 904:	80 e0       	ldi	r24, 0x00	; 0
 906:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
	i2c_tx_byte(0x00); 
 90a:	80 e0       	ldi	r24, 0x00	; 0
 90c:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
	i2c_tx_byte(offLowCmnd); 
 910:	81 2f       	mov	r24, r17
 912:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
	i2c_tx_byte(offHighCmnd); 
 916:	8d 2f       	mov	r24, r29
 918:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
	i2c_tx_stop();
 91c:	0e 94 b4 00 	call	0x168	; 0x168 <i2c_tx_stop>
}
 920:	df 91       	pop	r29
 922:	cf 91       	pop	r28
 924:	1f 91       	pop	r17
 926:	08 95       	ret

00000928 <UART_INIT>:
 928:	e0 ec       	ldi	r30, 0xC0	; 192
 92a:	f0 e0       	ldi	r31, 0x00	; 0
 92c:	80 81       	ld	r24, Z
 92e:	82 60       	ori	r24, 0x02	; 2
 930:	80 83       	st	Z, r24
 932:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 936:	8f ec       	ldi	r24, 0xCF	; 207
 938:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 93c:	e2 ec       	ldi	r30, 0xC2	; 194
 93e:	f0 e0       	ldi	r31, 0x00	; 0
 940:	80 81       	ld	r24, Z
 942:	86 60       	ori	r24, 0x06	; 6
 944:	80 83       	st	Z, r24
 946:	e1 ec       	ldi	r30, 0xC1	; 193
 948:	f0 e0       	ldi	r31, 0x00	; 0
 94a:	80 81       	ld	r24, Z
 94c:	80 61       	ori	r24, 0x10	; 16
 94e:	80 83       	st	Z, r24
 950:	80 81       	ld	r24, Z
 952:	88 60       	ori	r24, 0x08	; 8
 954:	80 83       	st	Z, r24
 956:	08 95       	ret

00000958 <UART_receive>:
 958:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 95c:	88 23       	and	r24, r24
 95e:	e4 f7       	brge	.-8      	; 0x958 <UART_receive>
 960:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 964:	08 95       	ret

00000966 <UART_transmit>:
 966:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 96a:	95 ff       	sbrs	r25, 5
 96c:	fc cf       	rjmp	.-8      	; 0x966 <UART_transmit>
 96e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 972:	08 95       	ret

00000974 <UART_printString>:
 974:	0f 93       	push	r16
 976:	1f 93       	push	r17
 978:	cf 93       	push	r28
 97a:	df 93       	push	r29
 97c:	8c 01       	movw	r16, r24
 97e:	c0 e0       	ldi	r28, 0x00	; 0
 980:	d0 e0       	ldi	r29, 0x00	; 0
 982:	03 c0       	rjmp	.+6      	; 0x98a <UART_printString+0x16>
 984:	0e 94 b3 04 	call	0x966	; 0x966 <UART_transmit>
 988:	21 96       	adiw	r28, 0x01	; 1
 98a:	f8 01       	movw	r30, r16
 98c:	ec 0f       	add	r30, r28
 98e:	fd 1f       	adc	r31, r29
 990:	80 81       	ld	r24, Z
 992:	81 11       	cpse	r24, r1
 994:	f7 cf       	rjmp	.-18     	; 0x984 <UART_printString+0x10>
 996:	df 91       	pop	r29
 998:	cf 91       	pop	r28
 99a:	1f 91       	pop	r17
 99c:	0f 91       	pop	r16
 99e:	08 95       	ret

000009a0 <__subsf3>:
 9a0:	50 58       	subi	r21, 0x80	; 128

000009a2 <__addsf3>:
 9a2:	bb 27       	eor	r27, r27
 9a4:	aa 27       	eor	r26, r26
 9a6:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__addsf3x>
 9aa:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__fp_round>
 9ae:	0e 94 24 06 	call	0xc48	; 0xc48 <__fp_pscA>
 9b2:	38 f0       	brcs	.+14     	; 0x9c2 <__addsf3+0x20>
 9b4:	0e 94 2b 06 	call	0xc56	; 0xc56 <__fp_pscB>
 9b8:	20 f0       	brcs	.+8      	; 0x9c2 <__addsf3+0x20>
 9ba:	39 f4       	brne	.+14     	; 0x9ca <__addsf3+0x28>
 9bc:	9f 3f       	cpi	r25, 0xFF	; 255
 9be:	19 f4       	brne	.+6      	; 0x9c6 <__addsf3+0x24>
 9c0:	26 f4       	brtc	.+8      	; 0x9ca <__addsf3+0x28>
 9c2:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__fp_nan>
 9c6:	0e f4       	brtc	.+2      	; 0x9ca <__addsf3+0x28>
 9c8:	e0 95       	com	r30
 9ca:	e7 fb       	bst	r30, 7
 9cc:	0c 94 1b 06 	jmp	0xc36	; 0xc36 <__fp_inf>

000009d0 <__addsf3x>:
 9d0:	e9 2f       	mov	r30, r25
 9d2:	0e 94 43 06 	call	0xc86	; 0xc86 <__fp_split3>
 9d6:	58 f3       	brcs	.-42     	; 0x9ae <__addsf3+0xc>
 9d8:	ba 17       	cp	r27, r26
 9da:	62 07       	cpc	r22, r18
 9dc:	73 07       	cpc	r23, r19
 9de:	84 07       	cpc	r24, r20
 9e0:	95 07       	cpc	r25, r21
 9e2:	20 f0       	brcs	.+8      	; 0x9ec <__addsf3x+0x1c>
 9e4:	79 f4       	brne	.+30     	; 0xa04 <__addsf3x+0x34>
 9e6:	a6 f5       	brtc	.+104    	; 0xa50 <__addsf3x+0x80>
 9e8:	0c 94 65 06 	jmp	0xcca	; 0xcca <__fp_zero>
 9ec:	0e f4       	brtc	.+2      	; 0x9f0 <__addsf3x+0x20>
 9ee:	e0 95       	com	r30
 9f0:	0b 2e       	mov	r0, r27
 9f2:	ba 2f       	mov	r27, r26
 9f4:	a0 2d       	mov	r26, r0
 9f6:	0b 01       	movw	r0, r22
 9f8:	b9 01       	movw	r22, r18
 9fa:	90 01       	movw	r18, r0
 9fc:	0c 01       	movw	r0, r24
 9fe:	ca 01       	movw	r24, r20
 a00:	a0 01       	movw	r20, r0
 a02:	11 24       	eor	r1, r1
 a04:	ff 27       	eor	r31, r31
 a06:	59 1b       	sub	r21, r25
 a08:	99 f0       	breq	.+38     	; 0xa30 <__addsf3x+0x60>
 a0a:	59 3f       	cpi	r21, 0xF9	; 249
 a0c:	50 f4       	brcc	.+20     	; 0xa22 <__addsf3x+0x52>
 a0e:	50 3e       	cpi	r21, 0xE0	; 224
 a10:	68 f1       	brcs	.+90     	; 0xa6c <__addsf3x+0x9c>
 a12:	1a 16       	cp	r1, r26
 a14:	f0 40       	sbci	r31, 0x00	; 0
 a16:	a2 2f       	mov	r26, r18
 a18:	23 2f       	mov	r18, r19
 a1a:	34 2f       	mov	r19, r20
 a1c:	44 27       	eor	r20, r20
 a1e:	58 5f       	subi	r21, 0xF8	; 248
 a20:	f3 cf       	rjmp	.-26     	; 0xa08 <__addsf3x+0x38>
 a22:	46 95       	lsr	r20
 a24:	37 95       	ror	r19
 a26:	27 95       	ror	r18
 a28:	a7 95       	ror	r26
 a2a:	f0 40       	sbci	r31, 0x00	; 0
 a2c:	53 95       	inc	r21
 a2e:	c9 f7       	brne	.-14     	; 0xa22 <__addsf3x+0x52>
 a30:	7e f4       	brtc	.+30     	; 0xa50 <__addsf3x+0x80>
 a32:	1f 16       	cp	r1, r31
 a34:	ba 0b       	sbc	r27, r26
 a36:	62 0b       	sbc	r22, r18
 a38:	73 0b       	sbc	r23, r19
 a3a:	84 0b       	sbc	r24, r20
 a3c:	ba f0       	brmi	.+46     	; 0xa6c <__addsf3x+0x9c>
 a3e:	91 50       	subi	r25, 0x01	; 1
 a40:	a1 f0       	breq	.+40     	; 0xa6a <__addsf3x+0x9a>
 a42:	ff 0f       	add	r31, r31
 a44:	bb 1f       	adc	r27, r27
 a46:	66 1f       	adc	r22, r22
 a48:	77 1f       	adc	r23, r23
 a4a:	88 1f       	adc	r24, r24
 a4c:	c2 f7       	brpl	.-16     	; 0xa3e <__addsf3x+0x6e>
 a4e:	0e c0       	rjmp	.+28     	; 0xa6c <__addsf3x+0x9c>
 a50:	ba 0f       	add	r27, r26
 a52:	62 1f       	adc	r22, r18
 a54:	73 1f       	adc	r23, r19
 a56:	84 1f       	adc	r24, r20
 a58:	48 f4       	brcc	.+18     	; 0xa6c <__addsf3x+0x9c>
 a5a:	87 95       	ror	r24
 a5c:	77 95       	ror	r23
 a5e:	67 95       	ror	r22
 a60:	b7 95       	ror	r27
 a62:	f7 95       	ror	r31
 a64:	9e 3f       	cpi	r25, 0xFE	; 254
 a66:	08 f0       	brcs	.+2      	; 0xa6a <__addsf3x+0x9a>
 a68:	b0 cf       	rjmp	.-160    	; 0x9ca <__addsf3+0x28>
 a6a:	93 95       	inc	r25
 a6c:	88 0f       	add	r24, r24
 a6e:	08 f0       	brcs	.+2      	; 0xa72 <__addsf3x+0xa2>
 a70:	99 27       	eor	r25, r25
 a72:	ee 0f       	add	r30, r30
 a74:	97 95       	ror	r25
 a76:	87 95       	ror	r24
 a78:	08 95       	ret

00000a7a <__divsf3>:
 a7a:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__divsf3x>
 a7e:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__fp_round>
 a82:	0e 94 2b 06 	call	0xc56	; 0xc56 <__fp_pscB>
 a86:	58 f0       	brcs	.+22     	; 0xa9e <__divsf3+0x24>
 a88:	0e 94 24 06 	call	0xc48	; 0xc48 <__fp_pscA>
 a8c:	40 f0       	brcs	.+16     	; 0xa9e <__divsf3+0x24>
 a8e:	29 f4       	brne	.+10     	; 0xa9a <__divsf3+0x20>
 a90:	5f 3f       	cpi	r21, 0xFF	; 255
 a92:	29 f0       	breq	.+10     	; 0xa9e <__divsf3+0x24>
 a94:	0c 94 1b 06 	jmp	0xc36	; 0xc36 <__fp_inf>
 a98:	51 11       	cpse	r21, r1
 a9a:	0c 94 66 06 	jmp	0xccc	; 0xccc <__fp_szero>
 a9e:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__fp_nan>

00000aa2 <__divsf3x>:
 aa2:	0e 94 43 06 	call	0xc86	; 0xc86 <__fp_split3>
 aa6:	68 f3       	brcs	.-38     	; 0xa82 <__divsf3+0x8>

00000aa8 <__divsf3_pse>:
 aa8:	99 23       	and	r25, r25
 aaa:	b1 f3       	breq	.-20     	; 0xa98 <__divsf3+0x1e>
 aac:	55 23       	and	r21, r21
 aae:	91 f3       	breq	.-28     	; 0xa94 <__divsf3+0x1a>
 ab0:	95 1b       	sub	r25, r21
 ab2:	55 0b       	sbc	r21, r21
 ab4:	bb 27       	eor	r27, r27
 ab6:	aa 27       	eor	r26, r26
 ab8:	62 17       	cp	r22, r18
 aba:	73 07       	cpc	r23, r19
 abc:	84 07       	cpc	r24, r20
 abe:	38 f0       	brcs	.+14     	; 0xace <__divsf3_pse+0x26>
 ac0:	9f 5f       	subi	r25, 0xFF	; 255
 ac2:	5f 4f       	sbci	r21, 0xFF	; 255
 ac4:	22 0f       	add	r18, r18
 ac6:	33 1f       	adc	r19, r19
 ac8:	44 1f       	adc	r20, r20
 aca:	aa 1f       	adc	r26, r26
 acc:	a9 f3       	breq	.-22     	; 0xab8 <__divsf3_pse+0x10>
 ace:	35 d0       	rcall	.+106    	; 0xb3a <__divsf3_pse+0x92>
 ad0:	0e 2e       	mov	r0, r30
 ad2:	3a f0       	brmi	.+14     	; 0xae2 <__divsf3_pse+0x3a>
 ad4:	e0 e8       	ldi	r30, 0x80	; 128
 ad6:	32 d0       	rcall	.+100    	; 0xb3c <__divsf3_pse+0x94>
 ad8:	91 50       	subi	r25, 0x01	; 1
 ada:	50 40       	sbci	r21, 0x00	; 0
 adc:	e6 95       	lsr	r30
 ade:	00 1c       	adc	r0, r0
 ae0:	ca f7       	brpl	.-14     	; 0xad4 <__divsf3_pse+0x2c>
 ae2:	2b d0       	rcall	.+86     	; 0xb3a <__divsf3_pse+0x92>
 ae4:	fe 2f       	mov	r31, r30
 ae6:	29 d0       	rcall	.+82     	; 0xb3a <__divsf3_pse+0x92>
 ae8:	66 0f       	add	r22, r22
 aea:	77 1f       	adc	r23, r23
 aec:	88 1f       	adc	r24, r24
 aee:	bb 1f       	adc	r27, r27
 af0:	26 17       	cp	r18, r22
 af2:	37 07       	cpc	r19, r23
 af4:	48 07       	cpc	r20, r24
 af6:	ab 07       	cpc	r26, r27
 af8:	b0 e8       	ldi	r27, 0x80	; 128
 afa:	09 f0       	breq	.+2      	; 0xafe <__divsf3_pse+0x56>
 afc:	bb 0b       	sbc	r27, r27
 afe:	80 2d       	mov	r24, r0
 b00:	bf 01       	movw	r22, r30
 b02:	ff 27       	eor	r31, r31
 b04:	93 58       	subi	r25, 0x83	; 131
 b06:	5f 4f       	sbci	r21, 0xFF	; 255
 b08:	3a f0       	brmi	.+14     	; 0xb18 <__divsf3_pse+0x70>
 b0a:	9e 3f       	cpi	r25, 0xFE	; 254
 b0c:	51 05       	cpc	r21, r1
 b0e:	78 f0       	brcs	.+30     	; 0xb2e <__divsf3_pse+0x86>
 b10:	0c 94 1b 06 	jmp	0xc36	; 0xc36 <__fp_inf>
 b14:	0c 94 66 06 	jmp	0xccc	; 0xccc <__fp_szero>
 b18:	5f 3f       	cpi	r21, 0xFF	; 255
 b1a:	e4 f3       	brlt	.-8      	; 0xb14 <__divsf3_pse+0x6c>
 b1c:	98 3e       	cpi	r25, 0xE8	; 232
 b1e:	d4 f3       	brlt	.-12     	; 0xb14 <__divsf3_pse+0x6c>
 b20:	86 95       	lsr	r24
 b22:	77 95       	ror	r23
 b24:	67 95       	ror	r22
 b26:	b7 95       	ror	r27
 b28:	f7 95       	ror	r31
 b2a:	9f 5f       	subi	r25, 0xFF	; 255
 b2c:	c9 f7       	brne	.-14     	; 0xb20 <__divsf3_pse+0x78>
 b2e:	88 0f       	add	r24, r24
 b30:	91 1d       	adc	r25, r1
 b32:	96 95       	lsr	r25
 b34:	87 95       	ror	r24
 b36:	97 f9       	bld	r25, 7
 b38:	08 95       	ret
 b3a:	e1 e0       	ldi	r30, 0x01	; 1
 b3c:	66 0f       	add	r22, r22
 b3e:	77 1f       	adc	r23, r23
 b40:	88 1f       	adc	r24, r24
 b42:	bb 1f       	adc	r27, r27
 b44:	62 17       	cp	r22, r18
 b46:	73 07       	cpc	r23, r19
 b48:	84 07       	cpc	r24, r20
 b4a:	ba 07       	cpc	r27, r26
 b4c:	20 f0       	brcs	.+8      	; 0xb56 <__divsf3_pse+0xae>
 b4e:	62 1b       	sub	r22, r18
 b50:	73 0b       	sbc	r23, r19
 b52:	84 0b       	sbc	r24, r20
 b54:	ba 0b       	sbc	r27, r26
 b56:	ee 1f       	adc	r30, r30
 b58:	88 f7       	brcc	.-30     	; 0xb3c <__divsf3_pse+0x94>
 b5a:	e0 95       	com	r30
 b5c:	08 95       	ret

00000b5e <__fixunssfsi>:
 b5e:	0e 94 4b 06 	call	0xc96	; 0xc96 <__fp_splitA>
 b62:	88 f0       	brcs	.+34     	; 0xb86 <__fixunssfsi+0x28>
 b64:	9f 57       	subi	r25, 0x7F	; 127
 b66:	98 f0       	brcs	.+38     	; 0xb8e <__fixunssfsi+0x30>
 b68:	b9 2f       	mov	r27, r25
 b6a:	99 27       	eor	r25, r25
 b6c:	b7 51       	subi	r27, 0x17	; 23
 b6e:	b0 f0       	brcs	.+44     	; 0xb9c <__fixunssfsi+0x3e>
 b70:	e1 f0       	breq	.+56     	; 0xbaa <__fixunssfsi+0x4c>
 b72:	66 0f       	add	r22, r22
 b74:	77 1f       	adc	r23, r23
 b76:	88 1f       	adc	r24, r24
 b78:	99 1f       	adc	r25, r25
 b7a:	1a f0       	brmi	.+6      	; 0xb82 <__fixunssfsi+0x24>
 b7c:	ba 95       	dec	r27
 b7e:	c9 f7       	brne	.-14     	; 0xb72 <__fixunssfsi+0x14>
 b80:	14 c0       	rjmp	.+40     	; 0xbaa <__fixunssfsi+0x4c>
 b82:	b1 30       	cpi	r27, 0x01	; 1
 b84:	91 f0       	breq	.+36     	; 0xbaa <__fixunssfsi+0x4c>
 b86:	0e 94 65 06 	call	0xcca	; 0xcca <__fp_zero>
 b8a:	b1 e0       	ldi	r27, 0x01	; 1
 b8c:	08 95       	ret
 b8e:	0c 94 65 06 	jmp	0xcca	; 0xcca <__fp_zero>
 b92:	67 2f       	mov	r22, r23
 b94:	78 2f       	mov	r23, r24
 b96:	88 27       	eor	r24, r24
 b98:	b8 5f       	subi	r27, 0xF8	; 248
 b9a:	39 f0       	breq	.+14     	; 0xbaa <__fixunssfsi+0x4c>
 b9c:	b9 3f       	cpi	r27, 0xF9	; 249
 b9e:	cc f3       	brlt	.-14     	; 0xb92 <__fixunssfsi+0x34>
 ba0:	86 95       	lsr	r24
 ba2:	77 95       	ror	r23
 ba4:	67 95       	ror	r22
 ba6:	b3 95       	inc	r27
 ba8:	d9 f7       	brne	.-10     	; 0xba0 <__fixunssfsi+0x42>
 baa:	3e f4       	brtc	.+14     	; 0xbba <__fixunssfsi+0x5c>
 bac:	90 95       	com	r25
 bae:	80 95       	com	r24
 bb0:	70 95       	com	r23
 bb2:	61 95       	neg	r22
 bb4:	7f 4f       	sbci	r23, 0xFF	; 255
 bb6:	8f 4f       	sbci	r24, 0xFF	; 255
 bb8:	9f 4f       	sbci	r25, 0xFF	; 255
 bba:	08 95       	ret

00000bbc <__floatunsisf>:
 bbc:	e8 94       	clt
 bbe:	09 c0       	rjmp	.+18     	; 0xbd2 <__floatsisf+0x12>

00000bc0 <__floatsisf>:
 bc0:	97 fb       	bst	r25, 7
 bc2:	3e f4       	brtc	.+14     	; 0xbd2 <__floatsisf+0x12>
 bc4:	90 95       	com	r25
 bc6:	80 95       	com	r24
 bc8:	70 95       	com	r23
 bca:	61 95       	neg	r22
 bcc:	7f 4f       	sbci	r23, 0xFF	; 255
 bce:	8f 4f       	sbci	r24, 0xFF	; 255
 bd0:	9f 4f       	sbci	r25, 0xFF	; 255
 bd2:	99 23       	and	r25, r25
 bd4:	a9 f0       	breq	.+42     	; 0xc00 <__floatsisf+0x40>
 bd6:	f9 2f       	mov	r31, r25
 bd8:	96 e9       	ldi	r25, 0x96	; 150
 bda:	bb 27       	eor	r27, r27
 bdc:	93 95       	inc	r25
 bde:	f6 95       	lsr	r31
 be0:	87 95       	ror	r24
 be2:	77 95       	ror	r23
 be4:	67 95       	ror	r22
 be6:	b7 95       	ror	r27
 be8:	f1 11       	cpse	r31, r1
 bea:	f8 cf       	rjmp	.-16     	; 0xbdc <__floatsisf+0x1c>
 bec:	fa f4       	brpl	.+62     	; 0xc2c <__floatsisf+0x6c>
 bee:	bb 0f       	add	r27, r27
 bf0:	11 f4       	brne	.+4      	; 0xbf6 <__floatsisf+0x36>
 bf2:	60 ff       	sbrs	r22, 0
 bf4:	1b c0       	rjmp	.+54     	; 0xc2c <__floatsisf+0x6c>
 bf6:	6f 5f       	subi	r22, 0xFF	; 255
 bf8:	7f 4f       	sbci	r23, 0xFF	; 255
 bfa:	8f 4f       	sbci	r24, 0xFF	; 255
 bfc:	9f 4f       	sbci	r25, 0xFF	; 255
 bfe:	16 c0       	rjmp	.+44     	; 0xc2c <__floatsisf+0x6c>
 c00:	88 23       	and	r24, r24
 c02:	11 f0       	breq	.+4      	; 0xc08 <__floatsisf+0x48>
 c04:	96 e9       	ldi	r25, 0x96	; 150
 c06:	11 c0       	rjmp	.+34     	; 0xc2a <__floatsisf+0x6a>
 c08:	77 23       	and	r23, r23
 c0a:	21 f0       	breq	.+8      	; 0xc14 <__floatsisf+0x54>
 c0c:	9e e8       	ldi	r25, 0x8E	; 142
 c0e:	87 2f       	mov	r24, r23
 c10:	76 2f       	mov	r23, r22
 c12:	05 c0       	rjmp	.+10     	; 0xc1e <__floatsisf+0x5e>
 c14:	66 23       	and	r22, r22
 c16:	71 f0       	breq	.+28     	; 0xc34 <__floatsisf+0x74>
 c18:	96 e8       	ldi	r25, 0x86	; 134
 c1a:	86 2f       	mov	r24, r22
 c1c:	70 e0       	ldi	r23, 0x00	; 0
 c1e:	60 e0       	ldi	r22, 0x00	; 0
 c20:	2a f0       	brmi	.+10     	; 0xc2c <__floatsisf+0x6c>
 c22:	9a 95       	dec	r25
 c24:	66 0f       	add	r22, r22
 c26:	77 1f       	adc	r23, r23
 c28:	88 1f       	adc	r24, r24
 c2a:	da f7       	brpl	.-10     	; 0xc22 <__floatsisf+0x62>
 c2c:	88 0f       	add	r24, r24
 c2e:	96 95       	lsr	r25
 c30:	87 95       	ror	r24
 c32:	97 f9       	bld	r25, 7
 c34:	08 95       	ret

00000c36 <__fp_inf>:
 c36:	97 f9       	bld	r25, 7
 c38:	9f 67       	ori	r25, 0x7F	; 127
 c3a:	80 e8       	ldi	r24, 0x80	; 128
 c3c:	70 e0       	ldi	r23, 0x00	; 0
 c3e:	60 e0       	ldi	r22, 0x00	; 0
 c40:	08 95       	ret

00000c42 <__fp_nan>:
 c42:	9f ef       	ldi	r25, 0xFF	; 255
 c44:	80 ec       	ldi	r24, 0xC0	; 192
 c46:	08 95       	ret

00000c48 <__fp_pscA>:
 c48:	00 24       	eor	r0, r0
 c4a:	0a 94       	dec	r0
 c4c:	16 16       	cp	r1, r22
 c4e:	17 06       	cpc	r1, r23
 c50:	18 06       	cpc	r1, r24
 c52:	09 06       	cpc	r0, r25
 c54:	08 95       	ret

00000c56 <__fp_pscB>:
 c56:	00 24       	eor	r0, r0
 c58:	0a 94       	dec	r0
 c5a:	12 16       	cp	r1, r18
 c5c:	13 06       	cpc	r1, r19
 c5e:	14 06       	cpc	r1, r20
 c60:	05 06       	cpc	r0, r21
 c62:	08 95       	ret

00000c64 <__fp_round>:
 c64:	09 2e       	mov	r0, r25
 c66:	03 94       	inc	r0
 c68:	00 0c       	add	r0, r0
 c6a:	11 f4       	brne	.+4      	; 0xc70 <__fp_round+0xc>
 c6c:	88 23       	and	r24, r24
 c6e:	52 f0       	brmi	.+20     	; 0xc84 <__fp_round+0x20>
 c70:	bb 0f       	add	r27, r27
 c72:	40 f4       	brcc	.+16     	; 0xc84 <__fp_round+0x20>
 c74:	bf 2b       	or	r27, r31
 c76:	11 f4       	brne	.+4      	; 0xc7c <__fp_round+0x18>
 c78:	60 ff       	sbrs	r22, 0
 c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__fp_round+0x20>
 c7c:	6f 5f       	subi	r22, 0xFF	; 255
 c7e:	7f 4f       	sbci	r23, 0xFF	; 255
 c80:	8f 4f       	sbci	r24, 0xFF	; 255
 c82:	9f 4f       	sbci	r25, 0xFF	; 255
 c84:	08 95       	ret

00000c86 <__fp_split3>:
 c86:	57 fd       	sbrc	r21, 7
 c88:	90 58       	subi	r25, 0x80	; 128
 c8a:	44 0f       	add	r20, r20
 c8c:	55 1f       	adc	r21, r21
 c8e:	59 f0       	breq	.+22     	; 0xca6 <__fp_splitA+0x10>
 c90:	5f 3f       	cpi	r21, 0xFF	; 255
 c92:	71 f0       	breq	.+28     	; 0xcb0 <__fp_splitA+0x1a>
 c94:	47 95       	ror	r20

00000c96 <__fp_splitA>:
 c96:	88 0f       	add	r24, r24
 c98:	97 fb       	bst	r25, 7
 c9a:	99 1f       	adc	r25, r25
 c9c:	61 f0       	breq	.+24     	; 0xcb6 <__fp_splitA+0x20>
 c9e:	9f 3f       	cpi	r25, 0xFF	; 255
 ca0:	79 f0       	breq	.+30     	; 0xcc0 <__fp_splitA+0x2a>
 ca2:	87 95       	ror	r24
 ca4:	08 95       	ret
 ca6:	12 16       	cp	r1, r18
 ca8:	13 06       	cpc	r1, r19
 caa:	14 06       	cpc	r1, r20
 cac:	55 1f       	adc	r21, r21
 cae:	f2 cf       	rjmp	.-28     	; 0xc94 <__fp_split3+0xe>
 cb0:	46 95       	lsr	r20
 cb2:	f1 df       	rcall	.-30     	; 0xc96 <__fp_splitA>
 cb4:	08 c0       	rjmp	.+16     	; 0xcc6 <__fp_splitA+0x30>
 cb6:	16 16       	cp	r1, r22
 cb8:	17 06       	cpc	r1, r23
 cba:	18 06       	cpc	r1, r24
 cbc:	99 1f       	adc	r25, r25
 cbe:	f1 cf       	rjmp	.-30     	; 0xca2 <__fp_splitA+0xc>
 cc0:	86 95       	lsr	r24
 cc2:	71 05       	cpc	r23, r1
 cc4:	61 05       	cpc	r22, r1
 cc6:	08 94       	sec
 cc8:	08 95       	ret

00000cca <__fp_zero>:
 cca:	e8 94       	clt

00000ccc <__fp_szero>:
 ccc:	bb 27       	eor	r27, r27
 cce:	66 27       	eor	r22, r22
 cd0:	77 27       	eor	r23, r23
 cd2:	cb 01       	movw	r24, r22
 cd4:	97 f9       	bld	r25, 7
 cd6:	08 95       	ret

00000cd8 <__mulsf3>:
 cd8:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__mulsf3x>
 cdc:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__fp_round>
 ce0:	0e 94 24 06 	call	0xc48	; 0xc48 <__fp_pscA>
 ce4:	38 f0       	brcs	.+14     	; 0xcf4 <__mulsf3+0x1c>
 ce6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__fp_pscB>
 cea:	20 f0       	brcs	.+8      	; 0xcf4 <__mulsf3+0x1c>
 cec:	95 23       	and	r25, r21
 cee:	11 f0       	breq	.+4      	; 0xcf4 <__mulsf3+0x1c>
 cf0:	0c 94 1b 06 	jmp	0xc36	; 0xc36 <__fp_inf>
 cf4:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__fp_nan>
 cf8:	11 24       	eor	r1, r1
 cfa:	0c 94 66 06 	jmp	0xccc	; 0xccc <__fp_szero>

00000cfe <__mulsf3x>:
 cfe:	0e 94 43 06 	call	0xc86	; 0xc86 <__fp_split3>
 d02:	70 f3       	brcs	.-36     	; 0xce0 <__mulsf3+0x8>

00000d04 <__mulsf3_pse>:
 d04:	95 9f       	mul	r25, r21
 d06:	c1 f3       	breq	.-16     	; 0xcf8 <__mulsf3+0x20>
 d08:	95 0f       	add	r25, r21
 d0a:	50 e0       	ldi	r21, 0x00	; 0
 d0c:	55 1f       	adc	r21, r21
 d0e:	62 9f       	mul	r22, r18
 d10:	f0 01       	movw	r30, r0
 d12:	72 9f       	mul	r23, r18
 d14:	bb 27       	eor	r27, r27
 d16:	f0 0d       	add	r31, r0
 d18:	b1 1d       	adc	r27, r1
 d1a:	63 9f       	mul	r22, r19
 d1c:	aa 27       	eor	r26, r26
 d1e:	f0 0d       	add	r31, r0
 d20:	b1 1d       	adc	r27, r1
 d22:	aa 1f       	adc	r26, r26
 d24:	64 9f       	mul	r22, r20
 d26:	66 27       	eor	r22, r22
 d28:	b0 0d       	add	r27, r0
 d2a:	a1 1d       	adc	r26, r1
 d2c:	66 1f       	adc	r22, r22
 d2e:	82 9f       	mul	r24, r18
 d30:	22 27       	eor	r18, r18
 d32:	b0 0d       	add	r27, r0
 d34:	a1 1d       	adc	r26, r1
 d36:	62 1f       	adc	r22, r18
 d38:	73 9f       	mul	r23, r19
 d3a:	b0 0d       	add	r27, r0
 d3c:	a1 1d       	adc	r26, r1
 d3e:	62 1f       	adc	r22, r18
 d40:	83 9f       	mul	r24, r19
 d42:	a0 0d       	add	r26, r0
 d44:	61 1d       	adc	r22, r1
 d46:	22 1f       	adc	r18, r18
 d48:	74 9f       	mul	r23, r20
 d4a:	33 27       	eor	r19, r19
 d4c:	a0 0d       	add	r26, r0
 d4e:	61 1d       	adc	r22, r1
 d50:	23 1f       	adc	r18, r19
 d52:	84 9f       	mul	r24, r20
 d54:	60 0d       	add	r22, r0
 d56:	21 1d       	adc	r18, r1
 d58:	82 2f       	mov	r24, r18
 d5a:	76 2f       	mov	r23, r22
 d5c:	6a 2f       	mov	r22, r26
 d5e:	11 24       	eor	r1, r1
 d60:	9f 57       	subi	r25, 0x7F	; 127
 d62:	50 40       	sbci	r21, 0x00	; 0
 d64:	9a f0       	brmi	.+38     	; 0xd8c <__mulsf3_pse+0x88>
 d66:	f1 f0       	breq	.+60     	; 0xda4 <__mulsf3_pse+0xa0>
 d68:	88 23       	and	r24, r24
 d6a:	4a f0       	brmi	.+18     	; 0xd7e <__mulsf3_pse+0x7a>
 d6c:	ee 0f       	add	r30, r30
 d6e:	ff 1f       	adc	r31, r31
 d70:	bb 1f       	adc	r27, r27
 d72:	66 1f       	adc	r22, r22
 d74:	77 1f       	adc	r23, r23
 d76:	88 1f       	adc	r24, r24
 d78:	91 50       	subi	r25, 0x01	; 1
 d7a:	50 40       	sbci	r21, 0x00	; 0
 d7c:	a9 f7       	brne	.-22     	; 0xd68 <__mulsf3_pse+0x64>
 d7e:	9e 3f       	cpi	r25, 0xFE	; 254
 d80:	51 05       	cpc	r21, r1
 d82:	80 f0       	brcs	.+32     	; 0xda4 <__mulsf3_pse+0xa0>
 d84:	0c 94 1b 06 	jmp	0xc36	; 0xc36 <__fp_inf>
 d88:	0c 94 66 06 	jmp	0xccc	; 0xccc <__fp_szero>
 d8c:	5f 3f       	cpi	r21, 0xFF	; 255
 d8e:	e4 f3       	brlt	.-8      	; 0xd88 <__mulsf3_pse+0x84>
 d90:	98 3e       	cpi	r25, 0xE8	; 232
 d92:	d4 f3       	brlt	.-12     	; 0xd88 <__mulsf3_pse+0x84>
 d94:	86 95       	lsr	r24
 d96:	77 95       	ror	r23
 d98:	67 95       	ror	r22
 d9a:	b7 95       	ror	r27
 d9c:	f7 95       	ror	r31
 d9e:	e7 95       	ror	r30
 da0:	9f 5f       	subi	r25, 0xFF	; 255
 da2:	c1 f7       	brne	.-16     	; 0xd94 <__mulsf3_pse+0x90>
 da4:	fe 2b       	or	r31, r30
 da6:	88 0f       	add	r24, r24
 da8:	91 1d       	adc	r25, r1
 daa:	96 95       	lsr	r25
 dac:	87 95       	ror	r24
 dae:	97 f9       	bld	r25, 7
 db0:	08 95       	ret

00000db2 <strcmp>:
 db2:	fb 01       	movw	r30, r22
 db4:	dc 01       	movw	r26, r24
 db6:	8d 91       	ld	r24, X+
 db8:	01 90       	ld	r0, Z+
 dba:	80 19       	sub	r24, r0
 dbc:	01 10       	cpse	r0, r1
 dbe:	d9 f3       	breq	.-10     	; 0xdb6 <strcmp+0x4>
 dc0:	99 0b       	sbc	r25, r25
 dc2:	08 95       	ret

00000dc4 <strcpy>:
 dc4:	fb 01       	movw	r30, r22
 dc6:	dc 01       	movw	r26, r24
 dc8:	01 90       	ld	r0, Z+
 dca:	0d 92       	st	X+, r0
 dcc:	00 20       	and	r0, r0
 dce:	e1 f7       	brne	.-8      	; 0xdc8 <strcpy+0x4>
 dd0:	08 95       	ret

00000dd2 <_exit>:
 dd2:	f8 94       	cli

00000dd4 <__stop_program>:
 dd4:	ff cf       	rjmp	.-2      	; 0xdd4 <__stop_program>
