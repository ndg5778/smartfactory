
robot_arm_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000296  0000032a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000296  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002d  00800126  00800126  00000350  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c94  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e3  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005a5  00000000  00000000  000018af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  00001e54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000485  00000000  00000000  00001f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000046e  00000000  00000000  00002405  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002873  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e9       	ldi	r30, 0x96	; 150
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 32       	cpi	r26, 0x26	; 38
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e2       	ldi	r26, 0x26	; 38
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 35       	cpi	r26, 0x53	; 83
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 bb 00 	call	0x176	; 0x176 <main>
  9e:	0c 94 49 01 	jmp	0x292	; 0x292 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <UART_INIT>:
  a6:	e0 ec       	ldi	r30, 0xC0	; 192
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	80 83       	st	Z, r24
  b0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  b4:	8f ec       	ldi	r24, 0xCF	; 207
  b6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  ba:	e2 ec       	ldi	r30, 0xC2	; 194
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	86 60       	ori	r24, 0x06	; 6
  c2:	80 83       	st	Z, r24
  c4:	e1 ec       	ldi	r30, 0xC1	; 193
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	80 61       	ori	r24, 0x10	; 16
  cc:	80 83       	st	Z, r24
  ce:	80 81       	ld	r24, Z
  d0:	88 60       	ori	r24, 0x08	; 8
  d2:	80 83       	st	Z, r24
  d4:	08 95       	ret

000000d6 <UART_receive>:
  d6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  da:	88 23       	and	r24, r24
  dc:	e4 f7       	brge	.-8      	; 0xd6 <UART_receive>
  de:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  e2:	08 95       	ret

000000e4 <UART_transmit>:
  e4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  e8:	95 ff       	sbrs	r25, 5
  ea:	fc cf       	rjmp	.-8      	; 0xe4 <UART_transmit>
  ec:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  f0:	08 95       	ret

000000f2 <UART_printString>:
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	8c 01       	movw	r16, r24
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	03 c0       	rjmp	.+6      	; 0x108 <UART_printString+0x16>
 102:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_transmit>
 106:	21 96       	adiw	r28, 0x01	; 1
 108:	f8 01       	movw	r30, r16
 10a:	ec 0f       	add	r30, r28
 10c:	fd 1f       	adc	r31, r29
 10e:	80 81       	ld	r24, Z
 110:	81 11       	cpse	r24, r1
 112:	f7 cf       	rjmp	.-18     	; 0x102 <UART_printString+0x10>
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	1f 91       	pop	r17
 11a:	0f 91       	pop	r16
 11c:	08 95       	ret

0000011e <uart_RasToAt>:

	return 0;
}

void uart_RasToAt(){
	data = UART_receive();	// 데이터 수신
 11e:	0e 94 6b 00 	call	0xd6	; 0xd6 <UART_receive>
 122:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <data>
	if (data != ""){
 126:	28 2f       	mov	r18, r24
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	27 50       	subi	r18, 0x07	; 7
 12c:	31 40       	sbci	r19, 0x01	; 1
 12e:	11 f1       	breq	.+68     	; 0x174 <uart_RasToAt+0x56>
		if(data == TERMINATOR) {	// 종료 문자를 수신한 경우
 130:	84 32       	cpi	r24, 0x24	; 36
 132:	91 f4       	brne	.+36     	; 0x158 <uart_RasToAt+0x3a>
			buffer[index] = '\0';
 134:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <index>
 138:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <index+0x1>
 13c:	ea 5d       	subi	r30, 0xDA	; 218
 13e:	fe 4f       	sbci	r31, 0xFE	; 254
 140:	10 82       	st	Z, r1
			process_data = 1;		// 수신 문자열 처리 지시
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <process_data+0x1>
 14a:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <process_data>
			index = 0;
 14e:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <index+0x1>
 152:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <index>
 156:	08 95       	ret
		}
		else {
			buffer[index] = data;	// 수신 버퍼에 저장
 158:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <index>
 15c:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <index+0x1>
 160:	f9 01       	movw	r30, r18
 162:	ea 5d       	subi	r30, 0xDA	; 218
 164:	fe 4f       	sbci	r31, 0xFE	; 254
 166:	80 83       	st	Z, r24
			index++;
 168:	2f 5f       	subi	r18, 0xFF	; 255
 16a:	3f 4f       	sbci	r19, 0xFF	; 255
 16c:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <index+0x1>
 170:	20 93 3c 01 	sts	0x013C, r18	; 0x80013c <index>
 174:	08 95       	ret

00000176 <main>:
char buffer_data[20];
char data;					// 수신 데이터


int main(int argc, char *argv[])
{
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
	UART_INIT();
 17a:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_INIT>
	
	int pass = 0;
 17e:	c0 e0       	ldi	r28, 0x00	; 0
 180:	d0 e0       	ldi	r29, 0x00	; 0
	
	while (pass == 0){
 182:	76 c0       	rjmp	.+236    	; 0x270 <main+0xfa>
		UART_printString("hello");
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	0e 94 79 00 	call	0xf2	; 0xf2 <UART_printString>
		UART_printString("\n");
 18c:	86 e0       	ldi	r24, 0x06	; 6
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	0e 94 79 00 	call	0xf2	; 0xf2 <UART_printString>
		
		uart_RasToAt();
 194:	0e 94 8f 00 	call	0x11e	; 0x11e <uart_RasToAt>
		
		if ((strcmp(buffer_data, "0") == 0) || (strcmp(buffer_data, "1") == 0) || (strcmp(buffer_data, "2") == 0) || (strcmp(buffer_data, "3") == 0) || (strcmp(buffer_data, "4") == 0) || (strcmp(buffer_data, "5") == 0) || (strcmp(buffer_data, "6") == 0) || (strcmp(buffer_data, "7") == 0) || (strcmp(buffer_data, "8") == 0)){
 198:	68 e0       	ldi	r22, 0x08	; 8
 19a:	71 e0       	ldi	r23, 0x01	; 1
 19c:	8f e3       	ldi	r24, 0x3F	; 63
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	0e 94 40 01 	call	0x280	; 0x280 <strcmp>
 1a4:	89 2b       	or	r24, r25
 1a6:	09 f4       	brne	.+2      	; 0x1aa <main+0x34>
 1a8:	40 c0       	rjmp	.+128    	; 0x22a <main+0xb4>
 1aa:	6a e0       	ldi	r22, 0x0A	; 10
 1ac:	71 e0       	ldi	r23, 0x01	; 1
 1ae:	8f e3       	ldi	r24, 0x3F	; 63
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	0e 94 40 01 	call	0x280	; 0x280 <strcmp>
 1b6:	89 2b       	or	r24, r25
 1b8:	c1 f1       	breq	.+112    	; 0x22a <main+0xb4>
 1ba:	6c e0       	ldi	r22, 0x0C	; 12
 1bc:	71 e0       	ldi	r23, 0x01	; 1
 1be:	8f e3       	ldi	r24, 0x3F	; 63
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	0e 94 40 01 	call	0x280	; 0x280 <strcmp>
 1c6:	89 2b       	or	r24, r25
 1c8:	81 f1       	breq	.+96     	; 0x22a <main+0xb4>
 1ca:	6e e0       	ldi	r22, 0x0E	; 14
 1cc:	71 e0       	ldi	r23, 0x01	; 1
 1ce:	8f e3       	ldi	r24, 0x3F	; 63
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	0e 94 40 01 	call	0x280	; 0x280 <strcmp>
 1d6:	89 2b       	or	r24, r25
 1d8:	41 f1       	breq	.+80     	; 0x22a <main+0xb4>
 1da:	60 e1       	ldi	r22, 0x10	; 16
 1dc:	71 e0       	ldi	r23, 0x01	; 1
 1de:	8f e3       	ldi	r24, 0x3F	; 63
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 40 01 	call	0x280	; 0x280 <strcmp>
 1e6:	89 2b       	or	r24, r25
 1e8:	01 f1       	breq	.+64     	; 0x22a <main+0xb4>
 1ea:	62 e1       	ldi	r22, 0x12	; 18
 1ec:	71 e0       	ldi	r23, 0x01	; 1
 1ee:	8f e3       	ldi	r24, 0x3F	; 63
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	0e 94 40 01 	call	0x280	; 0x280 <strcmp>
 1f6:	89 2b       	or	r24, r25
 1f8:	c1 f0       	breq	.+48     	; 0x22a <main+0xb4>
 1fa:	64 e1       	ldi	r22, 0x14	; 20
 1fc:	71 e0       	ldi	r23, 0x01	; 1
 1fe:	8f e3       	ldi	r24, 0x3F	; 63
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	0e 94 40 01 	call	0x280	; 0x280 <strcmp>
 206:	89 2b       	or	r24, r25
 208:	81 f0       	breq	.+32     	; 0x22a <main+0xb4>
 20a:	66 e1       	ldi	r22, 0x16	; 22
 20c:	71 e0       	ldi	r23, 0x01	; 1
 20e:	8f e3       	ldi	r24, 0x3F	; 63
 210:	91 e0       	ldi	r25, 0x01	; 1
 212:	0e 94 40 01 	call	0x280	; 0x280 <strcmp>
 216:	89 2b       	or	r24, r25
 218:	41 f0       	breq	.+16     	; 0x22a <main+0xb4>
 21a:	68 e1       	ldi	r22, 0x18	; 24
 21c:	71 e0       	ldi	r23, 0x01	; 1
 21e:	8f e3       	ldi	r24, 0x3F	; 63
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	0e 94 40 01 	call	0x280	; 0x280 <strcmp>
 226:	89 2b       	or	r24, r25
 228:	59 f4       	brne	.+22     	; 0x240 <main+0xca>
			UART_printString("pass");
 22a:	8a e1       	ldi	r24, 0x1A	; 26
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	0e 94 79 00 	call	0xf2	; 0xf2 <UART_printString>
			UART_printString("\n");
 232:	86 e0       	ldi	r24, 0x06	; 6
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	0e 94 79 00 	call	0xf2	; 0xf2 <UART_printString>
			//UART_transmit(buffer_data);
			pass = 1;
 23a:	c1 e0       	ldi	r28, 0x01	; 1
 23c:	d0 e0       	ldi	r29, 0x00	; 0
 23e:	18 c0       	rjmp	.+48     	; 0x270 <main+0xfa>
		}
		else if (strcmp(buffer, "9") == 0) {
 240:	6f e1       	ldi	r22, 0x1F	; 31
 242:	71 e0       	ldi	r23, 0x01	; 1
 244:	86 e2       	ldi	r24, 0x26	; 38
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	0e 94 40 01 	call	0x280	; 0x280 <strcmp>
 24c:	89 2b       	or	r24, r25
 24e:	81 f4       	brne	.+32     	; 0x270 <main+0xfa>
			UART_printString("end");
 250:	81 e2       	ldi	r24, 0x21	; 33
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	0e 94 79 00 	call	0xf2	; 0xf2 <UART_printString>
			UART_printString(buffer);
 258:	86 e2       	ldi	r24, 0x26	; 38
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	0e 94 79 00 	call	0xf2	; 0xf2 <UART_printString>
			UART_printString("\n");
 260:	86 e0       	ldi	r24, 0x06	; 6
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	0e 94 79 00 	call	0xf2	; 0xf2 <UART_printString>
			PORTB &= ~(1 << LED1);
 268:	85 b1       	in	r24, 0x05	; 5
 26a:	8e 7f       	andi	r24, 0xFE	; 254
 26c:	85 b9       	out	0x05, r24	; 5
			return 0;
 26e:	03 c0       	rjmp	.+6      	; 0x276 <main+0x100>
{
	UART_INIT();
	
	int pass = 0;
	
	while (pass == 0){
 270:	20 97       	sbiw	r28, 0x00	; 0
 272:	09 f4       	brne	.+2      	; 0x276 <main+0x100>
 274:	87 cf       	rjmp	.-242    	; 0x184 <main+0xe>
	
	
	

	return 0;
}
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	08 95       	ret

00000280 <strcmp>:
 280:	fb 01       	movw	r30, r22
 282:	dc 01       	movw	r26, r24
 284:	8d 91       	ld	r24, X+
 286:	01 90       	ld	r0, Z+
 288:	80 19       	sub	r24, r0
 28a:	01 10       	cpse	r0, r1
 28c:	d9 f3       	breq	.-10     	; 0x284 <strcmp+0x4>
 28e:	99 0b       	sbc	r25, r25
 290:	08 95       	ret

00000292 <_exit>:
 292:	f8 94       	cli

00000294 <__stop_program>:
 294:	ff cf       	rjmp	.-2      	; 0x294 <__stop_program>
