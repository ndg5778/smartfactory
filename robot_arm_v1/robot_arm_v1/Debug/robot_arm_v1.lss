
robot_arm_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002b8  00800100  00000de6  00000e7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000de6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000031  008003b8  008003b8  00001132  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001132  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001164  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  000011a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001cdc  00000000  00000000  000012dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ba4  00000000  00000000  00002fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f21  00000000  00000000  00003b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000338  00000000  00000000  00004a80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b9  00000000  00000000  00004db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000103f  00000000  00000000  00005471  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  000064b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	13 e0       	ldi	r17, 0x03	; 3
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ee       	ldi	r30, 0xE6	; 230
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 3b       	cpi	r26, 0xB8	; 184
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	a8 eb       	ldi	r26, 0xB8	; 184
  8e:	b3 e0       	ldi	r27, 0x03	; 3
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 3e       	cpi	r26, 0xE9	; 233
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 50 03 	call	0x6a0	; 0x6a0 <main>
  9e:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_init>:
  a6:	e9 eb       	ldi	r30, 0xB9	; 185
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8c 7f       	andi	r24, 0xFC	; 252
  ae:	80 83       	st	Z, r24
  b0:	88 e4       	ldi	r24, 0x48	; 72
  b2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  b6:	08 95       	ret

000000b8 <i2c_tx_start>:
  b8:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <__data_end>
  bc:	ec eb       	ldi	r30, 0xBC	; 188
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	84 6a       	ori	r24, 0xA4	; 164
  c4:	80 83       	st	Z, r24
  c6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ca:	88 23       	and	r24, r24
  cc:	e4 f7       	brge	.-8      	; 0xc6 <i2c_tx_start+0xe>
  ce:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  d2:	88 7f       	andi	r24, 0xF8	; 248
  d4:	88 30       	cpi	r24, 0x08	; 8
  d6:	11 f0       	breq	.+4      	; 0xdc <i2c_tx_start+0x24>
  d8:	80 31       	cpi	r24, 0x10	; 16
  da:	11 f4       	brne	.+4      	; 0xe0 <i2c_tx_start+0x28>
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	08 95       	ret
  e0:	8e ef       	ldi	r24, 0xFE	; 254
  e2:	08 95       	ret

000000e4 <i2c_tx_address>:
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	90 91 b8 03 	lds	r25, 0x03B8	; 0x8003b8 <__data_end>
  ee:	89 2b       	or	r24, r25
  f0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  f4:	ec eb       	ldi	r30, 0xBC	; 188
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	8f 7d       	andi	r24, 0xDF	; 223
  fc:	80 83       	st	Z, r24
  fe:	80 81       	ld	r24, Z
 100:	80 68       	ori	r24, 0x80	; 128
 102:	80 83       	st	Z, r24
 104:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 108:	88 23       	and	r24, r24
 10a:	e4 f7       	brge	.-8      	; 0x104 <i2c_tx_address+0x20>
 10c:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <__data_end>
 110:	81 11       	cpse	r24, r1
 112:	07 c0       	rjmp	.+14     	; 0x122 <i2c_tx_address+0x3e>
 114:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 118:	88 7f       	andi	r24, 0xF8	; 248
 11a:	88 31       	cpi	r24, 0x18	; 24
 11c:	59 f4       	brne	.+22     	; 0x134 <i2c_tx_address+0x50>
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	08 95       	ret
 122:	81 30       	cpi	r24, 0x01	; 1
 124:	49 f4       	brne	.+18     	; 0x138 <i2c_tx_address+0x54>
 126:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 12a:	88 7f       	andi	r24, 0xF8	; 248
 12c:	80 34       	cpi	r24, 0x40	; 64
 12e:	31 f4       	brne	.+12     	; 0x13c <i2c_tx_address+0x58>
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	08 95       	ret
 134:	8e ef       	ldi	r24, 0xFE	; 254
 136:	08 95       	ret
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	08 95       	ret
 13c:	8e ef       	ldi	r24, 0xFE	; 254
 13e:	08 95       	ret

00000140 <i2c_tx_byte>:
 140:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 144:	ec eb       	ldi	r30, 0xBC	; 188
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	80 68       	ori	r24, 0x80	; 128
 14c:	80 83       	st	Z, r24
 14e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 152:	88 23       	and	r24, r24
 154:	e4 f7       	brge	.-8      	; 0x14e <i2c_tx_byte+0xe>
 156:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 15a:	88 7f       	andi	r24, 0xF8	; 248
 15c:	88 32       	cpi	r24, 0x28	; 40
 15e:	11 f4       	brne	.+4      	; 0x164 <i2c_tx_byte+0x24>
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	08 95       	ret
 164:	8e ef       	ldi	r24, 0xFE	; 254
 166:	08 95       	ret

00000168 <i2c_tx_stop>:
 168:	ec eb       	ldi	r30, 0xBC	; 188
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	80 69       	ori	r24, 0x90	; 144
 170:	80 83       	st	Z, r24
 172:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 176:	84 ff       	sbrs	r24, 4
 178:	fc cf       	rjmp	.-8      	; 0x172 <i2c_tx_stop+0xa>
 17a:	08 95       	ret

0000017c <uart_RasToAt>:

	return 0;
}

void uart_RasToAt() {
	data = UART_receive();	// 데이터 수신
 17c:	0e 94 b4 04 	call	0x968	; 0x968 <UART_receive>
 180:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <data>
	if (data != ""){
 184:	28 2f       	mov	r18, r24
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	22 57       	subi	r18, 0x72	; 114
 18a:	33 40       	sbci	r19, 0x03	; 3
 18c:	11 f1       	breq	.+68     	; 0x1d2 <uart_RasToAt+0x56>
		if(data == TERMINATOR) {	// 종료 문자를 수신한 경우
 18e:	84 32       	cpi	r24, 0x24	; 36
 190:	91 f4       	brne	.+36     	; 0x1b6 <uart_RasToAt+0x3a>
			buffer[uart_index] = '\0';
 192:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <uart_index>
 196:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <uart_index+0x1>
 19a:	e7 54       	subi	r30, 0x47	; 71
 19c:	fc 4f       	sbci	r31, 0xFC	; 252
 19e:	10 82       	st	Z, r1
			process_data = 1;		// 수신 문자열 처리 지시
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	90 93 ce 03 	sts	0x03CE, r25	; 0x8003ce <process_data+0x1>
 1a8:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <process_data>
			uart_index = 0;
 1ac:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <uart_index+0x1>
 1b0:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <uart_index>
 1b4:	08 95       	ret
		}
		else {
			buffer[uart_index] = data;	// 수신 버퍼에 저장
 1b6:	20 91 cf 03 	lds	r18, 0x03CF	; 0x8003cf <uart_index>
 1ba:	30 91 d0 03 	lds	r19, 0x03D0	; 0x8003d0 <uart_index+0x1>
 1be:	f9 01       	movw	r30, r18
 1c0:	e7 54       	subi	r30, 0x47	; 71
 1c2:	fc 4f       	sbci	r31, 0xFC	; 252
 1c4:	80 83       	st	Z, r24
			uart_index++;
 1c6:	2f 5f       	subi	r18, 0xFF	; 255
 1c8:	3f 4f       	sbci	r19, 0xFF	; 255
 1ca:	30 93 d0 03 	sts	0x03D0, r19	; 0x8003d0 <uart_index+0x1>
 1ce:	20 93 cf 03 	sts	0x03CF, r18	; 0x8003cf <uart_index>
 1d2:	08 95       	ret

000001d4 <INIT_SERVO>:
		}
	}
}

void INIT_SERVO(){
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
	
	pca9685_init(0x00, 50); // start PCA9685 device 0x00 at 50 Hz output
 1d8:	62 e3       	ldi	r22, 0x32	; 50
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <pca9685_init>
	int i;
	
	for (i = 1; i <= 5; i++){
 1e2:	c1 e0       	ldi	r28, 0x01	; 1
 1e4:	d0 e0       	ldi	r29, 0x00	; 0
 1e6:	07 c0       	rjmp	.+14     	; 0x1f6 <INIT_SERVO+0x22>
		pca9685_pwm(SERVO_A(i), ANGLE(90));
 1e8:	6c ed       	ldi	r22, 0xDC	; 220
 1ea:	75 e0       	ldi	r23, 0x05	; 5
 1ec:	8c 2f       	mov	r24, r28
 1ee:	81 50       	subi	r24, 0x01	; 1
 1f0:	0e 94 56 04 	call	0x8ac	; 0x8ac <pca9685_pwm>
void INIT_SERVO(){
	
	pca9685_init(0x00, 50); // start PCA9685 device 0x00 at 50 Hz output
	int i;
	
	for (i = 1; i <= 5; i++){
 1f4:	21 96       	adiw	r28, 0x01	; 1
 1f6:	c6 30       	cpi	r28, 0x06	; 6
 1f8:	d1 05       	cpc	r29, r1
 1fa:	b4 f3       	brlt	.-20     	; 0x1e8 <INIT_SERVO+0x14>
		pca9685_pwm(SERVO_A(i), ANGLE(90));
	}
}
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <MoveServo>:

void MoveServo(uint8_t servo, uint16_t start_angle, uint16_t end_angle) {
 202:	ff 92       	push	r15
 204:	0f 93       	push	r16
 206:	1f 93       	push	r17
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	f8 2e       	mov	r15, r24
 20e:	8a 01       	movw	r16, r20
	int angle;

	if (start_angle <= end_angle) {
 210:	46 17       	cp	r20, r22
 212:	57 07       	cpc	r21, r23
 214:	e0 f0       	brcs	.+56     	; 0x24e <MoveServo+0x4c>
		for (angle = start_angle; angle <= end_angle; ) {
 216:	eb 01       	movw	r28, r22
 218:	14 c0       	rjmp	.+40     	; 0x242 <MoveServo+0x40>
			if (PINB & (1 << switch1)) {
 21a:	1a 9b       	sbis	0x03, 2	; 3
 21c:	0e c0       	rjmp	.+28     	; 0x23a <MoveServo+0x38>
				PORTB &= ~0x02;
 21e:	85 b1       	in	r24, 0x05	; 5
 220:	8d 7f       	andi	r24, 0xFD	; 253
 222:	85 b9       	out	0x05, r24	; 5
				pca9685_pwm(servo, angle);
 224:	8f 2d       	mov	r24, r15
 226:	0e 94 56 04 	call	0x8ac	; 0x8ac <pca9685_pwm>
				angle += 10;
 22a:	2a 96       	adiw	r28, 0x0a	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22c:	8f e5       	ldi	r24, 0x5F	; 95
 22e:	9a ee       	ldi	r25, 0xEA	; 234
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <MoveServo+0x2e>
 234:	00 c0       	rjmp	.+0      	; 0x236 <MoveServo+0x34>
 236:	00 00       	nop
 238:	04 c0       	rjmp	.+8      	; 0x242 <MoveServo+0x40>
			}
			else {
				PORTB |= 0x02;
 23a:	85 b1       	in	r24, 0x05	; 5
 23c:	82 60       	ori	r24, 0x02	; 2
 23e:	85 b9       	out	0x05, r24	; 5
				break;
 240:	21 c0       	rjmp	.+66     	; 0x284 <MoveServo+0x82>

void MoveServo(uint8_t servo, uint16_t start_angle, uint16_t end_angle) {
	int angle;

	if (start_angle <= end_angle) {
		for (angle = start_angle; angle <= end_angle; ) {
 242:	6c 2f       	mov	r22, r28
 244:	7d 2f       	mov	r23, r29
 246:	0c 17       	cp	r16, r28
 248:	1d 07       	cpc	r17, r29
 24a:	38 f7       	brcc	.-50     	; 0x21a <MoveServo+0x18>
 24c:	1b c0       	rjmp	.+54     	; 0x284 <MoveServo+0x82>
			_delay_ms(15);
		}
	}
	
	else {
		for (angle = start_angle; angle >= end_angle; ) {
 24e:	eb 01       	movw	r28, r22
 250:	14 c0       	rjmp	.+40     	; 0x27a <MoveServo+0x78>
			if (PINB & (1 << switch1)) {
 252:	1a 9b       	sbis	0x03, 2	; 3
 254:	0e c0       	rjmp	.+28     	; 0x272 <MoveServo+0x70>
				PORTB &= ~0x02;
 256:	85 b1       	in	r24, 0x05	; 5
 258:	8d 7f       	andi	r24, 0xFD	; 253
 25a:	85 b9       	out	0x05, r24	; 5
				pca9685_pwm(servo, angle);
 25c:	8f 2d       	mov	r24, r15
 25e:	0e 94 56 04 	call	0x8ac	; 0x8ac <pca9685_pwm>
				angle -= 10;
 262:	2a 97       	sbiw	r28, 0x0a	; 10
 264:	8f e5       	ldi	r24, 0x5F	; 95
 266:	9a ee       	ldi	r25, 0xEA	; 234
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <MoveServo+0x66>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <MoveServo+0x6c>
 26e:	00 00       	nop
 270:	04 c0       	rjmp	.+8      	; 0x27a <MoveServo+0x78>
			}
			else {
				PORTB |= 0x02;
 272:	85 b1       	in	r24, 0x05	; 5
 274:	82 60       	ori	r24, 0x02	; 2
 276:	85 b9       	out	0x05, r24	; 5
				break;
 278:	05 c0       	rjmp	.+10     	; 0x284 <MoveServo+0x82>
			_delay_ms(15);
		}
	}
	
	else {
		for (angle = start_angle; angle >= end_angle; ) {
 27a:	6c 2f       	mov	r22, r28
 27c:	7d 2f       	mov	r23, r29
 27e:	c0 17       	cp	r28, r16
 280:	d1 07       	cpc	r29, r17
 282:	38 f7       	brcc	.-50     	; 0x252 <MoveServo+0x50>
				break;
			}
			_delay_ms(15);
		}
	}
}
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	1f 91       	pop	r17
 28a:	0f 91       	pop	r16
 28c:	ff 90       	pop	r15
 28e:	08 95       	ret

00000290 <WhichCanMove>:

int WhichCanMove() {
 290:	0f 93       	push	r16
 292:	1f 93       	push	r17
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
	
	int pass = 0;
 298:	00 e0       	ldi	r16, 0x00	; 0
 29a:	10 e0       	ldi	r17, 0x00	; 0
	//char temp[20];
	
	while (pass == 0){
 29c:	d3 c0       	rjmp	.+422    	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
		//// 로봇팔 움직일 수 있는지 확인
		//UART_printString("====Fisrt Robot Arm====");
		//UART_printString("\n");
		
		uart_RasToAt();
 29e:	0e 94 be 00 	call	0x17c	; 0x17c <uart_RasToAt>
		
		if(process_data == 1){
 2a2:	c0 91 cd 03 	lds	r28, 0x03CD	; 0x8003cd <process_data>
 2a6:	d0 91 ce 03 	lds	r29, 0x03CE	; 0x8003ce <process_data+0x1>
 2aa:	c1 30       	cpi	r28, 0x01	; 1
 2ac:	d1 05       	cpc	r29, r1
 2ae:	09 f0       	breq	.+2      	; 0x2b2 <WhichCanMove+0x22>
 2b0:	c9 c0       	rjmp	.+402    	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
			strcpy(buffer_data, buffer);
 2b2:	69 eb       	ldi	r22, 0xB9	; 185
 2b4:	73 e0       	ldi	r23, 0x03	; 3
 2b6:	82 ed       	ldi	r24, 0xD2	; 210
 2b8:	93 e0       	ldi	r25, 0x03	; 3
 2ba:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <strcpy>
			
			// 0 ~ 8의 값이 들어오면
			if ((strcmp(buffer_data, "0") == 0) || (strcmp(buffer_data, "1") == 0) || (strcmp(buffer_data, "2") == 0) || (strcmp(buffer_data, "3") == 0) || (strcmp(buffer_data, "4") == 0) || (strcmp(buffer_data, "5") == 0) || (strcmp(buffer_data, "6") == 0) || (strcmp(buffer_data, "7") == 0) || (strcmp(buffer_data, "8") == 0)){
 2be:	66 ee       	ldi	r22, 0xE6	; 230
 2c0:	72 e0       	ldi	r23, 0x02	; 2
 2c2:	82 ed       	ldi	r24, 0xD2	; 210
 2c4:	93 e0       	ldi	r25, 0x03	; 3
 2c6:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <strcmp>
 2ca:	89 2b       	or	r24, r25
 2cc:	09 f4       	brne	.+2      	; 0x2d0 <WhichCanMove+0x40>
 2ce:	41 c0       	rjmp	.+130    	; 0x352 <WhichCanMove+0xc2>
 2d0:	68 ee       	ldi	r22, 0xE8	; 232
 2d2:	72 e0       	ldi	r23, 0x02	; 2
 2d4:	82 ed       	ldi	r24, 0xD2	; 210
 2d6:	93 e0       	ldi	r25, 0x03	; 3
 2d8:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <strcmp>
 2dc:	89 2b       	or	r24, r25
 2de:	c9 f1       	breq	.+114    	; 0x352 <WhichCanMove+0xc2>
 2e0:	6a ee       	ldi	r22, 0xEA	; 234
 2e2:	72 e0       	ldi	r23, 0x02	; 2
 2e4:	82 ed       	ldi	r24, 0xD2	; 210
 2e6:	93 e0       	ldi	r25, 0x03	; 3
 2e8:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <strcmp>
 2ec:	89 2b       	or	r24, r25
 2ee:	89 f1       	breq	.+98     	; 0x352 <WhichCanMove+0xc2>
 2f0:	6c ee       	ldi	r22, 0xEC	; 236
 2f2:	72 e0       	ldi	r23, 0x02	; 2
 2f4:	82 ed       	ldi	r24, 0xD2	; 210
 2f6:	93 e0       	ldi	r25, 0x03	; 3
 2f8:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <strcmp>
 2fc:	89 2b       	or	r24, r25
 2fe:	49 f1       	breq	.+82     	; 0x352 <WhichCanMove+0xc2>
 300:	6e ee       	ldi	r22, 0xEE	; 238
 302:	72 e0       	ldi	r23, 0x02	; 2
 304:	82 ed       	ldi	r24, 0xD2	; 210
 306:	93 e0       	ldi	r25, 0x03	; 3
 308:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <strcmp>
 30c:	89 2b       	or	r24, r25
 30e:	09 f1       	breq	.+66     	; 0x352 <WhichCanMove+0xc2>
 310:	60 ef       	ldi	r22, 0xF0	; 240
 312:	72 e0       	ldi	r23, 0x02	; 2
 314:	82 ed       	ldi	r24, 0xD2	; 210
 316:	93 e0       	ldi	r25, 0x03	; 3
 318:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <strcmp>
 31c:	89 2b       	or	r24, r25
 31e:	c9 f0       	breq	.+50     	; 0x352 <WhichCanMove+0xc2>
 320:	62 ef       	ldi	r22, 0xF2	; 242
 322:	72 e0       	ldi	r23, 0x02	; 2
 324:	82 ed       	ldi	r24, 0xD2	; 210
 326:	93 e0       	ldi	r25, 0x03	; 3
 328:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <strcmp>
 32c:	89 2b       	or	r24, r25
 32e:	89 f0       	breq	.+34     	; 0x352 <WhichCanMove+0xc2>
 330:	64 ef       	ldi	r22, 0xF4	; 244
 332:	72 e0       	ldi	r23, 0x02	; 2
 334:	82 ed       	ldi	r24, 0xD2	; 210
 336:	93 e0       	ldi	r25, 0x03	; 3
 338:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <strcmp>
 33c:	89 2b       	or	r24, r25
 33e:	49 f0       	breq	.+18     	; 0x352 <WhichCanMove+0xc2>
 340:	66 ef       	ldi	r22, 0xF6	; 246
 342:	72 e0       	ldi	r23, 0x02	; 2
 344:	82 ed       	ldi	r24, 0xD2	; 210
 346:	93 e0       	ldi	r25, 0x03	; 3
 348:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <strcmp>
 34c:	89 2b       	or	r24, r25
 34e:	09 f0       	breq	.+2      	; 0x352 <WhichCanMove+0xc2>
 350:	5f c0       	rjmp	.+190    	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
				UART_printString("pass");
 352:	88 ef       	ldi	r24, 0xF8	; 248
 354:	92 e0       	ldi	r25, 0x02	; 2
 356:	0e 94 c2 04 	call	0x984	; 0x984 <UART_printString>
				UART_printString(buffer_data);
 35a:	82 ed       	ldi	r24, 0xD2	; 210
 35c:	93 e0       	ldi	r25, 0x03	; 3
 35e:	0e 94 c2 04 	call	0x984	; 0x984 <UART_printString>
				UART_printString("\n");
 362:	81 e7       	ldi	r24, 0x71	; 113
 364:	93 e0       	ldi	r25, 0x03	; 3
 366:	0e 94 c2 04 	call	0x984	; 0x984 <UART_printString>
				pass = 1;
				
				if ((strcmp(buffer_data, "0") == 0)) return 0;
 36a:	66 ee       	ldi	r22, 0xE6	; 230
 36c:	72 e0       	ldi	r23, 0x02	; 2
 36e:	82 ed       	ldi	r24, 0xD2	; 210
 370:	93 e0       	ldi	r25, 0x03	; 3
 372:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <strcmp>
 376:	9c 01       	movw	r18, r24
 378:	89 2b       	or	r24, r25
 37a:	09 f4       	brne	.+2      	; 0x37e <WhichCanMove+0xee>
 37c:	7e c0       	rjmp	.+252    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
				else if ((strcmp(buffer_data, "1") == 0)) return 1;
 37e:	68 ee       	ldi	r22, 0xE8	; 232
 380:	72 e0       	ldi	r23, 0x02	; 2
 382:	82 ed       	ldi	r24, 0xD2	; 210
 384:	93 e0       	ldi	r25, 0x03	; 3
 386:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <strcmp>
 38a:	89 2b       	or	r24, r25
 38c:	09 f4       	brne	.+2      	; 0x390 <WhichCanMove+0x100>
 38e:	5f c0       	rjmp	.+190    	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
				else if ((strcmp(buffer_data, "2") == 0)) return 2;
 390:	6a ee       	ldi	r22, 0xEA	; 234
 392:	72 e0       	ldi	r23, 0x02	; 2
 394:	82 ed       	ldi	r24, 0xD2	; 210
 396:	93 e0       	ldi	r25, 0x03	; 3
 398:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <strcmp>
 39c:	89 2b       	or	r24, r25
 39e:	09 f4       	brne	.+2      	; 0x3a2 <WhichCanMove+0x112>
 3a0:	58 c0       	rjmp	.+176    	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
				else if ((strcmp(buffer_data, "3") == 0)) return 3;
 3a2:	6c ee       	ldi	r22, 0xEC	; 236
 3a4:	72 e0       	ldi	r23, 0x02	; 2
 3a6:	82 ed       	ldi	r24, 0xD2	; 210
 3a8:	93 e0       	ldi	r25, 0x03	; 3
 3aa:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <strcmp>
 3ae:	89 2b       	or	r24, r25
 3b0:	09 f4       	brne	.+2      	; 0x3b4 <WhichCanMove+0x124>
 3b2:	52 c0       	rjmp	.+164    	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
				else if ((strcmp(buffer_data, "4") == 0)) return 4;
 3b4:	6e ee       	ldi	r22, 0xEE	; 238
 3b6:	72 e0       	ldi	r23, 0x02	; 2
 3b8:	82 ed       	ldi	r24, 0xD2	; 210
 3ba:	93 e0       	ldi	r25, 0x03	; 3
 3bc:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <strcmp>
 3c0:	89 2b       	or	r24, r25
 3c2:	09 f4       	brne	.+2      	; 0x3c6 <WhichCanMove+0x136>
 3c4:	4c c0       	rjmp	.+152    	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
				else if ((strcmp(buffer_data, "5") == 0)) return 5;
 3c6:	60 ef       	ldi	r22, 0xF0	; 240
 3c8:	72 e0       	ldi	r23, 0x02	; 2
 3ca:	82 ed       	ldi	r24, 0xD2	; 210
 3cc:	93 e0       	ldi	r25, 0x03	; 3
 3ce:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <strcmp>
 3d2:	89 2b       	or	r24, r25
 3d4:	09 f4       	brne	.+2      	; 0x3d8 <WhichCanMove+0x148>
 3d6:	46 c0       	rjmp	.+140    	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
				else if ((strcmp(buffer_data, "6") == 0)) return 6;
 3d8:	62 ef       	ldi	r22, 0xF2	; 242
 3da:	72 e0       	ldi	r23, 0x02	; 2
 3dc:	82 ed       	ldi	r24, 0xD2	; 210
 3de:	93 e0       	ldi	r25, 0x03	; 3
 3e0:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <strcmp>
 3e4:	89 2b       	or	r24, r25
 3e6:	09 f4       	brne	.+2      	; 0x3ea <WhichCanMove+0x15a>
 3e8:	40 c0       	rjmp	.+128    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
				else if ((strcmp(buffer_data, "7") == 0)) return 7;
 3ea:	64 ef       	ldi	r22, 0xF4	; 244
 3ec:	72 e0       	ldi	r23, 0x02	; 2
 3ee:	82 ed       	ldi	r24, 0xD2	; 210
 3f0:	93 e0       	ldi	r25, 0x03	; 3
 3f2:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <strcmp>
 3f6:	89 2b       	or	r24, r25
 3f8:	d9 f1       	breq	.+118    	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
				else if ((strcmp(buffer_data, "8") == 0)) return 8;
 3fa:	66 ef       	ldi	r22, 0xF6	; 246
 3fc:	72 e0       	ldi	r23, 0x02	; 2
 3fe:	82 ed       	ldi	r24, 0xD2	; 210
 400:	93 e0       	ldi	r25, 0x03	; 3
 402:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <strcmp>
 406:	89 2b       	or	r24, r25
 408:	b1 f1       	breq	.+108    	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
			// 0 ~ 8의 값이 들어오면
			if ((strcmp(buffer_data, "0") == 0) || (strcmp(buffer_data, "1") == 0) || (strcmp(buffer_data, "2") == 0) || (strcmp(buffer_data, "3") == 0) || (strcmp(buffer_data, "4") == 0) || (strcmp(buffer_data, "5") == 0) || (strcmp(buffer_data, "6") == 0) || (strcmp(buffer_data, "7") == 0) || (strcmp(buffer_data, "8") == 0)){
				UART_printString("pass");
				UART_printString(buffer_data);
				UART_printString("\n");
				pass = 1;
 40a:	01 e0       	ldi	r16, 0x01	; 1
 40c:	10 e0       	ldi	r17, 0x00	; 0
 40e:	1a c0       	rjmp	.+52     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
				else if ((strcmp(buffer_data, "6") == 0)) return 6;
				else if ((strcmp(buffer_data, "7") == 0)) return 7;
				else if ((strcmp(buffer_data, "8") == 0)) return 8;
			}
			// 9의 값일 들어오면 (배열이 꽉 찼음)
			else if (strcmp(buffer_data, "9") == 0) {
 410:	6d ef       	ldi	r22, 0xFD	; 253
 412:	72 e0       	ldi	r23, 0x02	; 2
 414:	82 ed       	ldi	r24, 0xD2	; 210
 416:	93 e0       	ldi	r25, 0x03	; 3
 418:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <strcmp>
 41c:	89 2b       	or	r24, r25
 41e:	51 f4       	brne	.+20     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
				UART_printString("end");
 420:	8f ef       	ldi	r24, 0xFF	; 255
 422:	92 e0       	ldi	r25, 0x02	; 2
 424:	0e 94 c2 04 	call	0x984	; 0x984 <UART_printString>
				PORTB &= ~(1 << LED1);
 428:	85 b1       	in	r24, 0x05	; 5
 42a:	8e 7f       	andi	r24, 0xFE	; 254
 42c:	85 b9       	out	0x05, r24	; 5
				//strcpy(temp, "fisrt_robot_stop");
				return 9;
 42e:	29 e0       	ldi	r18, 0x09	; 9
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	23 c0       	rjmp	.+70     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
			}
			// 다른 값이 들어온다면...
			else {
				UART_printString("not a 0 to 9. : ");
 434:	83 e0       	ldi	r24, 0x03	; 3
 436:	93 e0       	ldi	r25, 0x03	; 3
 438:	0e 94 c2 04 	call	0x984	; 0x984 <UART_printString>
				
				(buffer_data);
				UART_printString("\n");
 43c:	81 e7       	ldi	r24, 0x71	; 113
 43e:	93 e0       	ldi	r25, 0x03	; 3
 440:	0e 94 c2 04 	call	0x984	; 0x984 <UART_printString>
int WhichCanMove() {
	
	int pass = 0;
	//char temp[20];
	
	while (pass == 0){
 444:	01 15       	cp	r16, r1
 446:	11 05       	cpc	r17, r1
 448:	09 f4       	brne	.+2      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 44a:	29 cf       	rjmp	.-430    	; 0x29e <WhichCanMove+0xe>
		}
	}
	
	
	//return buffer_data;
}
 44c:	18 c0       	rjmp	.+48     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
				UART_printString(buffer_data);
				UART_printString("\n");
				pass = 1;
				
				if ((strcmp(buffer_data, "0") == 0)) return 0;
				else if ((strcmp(buffer_data, "1") == 0)) return 1;
 44e:	9e 01       	movw	r18, r28
 450:	14 c0       	rjmp	.+40     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
				else if ((strcmp(buffer_data, "2") == 0)) return 2;
 452:	22 e0       	ldi	r18, 0x02	; 2
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	11 c0       	rjmp	.+34     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
				else if ((strcmp(buffer_data, "3") == 0)) return 3;
 458:	23 e0       	ldi	r18, 0x03	; 3
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	0e c0       	rjmp	.+28     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
				else if ((strcmp(buffer_data, "4") == 0)) return 4;
 45e:	24 e0       	ldi	r18, 0x04	; 4
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	0b c0       	rjmp	.+22     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
				else if ((strcmp(buffer_data, "5") == 0)) return 5;
 464:	25 e0       	ldi	r18, 0x05	; 5
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	08 c0       	rjmp	.+16     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
				else if ((strcmp(buffer_data, "6") == 0)) return 6;
 46a:	26 e0       	ldi	r18, 0x06	; 6
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	05 c0       	rjmp	.+10     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
				else if ((strcmp(buffer_data, "7") == 0)) return 7;
 470:	27 e0       	ldi	r18, 0x07	; 7
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	02 c0       	rjmp	.+4      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
				else if ((strcmp(buffer_data, "8") == 0)) return 8;
 476:	28 e0       	ldi	r18, 0x08	; 8
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	82 2f       	mov	r24, r18
 47c:	93 2f       	mov	r25, r19
		}
	}
	
	
	//return buffer_data;
}
 47e:	df 91       	pop	r29
 480:	cf 91       	pop	r28
 482:	1f 91       	pop	r17
 484:	0f 91       	pop	r16
 486:	08 95       	ret

00000488 <ReceiveInfrared>:

int ReceiveInfrared (void) {
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
	
	int pass = 1;
	//char temp[20];
	
	while (pass != 0){
 48c:	36 c0       	rjmp	.+108    	; 0x4fa <ReceiveInfrared+0x72>
		
		uart_RasToAt();
		
		if(process_data == 1){
			strcpy(buffer_data, buffer);
 48e:	69 eb       	ldi	r22, 0xB9	; 185
 490:	73 e0       	ldi	r23, 0x03	; 3
 492:	82 ed       	ldi	r24, 0xD2	; 210
 494:	93 e0       	ldi	r25, 0x03	; 3
 496:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <strcpy>
			
			// go 값이 들어오면
			if (strcmp(buffer_data, "go") == 0) {
 49a:	64 e1       	ldi	r22, 0x14	; 20
 49c:	73 e0       	ldi	r23, 0x03	; 3
 49e:	82 ed       	ldi	r24, 0xD2	; 210
 4a0:	93 e0       	ldi	r25, 0x03	; 3
 4a2:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <strcmp>
 4a6:	89 2b       	or	r24, r25
 4a8:	41 f4       	brne	.+16     	; 0x4ba <ReceiveInfrared+0x32>
				UART_printString("conveyor belt move\n");
 4aa:	87 e1       	ldi	r24, 0x17	; 23
 4ac:	93 e0       	ldi	r25, 0x03	; 3
 4ae:	0e 94 c2 04 	call	0x984	; 0x984 <UART_printString>
				PORTB &= ~(1 << LED1);
 4b2:	85 b1       	in	r24, 0x05	; 5
 4b4:	8e 7f       	andi	r24, 0xFE	; 254
 4b6:	85 b9       	out	0x05, r24	; 5
				return 1;
 4b8:	2a c0       	rjmp	.+84     	; 0x50e <ReceiveInfrared+0x86>
			}
			
			else if (strcmp(buffer_data, "stp") == 0) {
 4ba:	6b e2       	ldi	r22, 0x2B	; 43
 4bc:	73 e0       	ldi	r23, 0x03	; 3
 4be:	82 ed       	ldi	r24, 0xD2	; 210
 4c0:	93 e0       	ldi	r25, 0x03	; 3
 4c2:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <strcmp>
 4c6:	ec 01       	movw	r28, r24
 4c8:	89 2b       	or	r24, r25
 4ca:	41 f4       	brne	.+16     	; 0x4dc <ReceiveInfrared+0x54>
				UART_printString("conveyor belt stop\n");
 4cc:	8f e2       	ldi	r24, 0x2F	; 47
 4ce:	93 e0       	ldi	r25, 0x03	; 3
 4d0:	0e 94 c2 04 	call	0x984	; 0x984 <UART_printString>
				PORTB &= ~(1 << LED1);
 4d4:	85 b1       	in	r24, 0x05	; 5
 4d6:	8e 7f       	andi	r24, 0xFE	; 254
 4d8:	85 b9       	out	0x05, r24	; 5
				//strcpy(temp, "conveyor_stp");
				return 0;
 4da:	19 c0       	rjmp	.+50     	; 0x50e <ReceiveInfrared+0x86>
			}
			// 다른 값이 들어온다면...
			else {
				UART_printString("test : ");
 4dc:	83 e4       	ldi	r24, 0x43	; 67
 4de:	93 e0       	ldi	r25, 0x03	; 3
 4e0:	0e 94 c2 04 	call	0x984	; 0x984 <UART_printString>
				UART_transmit(buffer_data);
 4e4:	82 ed       	ldi	r24, 0xD2	; 210
 4e6:	93 e0       	ldi	r25, 0x03	; 3
 4e8:	0e 94 bb 04 	call	0x976	; 0x976 <UART_transmit>
				UART_printString("\n");
 4ec:	81 e7       	ldi	r24, 0x71	; 113
 4ee:	93 e0       	ldi	r25, 0x03	; 3
 4f0:	0e 94 c2 04 	call	0x984	; 0x984 <UART_printString>
				return 2;
 4f4:	c2 e0       	ldi	r28, 0x02	; 2
 4f6:	d0 e0       	ldi	r29, 0x00	; 0
 4f8:	0a c0       	rjmp	.+20     	; 0x50e <ReceiveInfrared+0x86>
	int pass = 1;
	//char temp[20];
	
	while (pass != 0){
		
		uart_RasToAt();
 4fa:	0e 94 be 00 	call	0x17c	; 0x17c <uart_RasToAt>
		
		if(process_data == 1){
 4fe:	c0 91 cd 03 	lds	r28, 0x03CD	; 0x8003cd <process_data>
 502:	d0 91 ce 03 	lds	r29, 0x03CE	; 0x8003ce <process_data+0x1>
 506:	c1 30       	cpi	r28, 0x01	; 1
 508:	d1 05       	cpc	r29, r1
 50a:	b9 f7       	brne	.-18     	; 0x4fa <ReceiveInfrared+0x72>
 50c:	c0 cf       	rjmp	.-128    	; 0x48e <ReceiveInfrared+0x6>
			}
		}
	}
	
	return 0;
}
 50e:	ce 01       	movw	r24, r28
 510:	df 91       	pop	r29
 512:	cf 91       	pop	r28
 514:	08 95       	ret

00000516 <MoveRobotArm>:
			//process_data = 0;
		//}
	}
}

void MoveRobotArm(uint8_t servo, int count){
 516:	0f 93       	push	r16
 518:	1f 93       	push	r17
 51a:	cf 93       	push	r28
 51c:	df 93       	push	r29
	
	int i;
	count -= 1;
 51e:	eb 01       	movw	r28, r22
 520:	21 97       	sbiw	r28, 0x01	; 1
	
	switch (servo){
 522:	81 30       	cpi	r24, 0x01	; 1
 524:	f1 f5       	brne	.+124    	; 0x5a2 <MoveRobotArm+0x8c>
		case 1:
		PORTB |= (1 << LED2);
 526:	85 b1       	in	r24, 0x05	; 5
 528:	82 60       	ori	r24, 0x02	; 2
 52a:	85 b9       	out	0x05, r24	; 5
		for(i = 0; i < servo_max; i++){
 52c:	00 e0       	ldi	r16, 0x00	; 0
 52e:	10 e0       	ldi	r17, 0x00	; 0
 530:	35 c0       	rjmp	.+106    	; 0x59c <MoveRobotArm+0x86>
			MoveServo(SERVO_A(move_Aarm_coord[count][i][0]), ANGLE(move_Aarm_coord[count][i][1]), ANGLE(move_Aarm_coord[count][i][2]));
 532:	f8 01       	movw	r30, r16
 534:	ee 0f       	add	r30, r30
 536:	ff 1f       	adc	r31, r31
 538:	e0 0f       	add	r30, r16
 53a:	f1 1f       	adc	r31, r17
 53c:	ee 0f       	add	r30, r30
 53e:	ff 1f       	adc	r31, r31
 540:	26 e3       	ldi	r18, 0x36	; 54
 542:	2c 9f       	mul	r18, r28
 544:	c0 01       	movw	r24, r0
 546:	2d 9f       	mul	r18, r29
 548:	90 0d       	add	r25, r0
 54a:	11 24       	eor	r1, r1
 54c:	e8 0f       	add	r30, r24
 54e:	f9 1f       	adc	r31, r25
 550:	e0 50       	subi	r30, 0x00	; 0
 552:	ff 4f       	sbci	r31, 0xFF	; 255
 554:	84 81       	ldd	r24, Z+4	; 0x04
 556:	95 81       	ldd	r25, Z+5	; 0x05
 558:	ac 01       	movw	r20, r24
 55a:	44 0f       	add	r20, r20
 55c:	55 1f       	adc	r21, r21
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	88 0f       	add	r24, r24
 564:	99 1f       	adc	r25, r25
 566:	88 0f       	add	r24, r24
 568:	99 1f       	adc	r25, r25
 56a:	48 0f       	add	r20, r24
 56c:	59 1f       	adc	r21, r25
 56e:	48 5a       	subi	r20, 0xA8	; 168
 570:	5d 4f       	sbci	r21, 0xFD	; 253
 572:	82 81       	ldd	r24, Z+2	; 0x02
 574:	93 81       	ldd	r25, Z+3	; 0x03
 576:	bc 01       	movw	r22, r24
 578:	66 0f       	add	r22, r22
 57a:	77 1f       	adc	r23, r23
 57c:	88 0f       	add	r24, r24
 57e:	99 1f       	adc	r25, r25
 580:	88 0f       	add	r24, r24
 582:	99 1f       	adc	r25, r25
 584:	88 0f       	add	r24, r24
 586:	99 1f       	adc	r25, r25
 588:	68 0f       	add	r22, r24
 58a:	79 1f       	adc	r23, r25
 58c:	68 5a       	subi	r22, 0xA8	; 168
 58e:	7d 4f       	sbci	r23, 0xFD	; 253
 590:	80 81       	ld	r24, Z
 592:	81 50       	subi	r24, 0x01	; 1
 594:	0e 94 01 01 	call	0x202	; 0x202 <MoveServo>
	count -= 1;
	
	switch (servo){
		case 1:
		PORTB |= (1 << LED2);
		for(i = 0; i < servo_max; i++){
 598:	0f 5f       	subi	r16, 0xFF	; 255
 59a:	1f 4f       	sbci	r17, 0xFF	; 255
 59c:	09 30       	cpi	r16, 0x09	; 9
 59e:	11 05       	cpc	r17, r1
 5a0:	44 f2       	brlt	.-112    	; 0x532 <MoveRobotArm+0x1c>
		//MoveServo(SERVO_B(move_Barm_coord[count][i][0]), ANGLE(move_Barm_coord[count][i][1]), ANGLE(move_Barm_coord[count][i][2]));
		//break;
		//}
	}
	
}
 5a2:	df 91       	pop	r29
 5a4:	cf 91       	pop	r28
 5a6:	1f 91       	pop	r17
 5a8:	0f 91       	pop	r16
 5aa:	08 95       	ret

000005ac <INIT_STEPPER>:

void INIT_STEPPER()
{
	// 타이머/카운터 2번을 고속 PWM 모드로 설정
	TCCR2A |= (1 << WGM21) | (1 << WGM20);
 5ac:	e0 eb       	ldi	r30, 0xB0	; 176
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	80 81       	ld	r24, Z
 5b2:	83 60       	ori	r24, 0x03	; 3
 5b4:	80 83       	st	Z, r24
	TCCR2A |= (1 << COM2A1);		// 비반전 모드
 5b6:	80 81       	ld	r24, Z
 5b8:	80 68       	ori	r24, 0x80	; 128
 5ba:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS22);			// 분주비 64
 5bc:	e1 eb       	ldi	r30, 0xB1	; 177
 5be:	f0 e0       	ldi	r31, 0x00	; 0
 5c0:	80 81       	ld	r24, Z
 5c2:	84 60       	ori	r24, 0x04	; 4
 5c4:	80 83       	st	Z, r24
	
	
	// stepping motor
	STEPPING_A_DDR |= (1 << STEPPING_A_IN1) | (1 << STEPPING_A_IN2 ) | (1 << STEPPING_A_IN3) | (1 << STEPPING_A_IN4);
 5c6:	8a b1       	in	r24, 0x0a	; 10
 5c8:	8c 63       	ori	r24, 0x3C	; 60
 5ca:	8a b9       	out	0x0a, r24	; 10
	STEPPING_B_DDR |= (1 << STEPPING_B_IN1) | (1 << STEPPING_B_IN2 ) | (1 << STEPPING_B_IN3) | (1 << STEPPING_B_IN4);
 5cc:	87 b1       	in	r24, 0x07	; 7
 5ce:	8f 60       	ori	r24, 0x0F	; 15
 5d0:	87 b9       	out	0x07, r24	; 7
	
	// led
	LED_DDR |= (1 << LED1) | (1 << LED2);	// led 상태등 표시 PB0
 5d2:	84 b1       	in	r24, 0x04	; 4
 5d4:	83 60       	ori	r24, 0x03	; 3
 5d6:	84 b9       	out	0x04, r24	; 4
 5d8:	08 95       	ret

000005da <loop_stepper>:
}

void loop_stepper()
{
	STEPPING_A &= ~((1 << STEPPING_A_IN1) | (1 << STEPPING_A_IN4));		// low
 5da:	8b b1       	in	r24, 0x0b	; 11
 5dc:	8b 7d       	andi	r24, 0xDB	; 219
 5de:	8b b9       	out	0x0b, r24	; 11
	STEPPING_A |= (1 << STEPPING_A_IN2) | (1 << STEPPING_A_IN3);		// high
 5e0:	8b b1       	in	r24, 0x0b	; 11
 5e2:	88 61       	ori	r24, 0x18	; 24
 5e4:	8b b9       	out	0x0b, r24	; 11
	STEPPING_B &= ~((1 << STEPPING_B_IN1) | (1 << STEPPING_B_IN4));
 5e6:	88 b1       	in	r24, 0x08	; 8
 5e8:	86 7f       	andi	r24, 0xF6	; 246
 5ea:	88 b9       	out	0x08, r24	; 8
	STEPPING_B |= (1 << STEPPING_B_IN2) | (1 << STEPPING_B_IN3);
 5ec:	88 b1       	in	r24, 0x08	; 8
 5ee:	86 60       	ori	r24, 0x06	; 6
 5f0:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5f2:	2f ef       	ldi	r18, 0xFF	; 255
 5f4:	89 ef       	ldi	r24, 0xF9	; 249
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	21 50       	subi	r18, 0x01	; 1
 5fa:	80 40       	sbci	r24, 0x00	; 0
 5fc:	90 40       	sbci	r25, 0x00	; 0
 5fe:	e1 f7       	brne	.-8      	; 0x5f8 <loop_stepper+0x1e>
 600:	00 c0       	rjmp	.+0      	; 0x602 <loop_stepper+0x28>
 602:	00 00       	nop
	_delay_us(motor_time);

	STEPPING_A &= ~((1 << STEPPING_A_IN1) | (1 << STEPPING_A_IN3));
 604:	8b b1       	in	r24, 0x0b	; 11
 606:	8b 7e       	andi	r24, 0xEB	; 235
 608:	8b b9       	out	0x0b, r24	; 11
	STEPPING_A |= (1 << STEPPING_A_IN2) | (1 << STEPPING_A_IN4);
 60a:	8b b1       	in	r24, 0x0b	; 11
 60c:	88 62       	ori	r24, 0x28	; 40
 60e:	8b b9       	out	0x0b, r24	; 11
	STEPPING_B &= ~((1 << STEPPING_B_IN1) | (1 << STEPPING_B_IN3));
 610:	88 b1       	in	r24, 0x08	; 8
 612:	8a 7f       	andi	r24, 0xFA	; 250
 614:	88 b9       	out	0x08, r24	; 8
	STEPPING_B |= (1 << STEPPING_B_IN2) | (1 << STEPPING_B_IN4);
 616:	88 b1       	in	r24, 0x08	; 8
 618:	8a 60       	ori	r24, 0x0A	; 10
 61a:	88 b9       	out	0x08, r24	; 8
 61c:	2f ef       	ldi	r18, 0xFF	; 255
 61e:	89 ef       	ldi	r24, 0xF9	; 249
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	21 50       	subi	r18, 0x01	; 1
 624:	80 40       	sbci	r24, 0x00	; 0
 626:	90 40       	sbci	r25, 0x00	; 0
 628:	e1 f7       	brne	.-8      	; 0x622 <loop_stepper+0x48>
 62a:	00 c0       	rjmp	.+0      	; 0x62c <loop_stepper+0x52>
 62c:	00 00       	nop
	_delay_us(motor_time);
	
	STEPPING_A &= ~((1 << STEPPING_A_IN2) | (1 << STEPPING_A_IN3));
 62e:	8b b1       	in	r24, 0x0b	; 11
 630:	87 7e       	andi	r24, 0xE7	; 231
 632:	8b b9       	out	0x0b, r24	; 11
	STEPPING_A |= (1 << STEPPING_A_IN1) | (1 << STEPPING_A_IN4);
 634:	8b b1       	in	r24, 0x0b	; 11
 636:	84 62       	ori	r24, 0x24	; 36
 638:	8b b9       	out	0x0b, r24	; 11
	STEPPING_B &= ~((1 << STEPPING_B_IN2) | (1 << STEPPING_B_IN3));
 63a:	88 b1       	in	r24, 0x08	; 8
 63c:	89 7f       	andi	r24, 0xF9	; 249
 63e:	88 b9       	out	0x08, r24	; 8
	STEPPING_B |= (1 << STEPPING_B_IN1) | (1 << STEPPING_B_IN4);
 640:	88 b1       	in	r24, 0x08	; 8
 642:	89 60       	ori	r24, 0x09	; 9
 644:	88 b9       	out	0x08, r24	; 8
 646:	2f ef       	ldi	r18, 0xFF	; 255
 648:	89 ef       	ldi	r24, 0xF9	; 249
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	21 50       	subi	r18, 0x01	; 1
 64e:	80 40       	sbci	r24, 0x00	; 0
 650:	90 40       	sbci	r25, 0x00	; 0
 652:	e1 f7       	brne	.-8      	; 0x64c <loop_stepper+0x72>
 654:	00 c0       	rjmp	.+0      	; 0x656 <loop_stepper+0x7c>
 656:	00 00       	nop
	_delay_us(motor_time);

	STEPPING_A &= ~((1 << STEPPING_A_IN2) | (1 << STEPPING_A_IN4));
 658:	8b b1       	in	r24, 0x0b	; 11
 65a:	87 7d       	andi	r24, 0xD7	; 215
 65c:	8b b9       	out	0x0b, r24	; 11
	STEPPING_A |= (1 << STEPPING_A_IN1) | (1 << STEPPING_A_IN3);
 65e:	8b b1       	in	r24, 0x0b	; 11
 660:	84 61       	ori	r24, 0x14	; 20
 662:	8b b9       	out	0x0b, r24	; 11
	STEPPING_B &= ~((1 << STEPPING_B_IN2) | (1 << STEPPING_B_IN4));
 664:	88 b1       	in	r24, 0x08	; 8
 666:	85 7f       	andi	r24, 0xF5	; 245
 668:	88 b9       	out	0x08, r24	; 8
	STEPPING_B |= (1 << STEPPING_B_IN1) | (1 << STEPPING_B_IN3);
 66a:	88 b1       	in	r24, 0x08	; 8
 66c:	85 60       	ori	r24, 0x05	; 5
 66e:	88 b9       	out	0x08, r24	; 8
 670:	2f ef       	ldi	r18, 0xFF	; 255
 672:	89 ef       	ldi	r24, 0xF9	; 249
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	21 50       	subi	r18, 0x01	; 1
 678:	80 40       	sbci	r24, 0x00	; 0
 67a:	90 40       	sbci	r25, 0x00	; 0
 67c:	e1 f7       	brne	.-8      	; 0x676 <loop_stepper+0x9c>
 67e:	00 c0       	rjmp	.+0      	; 0x680 <loop_stepper+0xa6>
 680:	00 00       	nop
 682:	08 95       	ret

00000684 <ConveyorBeltStop>:

int ConveyorBeltStop (void) {
	
	int pass = 1;
	
	while (pass != 0) {
 684:	05 c0       	rjmp	.+10     	; 0x690 <ConveyorBeltStop+0xc>
		
		int temp;
		temp = ReceiveInfrared();
		
		if (temp != 0)	loop_stepper();
 686:	0e 94 ed 02 	call	0x5da	; 0x5da <loop_stepper>
 68a:	02 c0       	rjmp	.+4      	; 0x690 <ConveyorBeltStop+0xc>
		else if (temp == 0) return 0;
 68c:	89 2b       	or	r24, r25
 68e:	29 f0       	breq	.+10     	; 0x69a <ConveyorBeltStop+0x16>
	int pass = 1;
	
	while (pass != 0) {
		
		int temp;
		temp = ReceiveInfrared();
 690:	0e 94 44 02 	call	0x488	; 0x488 <ReceiveInfrared>
		
		if (temp != 0)	loop_stepper();
 694:	00 97       	sbiw	r24, 0x00	; 0
 696:	d1 f3       	breq	.-12     	; 0x68c <ConveyorBeltStop+0x8>
 698:	f6 cf       	rjmp	.-20     	; 0x686 <ConveyorBeltStop+0x2>
			//}
			//uart_index = 0;
			//process_data = 0;
		//}
	}
}
 69a:	80 e0       	ldi	r24, 0x00	; 0
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	08 95       	ret

000006a0 <main>:
char buffer_data[20];
char data;					// 수신 데이터


int main(void)
{
 6a0:	0f 93       	push	r16
 6a2:	1f 93       	push	r17
 6a4:	cf 93       	push	r28
 6a6:	df 93       	push	r29
	LED_DDR |= (1 << LED1) | (1 << LED2);
 6a8:	84 b1       	in	r24, 0x04	; 4
 6aa:	83 60       	ori	r24, 0x03	; 3
 6ac:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << switch1);
 6ae:	84 b1       	in	r24, 0x04	; 4
 6b0:	8b 7f       	andi	r24, 0xFB	; 251
 6b2:	84 b9       	out	0x04, r24	; 4
	
	char* temp;
	int move_num;
	
	// servo motor, stepping motor 초기화
	INIT_SERVO();
 6b4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <INIT_SERVO>
	INIT_STEPPER();
 6b8:	0e 94 d6 02 	call	0x5ac	; 0x5ac <INIT_STEPPER>
	UART_INIT();
 6bc:	0e 94 9c 04 	call	0x938	; 0x938 <UART_INIT>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6c0:	2f ef       	ldi	r18, 0xFF	; 255
 6c2:	83 ed       	ldi	r24, 0xD3	; 211
 6c4:	90 e3       	ldi	r25, 0x30	; 48
 6c6:	21 50       	subi	r18, 0x01	; 1
 6c8:	80 40       	sbci	r24, 0x00	; 0
 6ca:	90 40       	sbci	r25, 0x00	; 0
 6cc:	e1 f7       	brne	.-8      	; 0x6c6 <main+0x26>
 6ce:	00 c0       	rjmp	.+0      	; 0x6d0 <main+0x30>
 6d0:	00 00       	nop
	_delay_ms(1000);
	
	MoveRobotArm(1, 1);
 6d2:	61 e0       	ldi	r22, 0x01	; 1
 6d4:	70 e0       	ldi	r23, 0x00	; 0
 6d6:	81 e0       	ldi	r24, 0x01	; 1
 6d8:	0e 94 8b 02 	call	0x516	; 0x516 <MoveRobotArm>
	//MoveServo(SERVO_A(4), ANGLE(90), ANGLE(0));
	
	while (1){
		// LED ON
		PORTB |= (1 << LED1);
 6dc:	85 b1       	in	r24, 0x05	; 5
 6de:	81 60       	ori	r24, 0x01	; 1
 6e0:	85 b9       	out	0x05, r24	; 5
		
		INIT_SERVO();
 6e2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <INIT_SERVO>
 6e6:	2f ef       	ldi	r18, 0xFF	; 255
 6e8:	83 ed       	ldi	r24, 0xD3	; 211
 6ea:	90 e3       	ldi	r25, 0x30	; 48
 6ec:	21 50       	subi	r18, 0x01	; 1
 6ee:	80 40       	sbci	r24, 0x00	; 0
 6f0:	90 40       	sbci	r25, 0x00	; 0
 6f2:	e1 f7       	brne	.-8      	; 0x6ec <main+0x4c>
 6f4:	00 c0       	rjmp	.+0      	; 0x6f6 <main+0x56>
 6f6:	00 00       	nop
		_delay_ms(1000);

		int pass = 0;
		int part = 2;
 6f8:	c2 e0       	ldi	r28, 0x02	; 2
 6fa:	d0 e0       	ldi	r29, 0x00	; 0
		
		while (pass == 0) {
 6fc:	43 c0       	rjmp	.+134    	; 0x784 <main+0xe4>
			
			if (part == 1){
				/* PART1. 첫 번째 로봇팔 움직임 */
				
				// 로봇팔 움직일 수 있는지 확인
				UART_printString("====First Robot Arm====\n");
 6fe:	8b e4       	ldi	r24, 0x4B	; 75
 700:	93 e0       	ldi	r25, 0x03	; 3
 702:	0e 94 c2 04 	call	0x984	; 0x984 <UART_printString>
				move_num = WhichCanMove();
 706:	0e 94 48 01 	call	0x290	; 0x290 <WhichCanMove>
 70a:	8c 01       	movw	r16, r24
					//PORTB |= (1 << LED2);
					//UART_printString("end!!!!!\n");
					//return 0;
				//}
				
				if (move_num == 9){
 70c:	89 30       	cpi	r24, 0x09	; 9
 70e:	91 05       	cpc	r25, r1
 710:	e9 f1       	breq	.+122    	; 0x78c <main+0xec>
					PORTB |= (1 << LED2);
					return 0;
				}
				else if (0 <= move_num && move_num < 9) {
 712:	09 97       	sbiw	r24, 0x09	; 9
 714:	60 f4       	brcc	.+24     	; 0x72e <main+0x8e>
					UART_printString("YES!!!!!!!!!!\n");
 716:	84 e6       	ldi	r24, 0x64	; 100
 718:	93 e0       	ldi	r25, 0x03	; 3
 71a:	0e 94 c2 04 	call	0x984	; 0x984 <UART_printString>
					MoveRobotArm(1, move_num + 1);
 71e:	b8 01       	movw	r22, r16
 720:	6f 5f       	subi	r22, 0xFF	; 255
 722:	7f 4f       	sbci	r23, 0xFF	; 255
 724:	81 e0       	ldi	r24, 0x01	; 1
 726:	0e 94 8b 02 	call	0x516	; 0x516 <MoveRobotArm>
					part = 2;
 72a:	c2 e0       	ldi	r28, 0x02	; 2
 72c:	d0 e0       	ldi	r29, 0x00	; 0
				//move_num = (int)uart_temp;
				//MoveRobotArm(move_num + 1, 1);
				//part = 2;
			}
			
			if (part == 2) {
 72e:	c2 30       	cpi	r28, 0x02	; 2
 730:	d1 05       	cpc	r29, r1
 732:	d9 f4       	brne	.+54     	; 0x76a <main+0xca>
				
				/* PART2. 첫 번째 로봇팔 움직임이 종료된 후 적외선 센서 값 받아오기 */
				
				// 적외선센서 값 받아오기
				UART_printString("====First Infrared====\n");
 734:	83 e7       	ldi	r24, 0x73	; 115
 736:	93 e0       	ldi	r25, 0x03	; 3
 738:	0e 94 c2 04 	call	0x984	; 0x984 <UART_printString>
				int inf_value;
				inf_value = ReceiveInfrared();
 73c:	0e 94 44 02 	call	0x488	; 0x488 <ReceiveInfrared>
				
				// 적외선 센서값을 받아오지 않으면 (컨베이어 벨트 위에 상자가 놓여있지 않으면) part1으로 이동
				if (inf_value == 1) {
 740:	81 30       	cpi	r24, 0x01	; 1
 742:	91 05       	cpc	r25, r1
 744:	39 f4       	brne	.+14     	; 0x754 <main+0xb4>
					UART_printString("GO_CONV\n");
 746:	8b e8       	ldi	r24, 0x8B	; 139
 748:	93 e0       	ldi	r25, 0x03	; 3
 74a:	0e 94 c2 04 	call	0x984	; 0x984 <UART_printString>
					part = 3;
 74e:	c3 e0       	ldi	r28, 0x03	; 3
 750:	d0 e0       	ldi	r29, 0x00	; 0
 752:	0b c0       	rjmp	.+22     	; 0x76a <main+0xca>
				}
				else if (inf_value == 0) {
 754:	89 2b       	or	r24, r25
 756:	49 f4       	brne	.+18     	; 0x76a <main+0xca>
					PORTB |= (1 << LED2);
 758:	85 b1       	in	r24, 0x05	; 5
 75a:	82 60       	ori	r24, 0x02	; 2
 75c:	85 b9       	out	0x05, r24	; 5
					UART_printString("STOP_CONV\n");
 75e:	84 e9       	ldi	r24, 0x94	; 148
 760:	93 e0       	ldi	r25, 0x03	; 3
 762:	0e 94 c2 04 	call	0x984	; 0x984 <UART_printString>
					part = 1;
 766:	c1 e0       	ldi	r28, 0x01	; 1
 768:	d0 e0       	ldi	r29, 0x00	; 0
				}
			}
			
			if (part == 3) {
 76a:	c3 30       	cpi	r28, 0x03	; 3
 76c:	d1 05       	cpc	r29, r1
 76e:	51 f4       	brne	.+20     	; 0x784 <main+0xe4>
				/* PART3. 컨베이어 벨트 */
				UART_printString("====stepping motor====\n");
 770:	8f e9       	ldi	r24, 0x9F	; 159
 772:	93 e0       	ldi	r25, 0x03	; 3
 774:	0e 94 c2 04 	call	0x984	; 0x984 <UART_printString>

				int conv_move;
				conv_move = ConveyorBeltStop();
 778:	0e 94 42 03 	call	0x684	; 0x684 <ConveyorBeltStop>
				
				if (conv_move == 0)		part = 4;
 77c:	89 2b       	or	r24, r25
 77e:	11 f4       	brne	.+4      	; 0x784 <main+0xe4>
 780:	c4 e0       	ldi	r28, 0x04	; 4
 782:	d0 e0       	ldi	r29, 0x00	; 0
		int pass = 0;
		int part = 2;
		
		while (pass == 0) {
			
			if (part == 1){
 784:	c1 30       	cpi	r28, 0x01	; 1
 786:	d1 05       	cpc	r29, r1
 788:	91 f6       	brne	.-92     	; 0x72e <main+0x8e>
 78a:	b9 cf       	rjmp	.-142    	; 0x6fe <main+0x5e>
					//UART_printString("end!!!!!\n");
					//return 0;
				//}
				
				if (move_num == 9){
					PORTB |= (1 << LED2);
 78c:	85 b1       	in	r24, 0x05	; 5
 78e:	82 60       	ori	r24, 0x02	; 2
 790:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1 << LED1);
	}
	

	return 0;
}
 792:	80 e0       	ldi	r24, 0x00	; 0
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	df 91       	pop	r29
 798:	cf 91       	pop	r28
 79a:	1f 91       	pop	r17
 79c:	0f 91       	pop	r16
 79e:	08 95       	ret

000007a0 <pca9685_init>:
 7a0:	ff 92       	push	r15
 7a2:	0f 93       	push	r16
 7a4:	1f 93       	push	r17
 7a6:	cf 93       	push	r28
 7a8:	df 93       	push	r29
 7aa:	1f 92       	push	r1
 7ac:	cd b7       	in	r28, 0x3d	; 61
 7ae:	de b7       	in	r29, 0x3e	; 62
 7b0:	f8 2e       	mov	r15, r24
 7b2:	8b 01       	movw	r16, r22
 7b4:	70 93 e8 03 	sts	0x03E8, r23	; 0x8003e8 <globalFrequency+0x1>
 7b8:	60 93 e7 03 	sts	0x03E7, r22	; 0x8003e7 <globalFrequency>
 7bc:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <globalAddress>
 7c0:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_init>
 7c4:	80 e0       	ldi	r24, 0x00	; 0
 7c6:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2c_tx_start>
 7ca:	80 e4       	ldi	r24, 0x40	; 64
 7cc:	8f 0d       	add	r24, r15
 7ce:	0e 94 72 00 	call	0xe4	; 0xe4 <i2c_tx_address>
 7d2:	80 e0       	ldi	r24, 0x00	; 0
 7d4:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
 7d8:	81 e3       	ldi	r24, 0x31	; 49
 7da:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
 7de:	0e 94 b4 00 	call	0x168	; 0x168 <i2c_tx_stop>
 7e2:	89 ef       	ldi	r24, 0xF9	; 249
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	01 97       	sbiw	r24, 0x01	; 1
 7e8:	f1 f7       	brne	.-4      	; 0x7e6 <pca9685_init+0x46>
 7ea:	00 c0       	rjmp	.+0      	; 0x7ec <pca9685_init+0x4c>
 7ec:	00 00       	nop
 7ee:	b8 01       	movw	r22, r16
 7f0:	80 e0       	ldi	r24, 0x00	; 0
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__floatunsisf>
 7f8:	20 e0       	ldi	r18, 0x00	; 0
 7fa:	30 e0       	ldi	r19, 0x00	; 0
 7fc:	40 e8       	ldi	r20, 0x80	; 128
 7fe:	55 e4       	ldi	r21, 0x45	; 69
 800:	0e 94 74 06 	call	0xce8	; 0xce8 <__mulsf3>
 804:	2f e1       	ldi	r18, 0x1F	; 31
 806:	35 e8       	ldi	r19, 0x85	; 133
 808:	4b e6       	ldi	r20, 0x6B	; 107
 80a:	5f e3       	ldi	r21, 0x3F	; 63
 80c:	0e 94 74 06 	call	0xce8	; 0xce8 <__mulsf3>
 810:	9b 01       	movw	r18, r22
 812:	ac 01       	movw	r20, r24
 814:	60 e2       	ldi	r22, 0x20	; 32
 816:	7c eb       	ldi	r23, 0xBC	; 188
 818:	8e eb       	ldi	r24, 0xBE	; 190
 81a:	9b e4       	ldi	r25, 0x4B	; 75
 81c:	0e 94 45 05 	call	0xa8a	; 0xa8a <__divsf3>
 820:	20 e0       	ldi	r18, 0x00	; 0
 822:	30 e0       	ldi	r19, 0x00	; 0
 824:	40 e8       	ldi	r20, 0x80	; 128
 826:	5f e3       	ldi	r21, 0x3F	; 63
 828:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__subsf3>
 82c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__fixunssfsi>
 830:	69 83       	std	Y+1, r22	; 0x01
 832:	80 e0       	ldi	r24, 0x00	; 0
 834:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2c_tx_start>
 838:	80 e4       	ldi	r24, 0x40	; 64
 83a:	0e 94 72 00 	call	0xe4	; 0xe4 <i2c_tx_address>
 83e:	8e ef       	ldi	r24, 0xFE	; 254
 840:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
 844:	89 81       	ldd	r24, Y+1	; 0x01
 846:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
 84a:	0e 94 b4 00 	call	0x168	; 0x168 <i2c_tx_stop>
 84e:	89 ef       	ldi	r24, 0xF9	; 249
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	01 97       	sbiw	r24, 0x01	; 1
 854:	f1 f7       	brne	.-4      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 856:	00 c0       	rjmp	.+0      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 858:	00 00       	nop
 85a:	80 e0       	ldi	r24, 0x00	; 0
 85c:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2c_tx_start>
 860:	80 e4       	ldi	r24, 0x40	; 64
 862:	0e 94 72 00 	call	0xe4	; 0xe4 <i2c_tx_address>
 866:	80 e0       	ldi	r24, 0x00	; 0
 868:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
 86c:	81 ea       	ldi	r24, 0xA1	; 161
 86e:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
 872:	0e 94 b4 00 	call	0x168	; 0x168 <i2c_tx_stop>
 876:	89 ef       	ldi	r24, 0xF9	; 249
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	01 97       	sbiw	r24, 0x01	; 1
 87c:	f1 f7       	brne	.-4      	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
 87e:	00 c0       	rjmp	.+0      	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 880:	00 00       	nop
 882:	80 e0       	ldi	r24, 0x00	; 0
 884:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2c_tx_start>
 888:	80 e4       	ldi	r24, 0x40	; 64
 88a:	0e 94 72 00 	call	0xe4	; 0xe4 <i2c_tx_address>
 88e:	81 e0       	ldi	r24, 0x01	; 1
 890:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
 894:	84 e0       	ldi	r24, 0x04	; 4
 896:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
 89a:	0e 94 b4 00 	call	0x168	; 0x168 <i2c_tx_stop>
 89e:	0f 90       	pop	r0
 8a0:	df 91       	pop	r29
 8a2:	cf 91       	pop	r28
 8a4:	1f 91       	pop	r17
 8a6:	0f 91       	pop	r16
 8a8:	ff 90       	pop	r15
 8aa:	08 95       	ret

000008ac <pca9685_pwm>:
 8ac:	1f 93       	push	r17
 8ae:	cf 93       	push	r28
 8b0:	df 93       	push	r29
 8b2:	c8 2f       	mov	r28, r24
 8b4:	61 36       	cpi	r22, 0x61	; 97
 8b6:	89 e0       	ldi	r24, 0x09	; 9
 8b8:	78 07       	cpc	r23, r24
 8ba:	28 f4       	brcc	.+10     	; 0x8c6 <pca9685_pwm+0x1a>
 8bc:	68 35       	cpi	r22, 0x58	; 88
 8be:	82 e0       	ldi	r24, 0x02	; 2
 8c0:	78 07       	cpc	r23, r24
 8c2:	20 f0       	brcs	.+8      	; 0x8cc <pca9685_pwm+0x20>
 8c4:	05 c0       	rjmp	.+10     	; 0x8d0 <pca9685_pwm+0x24>
 8c6:	60 e6       	ldi	r22, 0x60	; 96
 8c8:	79 e0       	ldi	r23, 0x09	; 9
 8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <pca9685_pwm+0x24>
 8cc:	68 e5       	ldi	r22, 0x58	; 88
 8ce:	72 e0       	ldi	r23, 0x02	; 2
 8d0:	80 e0       	ldi	r24, 0x00	; 0
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__floatunsisf>
 8d8:	20 e0       	ldi	r18, 0x00	; 0
 8da:	30 e4       	ldi	r19, 0x40	; 64
 8dc:	4c e9       	ldi	r20, 0x9C	; 156
 8de:	56 e4       	ldi	r21, 0x46	; 70
 8e0:	0e 94 45 05 	call	0xa8a	; 0xa8a <__divsf3>
 8e4:	20 e0       	ldi	r18, 0x00	; 0
 8e6:	30 e0       	ldi	r19, 0x00	; 0
 8e8:	40 e8       	ldi	r20, 0x80	; 128
 8ea:	55 e4       	ldi	r21, 0x45	; 69
 8ec:	0e 94 74 06 	call	0xce8	; 0xce8 <__mulsf3>
 8f0:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__fixunssfsi>
 8f4:	16 2f       	mov	r17, r22
 8f6:	d7 2f       	mov	r29, r23
 8f8:	80 e0       	ldi	r24, 0x00	; 0
 8fa:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2c_tx_start>
 8fe:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <globalAddress>
 902:	80 5c       	subi	r24, 0xC0	; 192
 904:	0e 94 72 00 	call	0xe4	; 0xe4 <i2c_tx_address>
 908:	8c 2f       	mov	r24, r28
 90a:	88 0f       	add	r24, r24
 90c:	88 0f       	add	r24, r24
 90e:	8a 5f       	subi	r24, 0xFA	; 250
 910:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
 914:	80 e0       	ldi	r24, 0x00	; 0
 916:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
 91a:	80 e0       	ldi	r24, 0x00	; 0
 91c:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
 920:	81 2f       	mov	r24, r17
 922:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
 926:	8d 2f       	mov	r24, r29
 928:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_tx_byte>
 92c:	0e 94 b4 00 	call	0x168	; 0x168 <i2c_tx_stop>
 930:	df 91       	pop	r29
 932:	cf 91       	pop	r28
 934:	1f 91       	pop	r17
 936:	08 95       	ret

00000938 <UART_INIT>:
 938:	e0 ec       	ldi	r30, 0xC0	; 192
 93a:	f0 e0       	ldi	r31, 0x00	; 0
 93c:	80 81       	ld	r24, Z
 93e:	82 60       	ori	r24, 0x02	; 2
 940:	80 83       	st	Z, r24
 942:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 946:	8f ec       	ldi	r24, 0xCF	; 207
 948:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 94c:	e2 ec       	ldi	r30, 0xC2	; 194
 94e:	f0 e0       	ldi	r31, 0x00	; 0
 950:	80 81       	ld	r24, Z
 952:	86 60       	ori	r24, 0x06	; 6
 954:	80 83       	st	Z, r24
 956:	e1 ec       	ldi	r30, 0xC1	; 193
 958:	f0 e0       	ldi	r31, 0x00	; 0
 95a:	80 81       	ld	r24, Z
 95c:	80 61       	ori	r24, 0x10	; 16
 95e:	80 83       	st	Z, r24
 960:	80 81       	ld	r24, Z
 962:	88 60       	ori	r24, 0x08	; 8
 964:	80 83       	st	Z, r24
 966:	08 95       	ret

00000968 <UART_receive>:
 968:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 96c:	88 23       	and	r24, r24
 96e:	e4 f7       	brge	.-8      	; 0x968 <UART_receive>
 970:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 974:	08 95       	ret

00000976 <UART_transmit>:
 976:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 97a:	95 ff       	sbrs	r25, 5
 97c:	fc cf       	rjmp	.-8      	; 0x976 <UART_transmit>
 97e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 982:	08 95       	ret

00000984 <UART_printString>:
 984:	0f 93       	push	r16
 986:	1f 93       	push	r17
 988:	cf 93       	push	r28
 98a:	df 93       	push	r29
 98c:	8c 01       	movw	r16, r24
 98e:	c0 e0       	ldi	r28, 0x00	; 0
 990:	d0 e0       	ldi	r29, 0x00	; 0
 992:	03 c0       	rjmp	.+6      	; 0x99a <UART_printString+0x16>
 994:	0e 94 bb 04 	call	0x976	; 0x976 <UART_transmit>
 998:	21 96       	adiw	r28, 0x01	; 1
 99a:	f8 01       	movw	r30, r16
 99c:	ec 0f       	add	r30, r28
 99e:	fd 1f       	adc	r31, r29
 9a0:	80 81       	ld	r24, Z
 9a2:	81 11       	cpse	r24, r1
 9a4:	f7 cf       	rjmp	.-18     	; 0x994 <UART_printString+0x10>
 9a6:	df 91       	pop	r29
 9a8:	cf 91       	pop	r28
 9aa:	1f 91       	pop	r17
 9ac:	0f 91       	pop	r16
 9ae:	08 95       	ret

000009b0 <__subsf3>:
 9b0:	50 58       	subi	r21, 0x80	; 128

000009b2 <__addsf3>:
 9b2:	bb 27       	eor	r27, r27
 9b4:	aa 27       	eor	r26, r26
 9b6:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__addsf3x>
 9ba:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <__fp_round>
 9be:	0e 94 2c 06 	call	0xc58	; 0xc58 <__fp_pscA>
 9c2:	38 f0       	brcs	.+14     	; 0x9d2 <__addsf3+0x20>
 9c4:	0e 94 33 06 	call	0xc66	; 0xc66 <__fp_pscB>
 9c8:	20 f0       	brcs	.+8      	; 0x9d2 <__addsf3+0x20>
 9ca:	39 f4       	brne	.+14     	; 0x9da <__addsf3+0x28>
 9cc:	9f 3f       	cpi	r25, 0xFF	; 255
 9ce:	19 f4       	brne	.+6      	; 0x9d6 <__addsf3+0x24>
 9d0:	26 f4       	brtc	.+8      	; 0x9da <__addsf3+0x28>
 9d2:	0c 94 29 06 	jmp	0xc52	; 0xc52 <__fp_nan>
 9d6:	0e f4       	brtc	.+2      	; 0x9da <__addsf3+0x28>
 9d8:	e0 95       	com	r30
 9da:	e7 fb       	bst	r30, 7
 9dc:	0c 94 23 06 	jmp	0xc46	; 0xc46 <__fp_inf>

000009e0 <__addsf3x>:
 9e0:	e9 2f       	mov	r30, r25
 9e2:	0e 94 4b 06 	call	0xc96	; 0xc96 <__fp_split3>
 9e6:	58 f3       	brcs	.-42     	; 0x9be <__addsf3+0xc>
 9e8:	ba 17       	cp	r27, r26
 9ea:	62 07       	cpc	r22, r18
 9ec:	73 07       	cpc	r23, r19
 9ee:	84 07       	cpc	r24, r20
 9f0:	95 07       	cpc	r25, r21
 9f2:	20 f0       	brcs	.+8      	; 0x9fc <__addsf3x+0x1c>
 9f4:	79 f4       	brne	.+30     	; 0xa14 <__addsf3x+0x34>
 9f6:	a6 f5       	brtc	.+104    	; 0xa60 <__addsf3x+0x80>
 9f8:	0c 94 6d 06 	jmp	0xcda	; 0xcda <__fp_zero>
 9fc:	0e f4       	brtc	.+2      	; 0xa00 <__addsf3x+0x20>
 9fe:	e0 95       	com	r30
 a00:	0b 2e       	mov	r0, r27
 a02:	ba 2f       	mov	r27, r26
 a04:	a0 2d       	mov	r26, r0
 a06:	0b 01       	movw	r0, r22
 a08:	b9 01       	movw	r22, r18
 a0a:	90 01       	movw	r18, r0
 a0c:	0c 01       	movw	r0, r24
 a0e:	ca 01       	movw	r24, r20
 a10:	a0 01       	movw	r20, r0
 a12:	11 24       	eor	r1, r1
 a14:	ff 27       	eor	r31, r31
 a16:	59 1b       	sub	r21, r25
 a18:	99 f0       	breq	.+38     	; 0xa40 <__addsf3x+0x60>
 a1a:	59 3f       	cpi	r21, 0xF9	; 249
 a1c:	50 f4       	brcc	.+20     	; 0xa32 <__addsf3x+0x52>
 a1e:	50 3e       	cpi	r21, 0xE0	; 224
 a20:	68 f1       	brcs	.+90     	; 0xa7c <__addsf3x+0x9c>
 a22:	1a 16       	cp	r1, r26
 a24:	f0 40       	sbci	r31, 0x00	; 0
 a26:	a2 2f       	mov	r26, r18
 a28:	23 2f       	mov	r18, r19
 a2a:	34 2f       	mov	r19, r20
 a2c:	44 27       	eor	r20, r20
 a2e:	58 5f       	subi	r21, 0xF8	; 248
 a30:	f3 cf       	rjmp	.-26     	; 0xa18 <__addsf3x+0x38>
 a32:	46 95       	lsr	r20
 a34:	37 95       	ror	r19
 a36:	27 95       	ror	r18
 a38:	a7 95       	ror	r26
 a3a:	f0 40       	sbci	r31, 0x00	; 0
 a3c:	53 95       	inc	r21
 a3e:	c9 f7       	brne	.-14     	; 0xa32 <__addsf3x+0x52>
 a40:	7e f4       	brtc	.+30     	; 0xa60 <__addsf3x+0x80>
 a42:	1f 16       	cp	r1, r31
 a44:	ba 0b       	sbc	r27, r26
 a46:	62 0b       	sbc	r22, r18
 a48:	73 0b       	sbc	r23, r19
 a4a:	84 0b       	sbc	r24, r20
 a4c:	ba f0       	brmi	.+46     	; 0xa7c <__addsf3x+0x9c>
 a4e:	91 50       	subi	r25, 0x01	; 1
 a50:	a1 f0       	breq	.+40     	; 0xa7a <__addsf3x+0x9a>
 a52:	ff 0f       	add	r31, r31
 a54:	bb 1f       	adc	r27, r27
 a56:	66 1f       	adc	r22, r22
 a58:	77 1f       	adc	r23, r23
 a5a:	88 1f       	adc	r24, r24
 a5c:	c2 f7       	brpl	.-16     	; 0xa4e <__addsf3x+0x6e>
 a5e:	0e c0       	rjmp	.+28     	; 0xa7c <__addsf3x+0x9c>
 a60:	ba 0f       	add	r27, r26
 a62:	62 1f       	adc	r22, r18
 a64:	73 1f       	adc	r23, r19
 a66:	84 1f       	adc	r24, r20
 a68:	48 f4       	brcc	.+18     	; 0xa7c <__addsf3x+0x9c>
 a6a:	87 95       	ror	r24
 a6c:	77 95       	ror	r23
 a6e:	67 95       	ror	r22
 a70:	b7 95       	ror	r27
 a72:	f7 95       	ror	r31
 a74:	9e 3f       	cpi	r25, 0xFE	; 254
 a76:	08 f0       	brcs	.+2      	; 0xa7a <__addsf3x+0x9a>
 a78:	b0 cf       	rjmp	.-160    	; 0x9da <__addsf3+0x28>
 a7a:	93 95       	inc	r25
 a7c:	88 0f       	add	r24, r24
 a7e:	08 f0       	brcs	.+2      	; 0xa82 <__addsf3x+0xa2>
 a80:	99 27       	eor	r25, r25
 a82:	ee 0f       	add	r30, r30
 a84:	97 95       	ror	r25
 a86:	87 95       	ror	r24
 a88:	08 95       	ret

00000a8a <__divsf3>:
 a8a:	0e 94 59 05 	call	0xab2	; 0xab2 <__divsf3x>
 a8e:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <__fp_round>
 a92:	0e 94 33 06 	call	0xc66	; 0xc66 <__fp_pscB>
 a96:	58 f0       	brcs	.+22     	; 0xaae <__divsf3+0x24>
 a98:	0e 94 2c 06 	call	0xc58	; 0xc58 <__fp_pscA>
 a9c:	40 f0       	brcs	.+16     	; 0xaae <__divsf3+0x24>
 a9e:	29 f4       	brne	.+10     	; 0xaaa <__divsf3+0x20>
 aa0:	5f 3f       	cpi	r21, 0xFF	; 255
 aa2:	29 f0       	breq	.+10     	; 0xaae <__divsf3+0x24>
 aa4:	0c 94 23 06 	jmp	0xc46	; 0xc46 <__fp_inf>
 aa8:	51 11       	cpse	r21, r1
 aaa:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <__fp_szero>
 aae:	0c 94 29 06 	jmp	0xc52	; 0xc52 <__fp_nan>

00000ab2 <__divsf3x>:
 ab2:	0e 94 4b 06 	call	0xc96	; 0xc96 <__fp_split3>
 ab6:	68 f3       	brcs	.-38     	; 0xa92 <__divsf3+0x8>

00000ab8 <__divsf3_pse>:
 ab8:	99 23       	and	r25, r25
 aba:	b1 f3       	breq	.-20     	; 0xaa8 <__divsf3+0x1e>
 abc:	55 23       	and	r21, r21
 abe:	91 f3       	breq	.-28     	; 0xaa4 <__divsf3+0x1a>
 ac0:	95 1b       	sub	r25, r21
 ac2:	55 0b       	sbc	r21, r21
 ac4:	bb 27       	eor	r27, r27
 ac6:	aa 27       	eor	r26, r26
 ac8:	62 17       	cp	r22, r18
 aca:	73 07       	cpc	r23, r19
 acc:	84 07       	cpc	r24, r20
 ace:	38 f0       	brcs	.+14     	; 0xade <__divsf3_pse+0x26>
 ad0:	9f 5f       	subi	r25, 0xFF	; 255
 ad2:	5f 4f       	sbci	r21, 0xFF	; 255
 ad4:	22 0f       	add	r18, r18
 ad6:	33 1f       	adc	r19, r19
 ad8:	44 1f       	adc	r20, r20
 ada:	aa 1f       	adc	r26, r26
 adc:	a9 f3       	breq	.-22     	; 0xac8 <__divsf3_pse+0x10>
 ade:	35 d0       	rcall	.+106    	; 0xb4a <__divsf3_pse+0x92>
 ae0:	0e 2e       	mov	r0, r30
 ae2:	3a f0       	brmi	.+14     	; 0xaf2 <__divsf3_pse+0x3a>
 ae4:	e0 e8       	ldi	r30, 0x80	; 128
 ae6:	32 d0       	rcall	.+100    	; 0xb4c <__divsf3_pse+0x94>
 ae8:	91 50       	subi	r25, 0x01	; 1
 aea:	50 40       	sbci	r21, 0x00	; 0
 aec:	e6 95       	lsr	r30
 aee:	00 1c       	adc	r0, r0
 af0:	ca f7       	brpl	.-14     	; 0xae4 <__divsf3_pse+0x2c>
 af2:	2b d0       	rcall	.+86     	; 0xb4a <__divsf3_pse+0x92>
 af4:	fe 2f       	mov	r31, r30
 af6:	29 d0       	rcall	.+82     	; 0xb4a <__divsf3_pse+0x92>
 af8:	66 0f       	add	r22, r22
 afa:	77 1f       	adc	r23, r23
 afc:	88 1f       	adc	r24, r24
 afe:	bb 1f       	adc	r27, r27
 b00:	26 17       	cp	r18, r22
 b02:	37 07       	cpc	r19, r23
 b04:	48 07       	cpc	r20, r24
 b06:	ab 07       	cpc	r26, r27
 b08:	b0 e8       	ldi	r27, 0x80	; 128
 b0a:	09 f0       	breq	.+2      	; 0xb0e <__divsf3_pse+0x56>
 b0c:	bb 0b       	sbc	r27, r27
 b0e:	80 2d       	mov	r24, r0
 b10:	bf 01       	movw	r22, r30
 b12:	ff 27       	eor	r31, r31
 b14:	93 58       	subi	r25, 0x83	; 131
 b16:	5f 4f       	sbci	r21, 0xFF	; 255
 b18:	3a f0       	brmi	.+14     	; 0xb28 <__divsf3_pse+0x70>
 b1a:	9e 3f       	cpi	r25, 0xFE	; 254
 b1c:	51 05       	cpc	r21, r1
 b1e:	78 f0       	brcs	.+30     	; 0xb3e <__divsf3_pse+0x86>
 b20:	0c 94 23 06 	jmp	0xc46	; 0xc46 <__fp_inf>
 b24:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <__fp_szero>
 b28:	5f 3f       	cpi	r21, 0xFF	; 255
 b2a:	e4 f3       	brlt	.-8      	; 0xb24 <__divsf3_pse+0x6c>
 b2c:	98 3e       	cpi	r25, 0xE8	; 232
 b2e:	d4 f3       	brlt	.-12     	; 0xb24 <__divsf3_pse+0x6c>
 b30:	86 95       	lsr	r24
 b32:	77 95       	ror	r23
 b34:	67 95       	ror	r22
 b36:	b7 95       	ror	r27
 b38:	f7 95       	ror	r31
 b3a:	9f 5f       	subi	r25, 0xFF	; 255
 b3c:	c9 f7       	brne	.-14     	; 0xb30 <__divsf3_pse+0x78>
 b3e:	88 0f       	add	r24, r24
 b40:	91 1d       	adc	r25, r1
 b42:	96 95       	lsr	r25
 b44:	87 95       	ror	r24
 b46:	97 f9       	bld	r25, 7
 b48:	08 95       	ret
 b4a:	e1 e0       	ldi	r30, 0x01	; 1
 b4c:	66 0f       	add	r22, r22
 b4e:	77 1f       	adc	r23, r23
 b50:	88 1f       	adc	r24, r24
 b52:	bb 1f       	adc	r27, r27
 b54:	62 17       	cp	r22, r18
 b56:	73 07       	cpc	r23, r19
 b58:	84 07       	cpc	r24, r20
 b5a:	ba 07       	cpc	r27, r26
 b5c:	20 f0       	brcs	.+8      	; 0xb66 <__divsf3_pse+0xae>
 b5e:	62 1b       	sub	r22, r18
 b60:	73 0b       	sbc	r23, r19
 b62:	84 0b       	sbc	r24, r20
 b64:	ba 0b       	sbc	r27, r26
 b66:	ee 1f       	adc	r30, r30
 b68:	88 f7       	brcc	.-30     	; 0xb4c <__divsf3_pse+0x94>
 b6a:	e0 95       	com	r30
 b6c:	08 95       	ret

00000b6e <__fixunssfsi>:
 b6e:	0e 94 53 06 	call	0xca6	; 0xca6 <__fp_splitA>
 b72:	88 f0       	brcs	.+34     	; 0xb96 <__fixunssfsi+0x28>
 b74:	9f 57       	subi	r25, 0x7F	; 127
 b76:	98 f0       	brcs	.+38     	; 0xb9e <__fixunssfsi+0x30>
 b78:	b9 2f       	mov	r27, r25
 b7a:	99 27       	eor	r25, r25
 b7c:	b7 51       	subi	r27, 0x17	; 23
 b7e:	b0 f0       	brcs	.+44     	; 0xbac <__fixunssfsi+0x3e>
 b80:	e1 f0       	breq	.+56     	; 0xbba <__fixunssfsi+0x4c>
 b82:	66 0f       	add	r22, r22
 b84:	77 1f       	adc	r23, r23
 b86:	88 1f       	adc	r24, r24
 b88:	99 1f       	adc	r25, r25
 b8a:	1a f0       	brmi	.+6      	; 0xb92 <__fixunssfsi+0x24>
 b8c:	ba 95       	dec	r27
 b8e:	c9 f7       	brne	.-14     	; 0xb82 <__fixunssfsi+0x14>
 b90:	14 c0       	rjmp	.+40     	; 0xbba <__fixunssfsi+0x4c>
 b92:	b1 30       	cpi	r27, 0x01	; 1
 b94:	91 f0       	breq	.+36     	; 0xbba <__fixunssfsi+0x4c>
 b96:	0e 94 6d 06 	call	0xcda	; 0xcda <__fp_zero>
 b9a:	b1 e0       	ldi	r27, 0x01	; 1
 b9c:	08 95       	ret
 b9e:	0c 94 6d 06 	jmp	0xcda	; 0xcda <__fp_zero>
 ba2:	67 2f       	mov	r22, r23
 ba4:	78 2f       	mov	r23, r24
 ba6:	88 27       	eor	r24, r24
 ba8:	b8 5f       	subi	r27, 0xF8	; 248
 baa:	39 f0       	breq	.+14     	; 0xbba <__fixunssfsi+0x4c>
 bac:	b9 3f       	cpi	r27, 0xF9	; 249
 bae:	cc f3       	brlt	.-14     	; 0xba2 <__fixunssfsi+0x34>
 bb0:	86 95       	lsr	r24
 bb2:	77 95       	ror	r23
 bb4:	67 95       	ror	r22
 bb6:	b3 95       	inc	r27
 bb8:	d9 f7       	brne	.-10     	; 0xbb0 <__fixunssfsi+0x42>
 bba:	3e f4       	brtc	.+14     	; 0xbca <__fixunssfsi+0x5c>
 bbc:	90 95       	com	r25
 bbe:	80 95       	com	r24
 bc0:	70 95       	com	r23
 bc2:	61 95       	neg	r22
 bc4:	7f 4f       	sbci	r23, 0xFF	; 255
 bc6:	8f 4f       	sbci	r24, 0xFF	; 255
 bc8:	9f 4f       	sbci	r25, 0xFF	; 255
 bca:	08 95       	ret

00000bcc <__floatunsisf>:
 bcc:	e8 94       	clt
 bce:	09 c0       	rjmp	.+18     	; 0xbe2 <__floatsisf+0x12>

00000bd0 <__floatsisf>:
 bd0:	97 fb       	bst	r25, 7
 bd2:	3e f4       	brtc	.+14     	; 0xbe2 <__floatsisf+0x12>
 bd4:	90 95       	com	r25
 bd6:	80 95       	com	r24
 bd8:	70 95       	com	r23
 bda:	61 95       	neg	r22
 bdc:	7f 4f       	sbci	r23, 0xFF	; 255
 bde:	8f 4f       	sbci	r24, 0xFF	; 255
 be0:	9f 4f       	sbci	r25, 0xFF	; 255
 be2:	99 23       	and	r25, r25
 be4:	a9 f0       	breq	.+42     	; 0xc10 <__floatsisf+0x40>
 be6:	f9 2f       	mov	r31, r25
 be8:	96 e9       	ldi	r25, 0x96	; 150
 bea:	bb 27       	eor	r27, r27
 bec:	93 95       	inc	r25
 bee:	f6 95       	lsr	r31
 bf0:	87 95       	ror	r24
 bf2:	77 95       	ror	r23
 bf4:	67 95       	ror	r22
 bf6:	b7 95       	ror	r27
 bf8:	f1 11       	cpse	r31, r1
 bfa:	f8 cf       	rjmp	.-16     	; 0xbec <__floatsisf+0x1c>
 bfc:	fa f4       	brpl	.+62     	; 0xc3c <__floatsisf+0x6c>
 bfe:	bb 0f       	add	r27, r27
 c00:	11 f4       	brne	.+4      	; 0xc06 <__floatsisf+0x36>
 c02:	60 ff       	sbrs	r22, 0
 c04:	1b c0       	rjmp	.+54     	; 0xc3c <__floatsisf+0x6c>
 c06:	6f 5f       	subi	r22, 0xFF	; 255
 c08:	7f 4f       	sbci	r23, 0xFF	; 255
 c0a:	8f 4f       	sbci	r24, 0xFF	; 255
 c0c:	9f 4f       	sbci	r25, 0xFF	; 255
 c0e:	16 c0       	rjmp	.+44     	; 0xc3c <__floatsisf+0x6c>
 c10:	88 23       	and	r24, r24
 c12:	11 f0       	breq	.+4      	; 0xc18 <__floatsisf+0x48>
 c14:	96 e9       	ldi	r25, 0x96	; 150
 c16:	11 c0       	rjmp	.+34     	; 0xc3a <__floatsisf+0x6a>
 c18:	77 23       	and	r23, r23
 c1a:	21 f0       	breq	.+8      	; 0xc24 <__floatsisf+0x54>
 c1c:	9e e8       	ldi	r25, 0x8E	; 142
 c1e:	87 2f       	mov	r24, r23
 c20:	76 2f       	mov	r23, r22
 c22:	05 c0       	rjmp	.+10     	; 0xc2e <__floatsisf+0x5e>
 c24:	66 23       	and	r22, r22
 c26:	71 f0       	breq	.+28     	; 0xc44 <__floatsisf+0x74>
 c28:	96 e8       	ldi	r25, 0x86	; 134
 c2a:	86 2f       	mov	r24, r22
 c2c:	70 e0       	ldi	r23, 0x00	; 0
 c2e:	60 e0       	ldi	r22, 0x00	; 0
 c30:	2a f0       	brmi	.+10     	; 0xc3c <__floatsisf+0x6c>
 c32:	9a 95       	dec	r25
 c34:	66 0f       	add	r22, r22
 c36:	77 1f       	adc	r23, r23
 c38:	88 1f       	adc	r24, r24
 c3a:	da f7       	brpl	.-10     	; 0xc32 <__floatsisf+0x62>
 c3c:	88 0f       	add	r24, r24
 c3e:	96 95       	lsr	r25
 c40:	87 95       	ror	r24
 c42:	97 f9       	bld	r25, 7
 c44:	08 95       	ret

00000c46 <__fp_inf>:
 c46:	97 f9       	bld	r25, 7
 c48:	9f 67       	ori	r25, 0x7F	; 127
 c4a:	80 e8       	ldi	r24, 0x80	; 128
 c4c:	70 e0       	ldi	r23, 0x00	; 0
 c4e:	60 e0       	ldi	r22, 0x00	; 0
 c50:	08 95       	ret

00000c52 <__fp_nan>:
 c52:	9f ef       	ldi	r25, 0xFF	; 255
 c54:	80 ec       	ldi	r24, 0xC0	; 192
 c56:	08 95       	ret

00000c58 <__fp_pscA>:
 c58:	00 24       	eor	r0, r0
 c5a:	0a 94       	dec	r0
 c5c:	16 16       	cp	r1, r22
 c5e:	17 06       	cpc	r1, r23
 c60:	18 06       	cpc	r1, r24
 c62:	09 06       	cpc	r0, r25
 c64:	08 95       	ret

00000c66 <__fp_pscB>:
 c66:	00 24       	eor	r0, r0
 c68:	0a 94       	dec	r0
 c6a:	12 16       	cp	r1, r18
 c6c:	13 06       	cpc	r1, r19
 c6e:	14 06       	cpc	r1, r20
 c70:	05 06       	cpc	r0, r21
 c72:	08 95       	ret

00000c74 <__fp_round>:
 c74:	09 2e       	mov	r0, r25
 c76:	03 94       	inc	r0
 c78:	00 0c       	add	r0, r0
 c7a:	11 f4       	brne	.+4      	; 0xc80 <__fp_round+0xc>
 c7c:	88 23       	and	r24, r24
 c7e:	52 f0       	brmi	.+20     	; 0xc94 <__fp_round+0x20>
 c80:	bb 0f       	add	r27, r27
 c82:	40 f4       	brcc	.+16     	; 0xc94 <__fp_round+0x20>
 c84:	bf 2b       	or	r27, r31
 c86:	11 f4       	brne	.+4      	; 0xc8c <__fp_round+0x18>
 c88:	60 ff       	sbrs	r22, 0
 c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__fp_round+0x20>
 c8c:	6f 5f       	subi	r22, 0xFF	; 255
 c8e:	7f 4f       	sbci	r23, 0xFF	; 255
 c90:	8f 4f       	sbci	r24, 0xFF	; 255
 c92:	9f 4f       	sbci	r25, 0xFF	; 255
 c94:	08 95       	ret

00000c96 <__fp_split3>:
 c96:	57 fd       	sbrc	r21, 7
 c98:	90 58       	subi	r25, 0x80	; 128
 c9a:	44 0f       	add	r20, r20
 c9c:	55 1f       	adc	r21, r21
 c9e:	59 f0       	breq	.+22     	; 0xcb6 <__fp_splitA+0x10>
 ca0:	5f 3f       	cpi	r21, 0xFF	; 255
 ca2:	71 f0       	breq	.+28     	; 0xcc0 <__fp_splitA+0x1a>
 ca4:	47 95       	ror	r20

00000ca6 <__fp_splitA>:
 ca6:	88 0f       	add	r24, r24
 ca8:	97 fb       	bst	r25, 7
 caa:	99 1f       	adc	r25, r25
 cac:	61 f0       	breq	.+24     	; 0xcc6 <__fp_splitA+0x20>
 cae:	9f 3f       	cpi	r25, 0xFF	; 255
 cb0:	79 f0       	breq	.+30     	; 0xcd0 <__fp_splitA+0x2a>
 cb2:	87 95       	ror	r24
 cb4:	08 95       	ret
 cb6:	12 16       	cp	r1, r18
 cb8:	13 06       	cpc	r1, r19
 cba:	14 06       	cpc	r1, r20
 cbc:	55 1f       	adc	r21, r21
 cbe:	f2 cf       	rjmp	.-28     	; 0xca4 <__fp_split3+0xe>
 cc0:	46 95       	lsr	r20
 cc2:	f1 df       	rcall	.-30     	; 0xca6 <__fp_splitA>
 cc4:	08 c0       	rjmp	.+16     	; 0xcd6 <__fp_splitA+0x30>
 cc6:	16 16       	cp	r1, r22
 cc8:	17 06       	cpc	r1, r23
 cca:	18 06       	cpc	r1, r24
 ccc:	99 1f       	adc	r25, r25
 cce:	f1 cf       	rjmp	.-30     	; 0xcb2 <__fp_splitA+0xc>
 cd0:	86 95       	lsr	r24
 cd2:	71 05       	cpc	r23, r1
 cd4:	61 05       	cpc	r22, r1
 cd6:	08 94       	sec
 cd8:	08 95       	ret

00000cda <__fp_zero>:
 cda:	e8 94       	clt

00000cdc <__fp_szero>:
 cdc:	bb 27       	eor	r27, r27
 cde:	66 27       	eor	r22, r22
 ce0:	77 27       	eor	r23, r23
 ce2:	cb 01       	movw	r24, r22
 ce4:	97 f9       	bld	r25, 7
 ce6:	08 95       	ret

00000ce8 <__mulsf3>:
 ce8:	0e 94 87 06 	call	0xd0e	; 0xd0e <__mulsf3x>
 cec:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <__fp_round>
 cf0:	0e 94 2c 06 	call	0xc58	; 0xc58 <__fp_pscA>
 cf4:	38 f0       	brcs	.+14     	; 0xd04 <__mulsf3+0x1c>
 cf6:	0e 94 33 06 	call	0xc66	; 0xc66 <__fp_pscB>
 cfa:	20 f0       	brcs	.+8      	; 0xd04 <__mulsf3+0x1c>
 cfc:	95 23       	and	r25, r21
 cfe:	11 f0       	breq	.+4      	; 0xd04 <__mulsf3+0x1c>
 d00:	0c 94 23 06 	jmp	0xc46	; 0xc46 <__fp_inf>
 d04:	0c 94 29 06 	jmp	0xc52	; 0xc52 <__fp_nan>
 d08:	11 24       	eor	r1, r1
 d0a:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <__fp_szero>

00000d0e <__mulsf3x>:
 d0e:	0e 94 4b 06 	call	0xc96	; 0xc96 <__fp_split3>
 d12:	70 f3       	brcs	.-36     	; 0xcf0 <__mulsf3+0x8>

00000d14 <__mulsf3_pse>:
 d14:	95 9f       	mul	r25, r21
 d16:	c1 f3       	breq	.-16     	; 0xd08 <__mulsf3+0x20>
 d18:	95 0f       	add	r25, r21
 d1a:	50 e0       	ldi	r21, 0x00	; 0
 d1c:	55 1f       	adc	r21, r21
 d1e:	62 9f       	mul	r22, r18
 d20:	f0 01       	movw	r30, r0
 d22:	72 9f       	mul	r23, r18
 d24:	bb 27       	eor	r27, r27
 d26:	f0 0d       	add	r31, r0
 d28:	b1 1d       	adc	r27, r1
 d2a:	63 9f       	mul	r22, r19
 d2c:	aa 27       	eor	r26, r26
 d2e:	f0 0d       	add	r31, r0
 d30:	b1 1d       	adc	r27, r1
 d32:	aa 1f       	adc	r26, r26
 d34:	64 9f       	mul	r22, r20
 d36:	66 27       	eor	r22, r22
 d38:	b0 0d       	add	r27, r0
 d3a:	a1 1d       	adc	r26, r1
 d3c:	66 1f       	adc	r22, r22
 d3e:	82 9f       	mul	r24, r18
 d40:	22 27       	eor	r18, r18
 d42:	b0 0d       	add	r27, r0
 d44:	a1 1d       	adc	r26, r1
 d46:	62 1f       	adc	r22, r18
 d48:	73 9f       	mul	r23, r19
 d4a:	b0 0d       	add	r27, r0
 d4c:	a1 1d       	adc	r26, r1
 d4e:	62 1f       	adc	r22, r18
 d50:	83 9f       	mul	r24, r19
 d52:	a0 0d       	add	r26, r0
 d54:	61 1d       	adc	r22, r1
 d56:	22 1f       	adc	r18, r18
 d58:	74 9f       	mul	r23, r20
 d5a:	33 27       	eor	r19, r19
 d5c:	a0 0d       	add	r26, r0
 d5e:	61 1d       	adc	r22, r1
 d60:	23 1f       	adc	r18, r19
 d62:	84 9f       	mul	r24, r20
 d64:	60 0d       	add	r22, r0
 d66:	21 1d       	adc	r18, r1
 d68:	82 2f       	mov	r24, r18
 d6a:	76 2f       	mov	r23, r22
 d6c:	6a 2f       	mov	r22, r26
 d6e:	11 24       	eor	r1, r1
 d70:	9f 57       	subi	r25, 0x7F	; 127
 d72:	50 40       	sbci	r21, 0x00	; 0
 d74:	9a f0       	brmi	.+38     	; 0xd9c <__mulsf3_pse+0x88>
 d76:	f1 f0       	breq	.+60     	; 0xdb4 <__mulsf3_pse+0xa0>
 d78:	88 23       	and	r24, r24
 d7a:	4a f0       	brmi	.+18     	; 0xd8e <__mulsf3_pse+0x7a>
 d7c:	ee 0f       	add	r30, r30
 d7e:	ff 1f       	adc	r31, r31
 d80:	bb 1f       	adc	r27, r27
 d82:	66 1f       	adc	r22, r22
 d84:	77 1f       	adc	r23, r23
 d86:	88 1f       	adc	r24, r24
 d88:	91 50       	subi	r25, 0x01	; 1
 d8a:	50 40       	sbci	r21, 0x00	; 0
 d8c:	a9 f7       	brne	.-22     	; 0xd78 <__mulsf3_pse+0x64>
 d8e:	9e 3f       	cpi	r25, 0xFE	; 254
 d90:	51 05       	cpc	r21, r1
 d92:	80 f0       	brcs	.+32     	; 0xdb4 <__mulsf3_pse+0xa0>
 d94:	0c 94 23 06 	jmp	0xc46	; 0xc46 <__fp_inf>
 d98:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <__fp_szero>
 d9c:	5f 3f       	cpi	r21, 0xFF	; 255
 d9e:	e4 f3       	brlt	.-8      	; 0xd98 <__mulsf3_pse+0x84>
 da0:	98 3e       	cpi	r25, 0xE8	; 232
 da2:	d4 f3       	brlt	.-12     	; 0xd98 <__mulsf3_pse+0x84>
 da4:	86 95       	lsr	r24
 da6:	77 95       	ror	r23
 da8:	67 95       	ror	r22
 daa:	b7 95       	ror	r27
 dac:	f7 95       	ror	r31
 dae:	e7 95       	ror	r30
 db0:	9f 5f       	subi	r25, 0xFF	; 255
 db2:	c1 f7       	brne	.-16     	; 0xda4 <__mulsf3_pse+0x90>
 db4:	fe 2b       	or	r31, r30
 db6:	88 0f       	add	r24, r24
 db8:	91 1d       	adc	r25, r1
 dba:	96 95       	lsr	r25
 dbc:	87 95       	ror	r24
 dbe:	97 f9       	bld	r25, 7
 dc0:	08 95       	ret

00000dc2 <strcmp>:
 dc2:	fb 01       	movw	r30, r22
 dc4:	dc 01       	movw	r26, r24
 dc6:	8d 91       	ld	r24, X+
 dc8:	01 90       	ld	r0, Z+
 dca:	80 19       	sub	r24, r0
 dcc:	01 10       	cpse	r0, r1
 dce:	d9 f3       	breq	.-10     	; 0xdc6 <strcmp+0x4>
 dd0:	99 0b       	sbc	r25, r25
 dd2:	08 95       	ret

00000dd4 <strcpy>:
 dd4:	fb 01       	movw	r30, r22
 dd6:	dc 01       	movw	r26, r24
 dd8:	01 90       	ld	r0, Z+
 dda:	0d 92       	st	X+, r0
 ddc:	00 20       	and	r0, r0
 dde:	e1 f7       	brne	.-8      	; 0xdd8 <strcpy+0x4>
 de0:	08 95       	ret

00000de2 <_exit>:
 de2:	f8 94       	cli

00000de4 <__stop_program>:
 de4:	ff cf       	rjmp	.-2      	; 0xde4 <__stop_program>
