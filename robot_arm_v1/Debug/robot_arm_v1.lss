
robot_arm_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  0000032c  000003a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000032c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d2e  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000085d  00000000  00000000  00001212  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006be  00000000  00000000  00001a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  00002130  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a2  00000000  00000000  00002270  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005e1  00000000  00000000  00002712  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002cf3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e2       	ldi	r30, 0x2C	; 44
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 35       	cpi	r26, 0x52	; 82
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e5       	ldi	r26, 0x52	; 82
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 35       	cpi	r26, 0x52	; 82
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <main>
  9e:	0c 94 94 01 	jmp	0x328	; 0x328 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <UART_INIT>:
﻿#include "UART.h"

void UART_INIT(void) {
	UCSR0A |= _BV(U2X0);		// 2배속 모드
  a6:	e0 ec       	ldi	r30, 0xC0	; 192
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	80 83       	st	Z, r24

	UBRR0H = 0x00;				// 통신 속도(보율) 설정
  b0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = 207;
  b4:	8f ec       	ldi	r24, 0xCF	; 207
  b6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// 비동기, 8비트 데이터, 패리티 없음, 1비트 정지 비트 모드
	UCSR0C |= 0x06;
  ba:	e2 ec       	ldi	r30, 0xC2	; 194
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	86 60       	ori	r24, 0x06	; 6
  c2:	80 83       	st	Z, r24
	
	// 송수신 가능
	UCSR0B |= _BV(RXEN0);
  c4:	e1 ec       	ldi	r30, 0xC1	; 193
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	80 61       	ori	r24, 0x10	; 16
  cc:	80 83       	st	Z, r24
	UCSR0B |= _BV(TXEN0);
  ce:	80 81       	ld	r24, Z
  d0:	88 60       	ori	r24, 0x08	; 8
  d2:	80 83       	st	Z, r24
  d4:	08 95       	ret

000000d6 <UART_receive>:
}

unsigned char UART_receive(void)		// 1바이트 수신
{
	while( !(UCSR0A & (1<<RXC0)) );		// 데이터 수신 대기
  d6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  da:	88 23       	and	r24, r24
  dc:	e4 f7       	brge	.-8      	; 0xd6 <UART_receive>
	return UDR0;
  de:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  e2:	08 95       	ret

000000e4 <UART_transmit>:

void UART_transmit(unsigned char data)
{
	while( !(UCSR0A & (1<<UDRE0)) );	// 송신 가능 대기
  e4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  e8:	95 ff       	sbrs	r25, 5
  ea:	fc cf       	rjmp	.-8      	; 0xe4 <UART_transmit>
	UDR0 = data;						// 데이터 전송
  ec:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  f0:	08 95       	ret

000000f2 <UART_printString>:
}

void UART_printString(char *str)		// 문자열 송신
{
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	8c 01       	movw	r16, r24
	for(int i = 0; str[i]; i++)			// '\0'문자를 만날 때까지 반복
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	03 c0       	rjmp	.+6      	; 0x108 <UART_printString+0x16>
	UART_transmit(str[i]);				// 바이트 단위 출력
 102:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_transmit>
	UDR0 = data;						// 데이터 전송
}

void UART_printString(char *str)		// 문자열 송신
{
	for(int i = 0; str[i]; i++)			// '\0'문자를 만날 때까지 반복
 106:	21 96       	adiw	r28, 0x01	; 1
 108:	f8 01       	movw	r30, r16
 10a:	ec 0f       	add	r30, r28
 10c:	fd 1f       	adc	r31, r29
 10e:	80 81       	ld	r24, Z
 110:	81 11       	cpse	r24, r1
 112:	f7 cf       	rjmp	.-18     	; 0x102 <UART_printString+0x10>
	UART_transmit(str[i]);				// 바이트 단위 출력
}
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	1f 91       	pop	r17
 11a:	0f 91       	pop	r16
 11c:	08 95       	ret

0000011e <loop_stepper>:
	//LED_DDR |= (1 << LED1) | (1 << LED2);	// led 상태등 표시 PB0
}

void loop_stepper()
{
	STEPPING_A &= ~((1 << STEPPING_A_IN1) | (1 << STEPPING_A_IN4));		// low
 11e:	8b b1       	in	r24, 0x0b	; 11
 120:	8b 7d       	andi	r24, 0xDB	; 219
 122:	8b b9       	out	0x0b, r24	; 11
	STEPPING_A |= (1 << STEPPING_A_IN2) | (1 << STEPPING_A_IN3);		// high
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	88 61       	ori	r24, 0x18	; 24
 128:	8b b9       	out	0x0b, r24	; 11
	STEPPING_B &= ~((1 << STEPPING_B_IN1) | (1 << STEPPING_B_IN4));
 12a:	88 b1       	in	r24, 0x08	; 8
 12c:	86 7f       	andi	r24, 0xF6	; 246
 12e:	88 b9       	out	0x08, r24	; 8
	STEPPING_B |= (1 << STEPPING_B_IN2) | (1 << STEPPING_B_IN3);
 130:	88 b1       	in	r24, 0x08	; 8
 132:	86 60       	ori	r24, 0x06	; 6
 134:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	89 ef       	ldi	r24, 0xF9	; 249
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <loop_stepper+0x1e>
 144:	00 c0       	rjmp	.+0      	; 0x146 <loop_stepper+0x28>
 146:	00 00       	nop
	_delay_us(motor_time);

	STEPPING_A &= ~((1 << STEPPING_A_IN1) | (1 << STEPPING_A_IN3));
 148:	8b b1       	in	r24, 0x0b	; 11
 14a:	8b 7e       	andi	r24, 0xEB	; 235
 14c:	8b b9       	out	0x0b, r24	; 11
	STEPPING_A |= (1 << STEPPING_A_IN2) | (1 << STEPPING_A_IN4);
 14e:	8b b1       	in	r24, 0x0b	; 11
 150:	88 62       	ori	r24, 0x28	; 40
 152:	8b b9       	out	0x0b, r24	; 11
	STEPPING_B &= ~((1 << STEPPING_B_IN1) | (1 << STEPPING_B_IN3));
 154:	88 b1       	in	r24, 0x08	; 8
 156:	8a 7f       	andi	r24, 0xFA	; 250
 158:	88 b9       	out	0x08, r24	; 8
	STEPPING_B |= (1 << STEPPING_B_IN2) | (1 << STEPPING_B_IN4);
 15a:	88 b1       	in	r24, 0x08	; 8
 15c:	8a 60       	ori	r24, 0x0A	; 10
 15e:	88 b9       	out	0x08, r24	; 8
 160:	2f ef       	ldi	r18, 0xFF	; 255
 162:	89 ef       	ldi	r24, 0xF9	; 249
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	21 50       	subi	r18, 0x01	; 1
 168:	80 40       	sbci	r24, 0x00	; 0
 16a:	90 40       	sbci	r25, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <loop_stepper+0x48>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <loop_stepper+0x52>
 170:	00 00       	nop
	_delay_us(motor_time);
	
	STEPPING_A &= ~((1 << STEPPING_A_IN2) | (1 << STEPPING_A_IN3));
 172:	8b b1       	in	r24, 0x0b	; 11
 174:	87 7e       	andi	r24, 0xE7	; 231
 176:	8b b9       	out	0x0b, r24	; 11
	STEPPING_A |= (1 << STEPPING_A_IN1) | (1 << STEPPING_A_IN4);
 178:	8b b1       	in	r24, 0x0b	; 11
 17a:	84 62       	ori	r24, 0x24	; 36
 17c:	8b b9       	out	0x0b, r24	; 11
	STEPPING_B &= ~((1 << STEPPING_B_IN2) | (1 << STEPPING_B_IN3));
 17e:	88 b1       	in	r24, 0x08	; 8
 180:	89 7f       	andi	r24, 0xF9	; 249
 182:	88 b9       	out	0x08, r24	; 8
	STEPPING_B |= (1 << STEPPING_B_IN1) | (1 << STEPPING_B_IN4);
 184:	88 b1       	in	r24, 0x08	; 8
 186:	89 60       	ori	r24, 0x09	; 9
 188:	88 b9       	out	0x08, r24	; 8
 18a:	2f ef       	ldi	r18, 0xFF	; 255
 18c:	89 ef       	ldi	r24, 0xF9	; 249
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	21 50       	subi	r18, 0x01	; 1
 192:	80 40       	sbci	r24, 0x00	; 0
 194:	90 40       	sbci	r25, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <loop_stepper+0x72>
 198:	00 c0       	rjmp	.+0      	; 0x19a <loop_stepper+0x7c>
 19a:	00 00       	nop
	_delay_us(motor_time);

	STEPPING_A &= ~((1 << STEPPING_A_IN2) | (1 << STEPPING_A_IN4));
 19c:	8b b1       	in	r24, 0x0b	; 11
 19e:	87 7d       	andi	r24, 0xD7	; 215
 1a0:	8b b9       	out	0x0b, r24	; 11
	STEPPING_A |= (1 << STEPPING_A_IN1) | (1 << STEPPING_A_IN3);
 1a2:	8b b1       	in	r24, 0x0b	; 11
 1a4:	84 61       	ori	r24, 0x14	; 20
 1a6:	8b b9       	out	0x0b, r24	; 11
	STEPPING_B &= ~((1 << STEPPING_B_IN2) | (1 << STEPPING_B_IN4));
 1a8:	88 b1       	in	r24, 0x08	; 8
 1aa:	85 7f       	andi	r24, 0xF5	; 245
 1ac:	88 b9       	out	0x08, r24	; 8
	STEPPING_B |= (1 << STEPPING_B_IN1) | (1 << STEPPING_B_IN3);
 1ae:	88 b1       	in	r24, 0x08	; 8
 1b0:	85 60       	ori	r24, 0x05	; 5
 1b2:	88 b9       	out	0x08, r24	; 8
 1b4:	2f ef       	ldi	r18, 0xFF	; 255
 1b6:	89 ef       	ldi	r24, 0xF9	; 249
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	21 50       	subi	r18, 0x01	; 1
 1bc:	80 40       	sbci	r24, 0x00	; 0
 1be:	90 40       	sbci	r25, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <loop_stepper+0x9c>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <loop_stepper+0xa6>
 1c4:	00 00       	nop
 1c6:	08 95       	ret

000001c8 <main>:
void INIT_STEPPER();
// 스테핑모터 돌리기
void loop_stepper();

int main(void)
{
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	cd b7       	in	r28, 0x3d	; 61
 1ce:	de b7       	in	r29, 0x3e	; 62
 1d0:	a8 97       	sbiw	r28, 0x28	; 40
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	f8 94       	cli
 1d6:	de bf       	out	0x3e, r29	; 62
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	cd bf       	out	0x3d, r28	; 61
	char stepping_can_move = "none";
	int counter = 100; 			// 카운터
	int index = 0;				// 수신 버퍼에 저장할 위치
	int process_data = 0;		// 문자열 처리
	char buffer[20] = "";		// 수신 데이터 버퍼
 1dc:	1a 82       	std	Y+2, r1	; 0x02
 1de:	19 82       	std	Y+1, r1	; 0x01
 1e0:	fe 01       	movw	r30, r28
 1e2:	33 96       	adiw	r30, 0x03	; 3
 1e4:	82 e1       	ldi	r24, 0x12	; 18
 1e6:	df 01       	movw	r26, r30
 1e8:	1d 92       	st	X+, r1
 1ea:	8a 95       	dec	r24
 1ec:	e9 f7       	brne	.-6      	; 0x1e8 <main+0x20>
	char buffer_data[20];
	char data;					// 수신 데이터
	
	UART_INIT();				// UART 통신 초기화
 1ee:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_INIT>
	
	UART_printString("====stepping motor====");
 1f2:	85 e0       	ldi	r24, 0x05	; 5
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	0e 94 79 00 	call	0xf2	; 0xf2 <UART_printString>
	UART_printString(stepping_can_move);
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	99 27       	eor	r25, r25
 200:	0e 94 79 00 	call	0xf2	; 0xf2 <UART_printString>
	//UART_print16bitNumber(counter);
	UART_printString("\n");
 204:	8c e1       	ldi	r24, 0x1C	; 28
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	0e 94 79 00 	call	0xf2	; 0xf2 <UART_printString>
int main(void)
{
	char stepping_can_move = "none";
	int counter = 100; 			// 카운터
	int index = 0;				// 수신 버퍼에 저장할 위치
	int process_data = 0;		// 문자열 처리
 20c:	e1 2c       	mov	r14, r1
 20e:	f1 2c       	mov	r15, r1

int main(void)
{
	char stepping_can_move = "none";
	int counter = 100; 			// 카운터
	int index = 0;				// 수신 버퍼에 저장할 위치
 210:	00 e0       	ldi	r16, 0x00	; 0
 212:	10 e0       	ldi	r17, 0x00	; 0
	//UART_print16bitNumber(counter);
	UART_printString("\n");
	
	while(1)
	{
		data = UART_receive();	// 데이터 수신
 214:	0e 94 6b 00 	call	0xd6	; 0xd6 <UART_receive>
		if(data == TERMINATOR) {	// 종료 문자를 수신한 경우
 218:	84 32       	cpi	r24, 0x24	; 36
 21a:	59 f4       	brne	.+22     	; 0x232 <main+0x6a>
			buffer[index] = '\0';
 21c:	e1 e0       	ldi	r30, 0x01	; 1
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	ec 0f       	add	r30, r28
 222:	fd 1f       	adc	r31, r29
 224:	e0 0f       	add	r30, r16
 226:	f1 1f       	adc	r31, r17
 228:	10 82       	st	Z, r1
			process_data = 1;		// 수신 문자열 처리 지시
 22a:	ee 24       	eor	r14, r14
 22c:	e3 94       	inc	r14
 22e:	f1 2c       	mov	r15, r1
 230:	09 c0       	rjmp	.+18     	; 0x244 <main+0x7c>
		}
		else{
			buffer[index] = data;	// 수신 버퍼에 저장
 232:	e1 e0       	ldi	r30, 0x01	; 1
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	ec 0f       	add	r30, r28
 238:	fd 1f       	adc	r31, r29
 23a:	e0 0f       	add	r30, r16
 23c:	f1 1f       	adc	r31, r17
 23e:	80 83       	st	Z, r24
			index++;
 240:	0f 5f       	subi	r16, 0xFF	; 255
 242:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		
		if(process_data == 1){		// 문자열 처리
 244:	b1 e0       	ldi	r27, 0x01	; 1
 246:	eb 16       	cp	r14, r27
 248:	f1 04       	cpc	r15, r1
 24a:	09 f0       	breq	.+2      	; 0x24e <main+0x86>
 24c:	51 c0       	rjmp	.+162    	; 0x2f0 <main+0x128>
			strcpy(buffer_data, buffer);
 24e:	be 01       	movw	r22, r28
 250:	6f 5f       	subi	r22, 0xFF	; 255
 252:	7f 4f       	sbci	r23, 0xFF	; 255
 254:	ce 01       	movw	r24, r28
 256:	45 96       	adiw	r24, 0x15	; 21
 258:	0e 94 8d 01 	call	0x31a	; 0x31a <strcpy>
			if((strcmp(buffer_data, "mov") != 0) && (strcmp(buffer_data, "stp") != 0)){
 25c:	6e e1       	ldi	r22, 0x1E	; 30
 25e:	71 e0       	ldi	r23, 0x01	; 1
 260:	ce 01       	movw	r24, r28
 262:	45 96       	adiw	r24, 0x15	; 21
 264:	0e 94 84 01 	call	0x308	; 0x308 <strcmp>
 268:	8c 01       	movw	r16, r24
 26a:	89 2b       	or	r24, r25
 26c:	c9 f0       	breq	.+50     	; 0x2a0 <main+0xd8>
 26e:	62 e2       	ldi	r22, 0x22	; 34
 270:	71 e0       	ldi	r23, 0x01	; 1
 272:	ce 01       	movw	r24, r28
 274:	45 96       	adiw	r24, 0x15	; 21
 276:	0e 94 84 01 	call	0x308	; 0x308 <strcmp>
 27a:	89 2b       	or	r24, r25
 27c:	89 f0       	breq	.+34     	; 0x2a0 <main+0xd8>
				UART_printString("** Unknown Command **\t: ");
 27e:	86 e2       	ldi	r24, 0x26	; 38
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	0e 94 79 00 	call	0xf2	; 0xf2 <UART_printString>
				UART_printString(buffer);
 286:	ce 01       	movw	r24, r28
 288:	01 96       	adiw	r24, 0x01	; 1
 28a:	0e 94 79 00 	call	0xf2	; 0xf2 <UART_printString>
				UART_printString("\n");
 28e:	8c e1       	ldi	r24, 0x1C	; 28
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	0e 94 79 00 	call	0xf2	; 0xf2 <UART_printString>
			//else{					// 잘못된 명령어
				//UART_printString("** Unknown Command **");
				//UART_printString("\n");
			//}
			index = 0;
			process_data = 0;
 296:	e1 2c       	mov	r14, r1
 298:	f1 2c       	mov	r15, r1
			//}
			//else{					// 잘못된 명령어
				//UART_printString("** Unknown Command **");
				//UART_printString("\n");
			//}
			index = 0;
 29a:	00 e0       	ldi	r16, 0x00	; 0
 29c:	10 e0       	ldi	r17, 0x00	; 0
		if(process_data == 1){		// 문자열 처리
			strcpy(buffer_data, buffer);
			if((strcmp(buffer_data, "mov") != 0) && (strcmp(buffer_data, "stp") != 0)){
				UART_printString("** Unknown Command **\t: ");
				UART_printString(buffer);
				UART_printString("\n");
 29e:	28 c0       	rjmp	.+80     	; 0x2f0 <main+0x128>
			}
			else if (strcmp(buffer_data, "stp") == 0) {
 2a0:	62 e2       	ldi	r22, 0x22	; 34
 2a2:	71 e0       	ldi	r23, 0x01	; 1
 2a4:	ce 01       	movw	r24, r28
 2a6:	45 96       	adiw	r24, 0x15	; 21
 2a8:	0e 94 84 01 	call	0x308	; 0x308 <strcmp>
 2ac:	89 2b       	or	r24, r25
 2ae:	69 f4       	brne	.+26     	; 0x2ca <main+0x102>
				UART_printString("STOP!!");
 2b0:	8f e3       	ldi	r24, 0x3F	; 63
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	0e 94 79 00 	call	0xf2	; 0xf2 <UART_printString>
				UART_printString("\n");
 2b8:	8c e1       	ldi	r24, 0x1C	; 28
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	0e 94 79 00 	call	0xf2	; 0xf2 <UART_printString>
			//else{					// 잘못된 명령어
				//UART_printString("** Unknown Command **");
				//UART_printString("\n");
			//}
			index = 0;
			process_data = 0;
 2c0:	e1 2c       	mov	r14, r1
 2c2:	f1 2c       	mov	r15, r1
			//}
			//else{					// 잘못된 명령어
				//UART_printString("** Unknown Command **");
				//UART_printString("\n");
			//}
			index = 0;
 2c4:	00 e0       	ldi	r16, 0x00	; 0
 2c6:	10 e0       	ldi	r17, 0x00	; 0
 2c8:	13 c0       	rjmp	.+38     	; 0x2f0 <main+0x128>
			}
			else if (strcmp(buffer_data, "stp") == 0) {
				UART_printString("STOP!!");
				UART_printString("\n");
			}
			else if (strcmp(buffer_data, "mov") == 0) {
 2ca:	01 2b       	or	r16, r17
 2cc:	69 f4       	brne	.+26     	; 0x2e8 <main+0x120>
				UART_printString("MOVE!");
 2ce:	86 e4       	ldi	r24, 0x46	; 70
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	0e 94 79 00 	call	0xf2	; 0xf2 <UART_printString>
				UART_printString("\n");
 2d6:	8c e1       	ldi	r24, 0x1C	; 28
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	0e 94 79 00 	call	0xf2	; 0xf2 <UART_printString>
			//else{					// 잘못된 명령어
				//UART_printString("** Unknown Command **");
				//UART_printString("\n");
			//}
			index = 0;
			process_data = 0;
 2de:	e1 2c       	mov	r14, r1
 2e0:	f1 2c       	mov	r15, r1
			//}
			//else{					// 잘못된 명령어
				//UART_printString("** Unknown Command **");
				//UART_printString("\n");
			//}
			index = 0;
 2e2:	00 e0       	ldi	r16, 0x00	; 0
 2e4:	10 e0       	ldi	r17, 0x00	; 0
 2e6:	04 c0       	rjmp	.+8      	; 0x2f0 <main+0x128>
			process_data = 0;
 2e8:	e1 2c       	mov	r14, r1
 2ea:	f1 2c       	mov	r15, r1
			//}
			//else{					// 잘못된 명령어
				//UART_printString("** Unknown Command **");
				//UART_printString("\n");
			//}
			index = 0;
 2ec:	00 e0       	ldi	r16, 0x00	; 0
 2ee:	10 e0       	ldi	r17, 0x00	; 0
			process_data = 0;
		}
		if(strcmp(buffer_data, "move") == 0){
 2f0:	6c e4       	ldi	r22, 0x4C	; 76
 2f2:	71 e0       	ldi	r23, 0x01	; 1
 2f4:	ce 01       	movw	r24, r28
 2f6:	45 96       	adiw	r24, 0x15	; 21
 2f8:	0e 94 84 01 	call	0x308	; 0x308 <strcmp>
 2fc:	89 2b       	or	r24, r25
 2fe:	09 f0       	breq	.+2      	; 0x302 <main+0x13a>
 300:	89 cf       	rjmp	.-238    	; 0x214 <main+0x4c>
			loop_stepper();
 302:	0e 94 8f 00 	call	0x11e	; 0x11e <loop_stepper>
 306:	86 cf       	rjmp	.-244    	; 0x214 <main+0x4c>

00000308 <strcmp>:
 308:	fb 01       	movw	r30, r22
 30a:	dc 01       	movw	r26, r24
 30c:	8d 91       	ld	r24, X+
 30e:	01 90       	ld	r0, Z+
 310:	80 19       	sub	r24, r0
 312:	01 10       	cpse	r0, r1
 314:	d9 f3       	breq	.-10     	; 0x30c <strcmp+0x4>
 316:	99 0b       	sbc	r25, r25
 318:	08 95       	ret

0000031a <strcpy>:
 31a:	fb 01       	movw	r30, r22
 31c:	dc 01       	movw	r26, r24
 31e:	01 90       	ld	r0, Z+
 320:	0d 92       	st	X+, r0
 322:	00 20       	and	r0, r0
 324:	e1 f7       	brne	.-8      	; 0x31e <strcpy+0x4>
 326:	08 95       	ret

00000328 <_exit>:
 328:	f8 94       	cli

0000032a <__stop_program>:
 32a:	ff cf       	rjmp	.-2      	; 0x32a <__stop_program>
